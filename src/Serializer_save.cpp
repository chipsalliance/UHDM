/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Serializer.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <vector>
#include <unordered_map>
typedef void any;
#include "headers/containers.h"
#include "headers/uhdm.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include "UHDM.capnp.h"
#include <capnp/message.h>
#include <capnp/serialize-packed.h>
#include <iostream>


using namespace UHDM;

std::unordered_map<BaseClass*, unsigned long> Serializer::allIds_;

void Serializer::setId(BaseClass* p, unsigned long id) {
  allIds_.insert(std::make_pair(p, id));
}

static unsigned long incrId = 0;
unsigned long Serializer::getId(BaseClass* p) {
  std::unordered_map<BaseClass*, unsigned long>::iterator itr = allIds_.find(p);
  if (itr == allIds_.end()) {
    unsigned long tmp = incrId;
    allIds_.insert(std::make_pair(p, incrId));
    incrId++;
    return tmp;		  
  } else {
    return (*itr).second;
  }
}

std::vector<std::vector<any*>*> VectorOfanyFactory::objects_;
std::vector<process*> processFactory::objects_;
std::vector<std::vector<process*>*> VectorOfprocessFactory::objects_;
std::vector<property_decl*> property_declFactory::objects_;
std::vector<std::vector<property_decl*>*> VectorOfproperty_declFactory::objects_;
std::vector<sequence_decl*> sequence_declFactory::objects_;
std::vector<std::vector<sequence_decl*>*> VectorOfsequence_declFactory::objects_;
std::vector<std::vector<concurrent_assertion*>*> VectorOfconcurrent_assertionFactory::objects_;
std::vector<virtual_interface_var*> virtual_interface_varFactory::objects_;
std::vector<std::vector<virtual_interface_var*>*> VectorOfvirtual_interface_varFactory::objects_;
std::vector<let_decl*> let_declFactory::objects_;
std::vector<std::vector<let_decl*>*> VectorOflet_declFactory::objects_;
std::vector<std::vector<stmt*>*> VectorOfstmtFactory::objects_;
std::vector<std::vector<scope*>*> VectorOfscopeFactory::objects_;
std::vector<begin*> beginFactory::objects_;
std::vector<std::vector<begin*>*> VectorOfbeginFactory::objects_;
std::vector<named_begin*> named_beginFactory::objects_;
std::vector<std::vector<named_begin*>*> VectorOfnamed_beginFactory::objects_;
std::vector<named_fork*> named_forkFactory::objects_;
std::vector<std::vector<named_fork*>*> VectorOfnamed_forkFactory::objects_;
std::vector<fork_stmt*> fork_stmtFactory::objects_;
std::vector<std::vector<fork_stmt*>*> VectorOffork_stmtFactory::objects_;
std::vector<for_stmt*> for_stmtFactory::objects_;
std::vector<std::vector<for_stmt*>*> VectorOffor_stmtFactory::objects_;
std::vector<foreach_stmt*> foreach_stmtFactory::objects_;
std::vector<std::vector<foreach_stmt*>*> VectorOfforeach_stmtFactory::objects_;
std::vector<gen_scope*> gen_scopeFactory::objects_;
std::vector<std::vector<gen_scope*>*> VectorOfgen_scopeFactory::objects_;
std::vector<std::vector<expr_dist*>*> VectorOfexpr_distFactory::objects_;
std::vector<std::vector<expr*>*> VectorOfexprFactory::objects_;
std::vector<distribution*> distributionFactory::objects_;
std::vector<std::vector<distribution*>*> VectorOfdistributionFactory::objects_;
std::vector<std::vector<operand_group*>*> VectorOfoperand_groupFactory::objects_;
std::vector<operation*> operationFactory::objects_;
std::vector<std::vector<operation*>*> VectorOfoperationFactory::objects_;
std::vector<part_select*> part_selectFactory::objects_;
std::vector<std::vector<part_select*>*> VectorOfpart_selectFactory::objects_;
std::vector<ref_obj*> ref_objFactory::objects_;
std::vector<std::vector<ref_obj*>*> VectorOfref_objFactory::objects_;
std::vector<var_select*> var_selectFactory::objects_;
std::vector<std::vector<var_select*>*> VectorOfvar_selectFactory::objects_;
std::vector<std::vector<variables*>*> VectorOfvariablesFactory::objects_;
std::vector<std::vector<variable_drivers*>*> VectorOfvariable_driversFactory::objects_;
std::vector<std::vector<variable_loads*>*> VectorOfvariable_loadsFactory::objects_;
std::vector<short_real_var*> short_real_varFactory::objects_;
std::vector<std::vector<short_real_var*>*> VectorOfshort_real_varFactory::objects_;
std::vector<real_var*> real_varFactory::objects_;
std::vector<std::vector<real_var*>*> VectorOfreal_varFactory::objects_;
std::vector<byte_var*> byte_varFactory::objects_;
std::vector<std::vector<byte_var*>*> VectorOfbyte_varFactory::objects_;
std::vector<short_int_var*> short_int_varFactory::objects_;
std::vector<std::vector<short_int_var*>*> VectorOfshort_int_varFactory::objects_;
std::vector<int_var*> int_varFactory::objects_;
std::vector<std::vector<int_var*>*> VectorOfint_varFactory::objects_;
std::vector<long_int_var*> long_int_varFactory::objects_;
std::vector<std::vector<long_int_var*>*> VectorOflong_int_varFactory::objects_;
std::vector<integer_var*> integer_varFactory::objects_;
std::vector<std::vector<integer_var*>*> VectorOfinteger_varFactory::objects_;
std::vector<time_var*> time_varFactory::objects_;
std::vector<std::vector<time_var*>*> VectorOftime_varFactory::objects_;
std::vector<array_var*> array_varFactory::objects_;
std::vector<std::vector<array_var*>*> VectorOfarray_varFactory::objects_;
std::vector<packed_array_var*> packed_array_varFactory::objects_;
std::vector<std::vector<packed_array_var*>*> VectorOfpacked_array_varFactory::objects_;
std::vector<bit_var*> bit_varFactory::objects_;
std::vector<std::vector<bit_var*>*> VectorOfbit_varFactory::objects_;
std::vector<logic_var*> logic_varFactory::objects_;
std::vector<std::vector<logic_var*>*> VectorOflogic_varFactory::objects_;
std::vector<struct_var*> struct_varFactory::objects_;
std::vector<std::vector<struct_var*>*> VectorOfstruct_varFactory::objects_;
std::vector<union_var*> union_varFactory::objects_;
std::vector<std::vector<union_var*>*> VectorOfunion_varFactory::objects_;
std::vector<enum_var*> enum_varFactory::objects_;
std::vector<std::vector<enum_var*>*> VectorOfenum_varFactory::objects_;
std::vector<string_var*> string_varFactory::objects_;
std::vector<std::vector<string_var*>*> VectorOfstring_varFactory::objects_;
std::vector<chandle_var*> chandle_varFactory::objects_;
std::vector<std::vector<chandle_var*>*> VectorOfchandle_varFactory::objects_;
std::vector<class_var*> class_varFactory::objects_;
std::vector<std::vector<class_var*>*> VectorOfclass_varFactory::objects_;
std::vector<var_bit*> var_bitFactory::objects_;
std::vector<std::vector<var_bit*>*> VectorOfvar_bitFactory::objects_;
std::vector<std::vector<task_func*>*> VectorOftask_funcFactory::objects_;
std::vector<task*> taskFactory::objects_;
std::vector<std::vector<task*>*> VectorOftaskFactory::objects_;
std::vector<function*> functionFactory::objects_;
std::vector<std::vector<function*>*> VectorOffunctionFactory::objects_;
std::vector<modport*> modportFactory::objects_;
std::vector<std::vector<modport*>*> VectorOfmodportFactory::objects_;
std::vector<interface_tf_decl*> interface_tf_declFactory::objects_;
std::vector<std::vector<interface_tf_decl*>*> VectorOfinterface_tf_declFactory::objects_;
std::vector<cont_assign*> cont_assignFactory::objects_;
std::vector<std::vector<cont_assign*>*> VectorOfcont_assignFactory::objects_;
std::vector<std::vector<ports*>*> VectorOfportsFactory::objects_;
std::vector<port*> portFactory::objects_;
std::vector<std::vector<port*>*> VectorOfportFactory::objects_;
std::vector<port_bit*> port_bitFactory::objects_;
std::vector<std::vector<port_bit*>*> VectorOfport_bitFactory::objects_;
std::vector<primitive*> primitiveFactory::objects_;
std::vector<std::vector<primitive*>*> VectorOfprimitiveFactory::objects_;
std::vector<mod_path*> mod_pathFactory::objects_;
std::vector<std::vector<mod_path*>*> VectorOfmod_pathFactory::objects_;
std::vector<tchk*> tchkFactory::objects_;
std::vector<std::vector<tchk*>*> VectorOftchkFactory::objects_;
std::vector<def_param*> def_paramFactory::objects_;
std::vector<std::vector<def_param*>*> VectorOfdef_paramFactory::objects_;
std::vector<range*> rangeFactory::objects_;
std::vector<std::vector<range*>*> VectorOfrangeFactory::objects_;
std::vector<udp_defn*> udp_defnFactory::objects_;
std::vector<std::vector<udp_defn*>*> VectorOfudp_defnFactory::objects_;
std::vector<io_decl*> io_declFactory::objects_;
std::vector<std::vector<io_decl*>*> VectorOfio_declFactory::objects_;
std::vector<alias_stmt*> alias_stmtFactory::objects_;
std::vector<std::vector<alias_stmt*>*> VectorOfalias_stmtFactory::objects_;
std::vector<clocking_block*> clocking_blockFactory::objects_;
std::vector<std::vector<clocking_block*>*> VectorOfclocking_blockFactory::objects_;
std::vector<param_assign*> param_assignFactory::objects_;
std::vector<std::vector<param_assign*>*> VectorOfparam_assignFactory::objects_;
std::vector<std::vector<instance_array*>*> VectorOfinstance_arrayFactory::objects_;
std::vector<interface_array*> interface_arrayFactory::objects_;
std::vector<std::vector<interface_array*>*> VectorOfinterface_arrayFactory::objects_;
std::vector<program_array*> program_arrayFactory::objects_;
std::vector<std::vector<program_array*>*> VectorOfprogram_arrayFactory::objects_;
std::vector<module_array*> module_arrayFactory::objects_;
std::vector<std::vector<module_array*>*> VectorOfmodule_arrayFactory::objects_;
std::vector<std::vector<primitive_array*>*> VectorOfprimitive_arrayFactory::objects_;
std::vector<gate_array*> gate_arrayFactory::objects_;
std::vector<std::vector<gate_array*>*> VectorOfgate_arrayFactory::objects_;
std::vector<switch_array*> switch_arrayFactory::objects_;
std::vector<std::vector<switch_array*>*> VectorOfswitch_arrayFactory::objects_;
std::vector<udp_array*> udp_arrayFactory::objects_;
std::vector<std::vector<udp_array*>*> VectorOfudp_arrayFactory::objects_;
std::vector<std::vector<typespec*>*> VectorOftypespecFactory::objects_;
std::vector<std::vector<net_drivers*>*> VectorOfnet_driversFactory::objects_;
std::vector<std::vector<net_loads*>*> VectorOfnet_loadsFactory::objects_;
std::vector<prim_term*> prim_termFactory::objects_;
std::vector<std::vector<prim_term*>*> VectorOfprim_termFactory::objects_;
std::vector<path_term*> path_termFactory::objects_;
std::vector<std::vector<path_term*>*> VectorOfpath_termFactory::objects_;
std::vector<tchk_term*> tchk_termFactory::objects_;
std::vector<std::vector<tchk_term*>*> VectorOftchk_termFactory::objects_;
std::vector<std::vector<nets*>*> VectorOfnetsFactory::objects_;
std::vector<net_bit*> net_bitFactory::objects_;
std::vector<std::vector<net_bit*>*> VectorOfnet_bitFactory::objects_;
std::vector<std::vector<net*>*> VectorOfnetFactory::objects_;
std::vector<struct_net*> struct_netFactory::objects_;
std::vector<std::vector<struct_net*>*> VectorOfstruct_netFactory::objects_;
std::vector<enum_net*> enum_netFactory::objects_;
std::vector<std::vector<enum_net*>*> VectorOfenum_netFactory::objects_;
std::vector<integer_net*> integer_netFactory::objects_;
std::vector<std::vector<integer_net*>*> VectorOfinteger_netFactory::objects_;
std::vector<time_net*> time_netFactory::objects_;
std::vector<std::vector<time_net*>*> VectorOftime_netFactory::objects_;
std::vector<logic_net*> logic_netFactory::objects_;
std::vector<std::vector<logic_net*>*> VectorOflogic_netFactory::objects_;
std::vector<array_net*> array_netFactory::objects_;
std::vector<std::vector<array_net*>*> VectorOfarray_netFactory::objects_;
std::vector<packed_array_net*> packed_array_netFactory::objects_;
std::vector<std::vector<packed_array_net*>*> VectorOfpacked_array_netFactory::objects_;
std::vector<named_event*> named_eventFactory::objects_;
std::vector<std::vector<named_event*>*> VectorOfnamed_eventFactory::objects_;
std::vector<named_event_array*> named_event_arrayFactory::objects_;
std::vector<std::vector<named_event_array*>*> VectorOfnamed_event_arrayFactory::objects_;
std::vector<std::vector<parameters*>*> VectorOfparametersFactory::objects_;
std::vector<spec_param*> spec_paramFactory::objects_;
std::vector<std::vector<spec_param*>*> VectorOfspec_paramFactory::objects_;
std::vector<std::vector<assertion*>*> VectorOfassertionFactory::objects_;
std::vector<class_defn*> class_defnFactory::objects_;
std::vector<std::vector<class_defn*>*> VectorOfclass_defnFactory::objects_;
std::vector<class_typespec*> class_typespecFactory::objects_;
std::vector<std::vector<class_typespec*>*> VectorOfclass_typespecFactory::objects_;
std::vector<class_obj*> class_objFactory::objects_;
std::vector<std::vector<class_obj*>*> VectorOfclass_objFactory::objects_;
std::vector<std::vector<instance*>*> VectorOfinstanceFactory::objects_;
std::vector<interface*> interfaceFactory::objects_;
std::vector<std::vector<interface*>*> VectorOfinterfaceFactory::objects_;
std::vector<program*> programFactory::objects_;
std::vector<std::vector<program*>*> VectorOfprogramFactory::objects_;
std::vector<package*> packageFactory::objects_;
std::vector<std::vector<package*>*> VectorOfpackageFactory::objects_;
std::vector<module*> moduleFactory::objects_;
std::vector<std::vector<module*>*> VectorOfmoduleFactory::objects_;
std::vector<design*> designFactory::objects_;
std::vector<std::vector<design*>*> VectorOfdesignFactory::objects_;

std::string getUhdmName(unsigned int type) {
      switch (type) {
case 2248: return "uhdminstance_array";
case 2167: return "uhdminstance_items";
case 2250: return "uhdmmodules";
case 2249: return "uhdminstances";
case 2168: return "uhdmbegin";
case 2251: return "uhdminterface_array";
case 2169: return "uhdmstmts";
case 2170: return "uhdmnamed_begin";
case 2252: return "uhdmparam_assigns";
case 2171: return "uhdmnamed_fork";
case 2253: return "uhdmprogram_array";
case 2172: return "uhdmfork_stmt";
case 2254: return "uhdmmodule_array";
case 2173: return "uhdmfor_stmt";
case 2255: return "uhdmprimitive_array";
case 2174: return "uhdmforeach_stmt";
case 2256: return "uhdmdelay";
case 2175: return "uhdmgen_scope";
case 2257: return "uhdmprimitives";
case 2176: return "uhdmexpr_dist";
case 2258: return "uhdmgate_array";
case 2177: return "uhdmexpr";
case 2260: return "uhdmudp_array";
case 2259: return "uhdmswitch_array";
case 2178: return "uhdmdistribution";
case 2261: return "uhdmnet_drivers";
case 2179: return "uhdmoperand_group";
case 2180: return "uhdmoperation";
case 2262: return "uhdmnet_loads";
case 2181: return "uhdmoperands";
case 2263: return "uhdmprim_term";
case 2182: return "uhdmpart_select";
case 2264: return "uhdmnets";
case 2183: return "uhdmref_obj";
case 2265: return "uhdmdrivers";
case 2184: return "uhdmports";
case 2266: return "uhdmloads";
case 2185: return "uhdmtypespec";
case 2267: return "uhdmlocal_drivers";
case 2186: return "uhdminstance";
case 2268: return "uhdmlocal_loads";
case 2187: return "uhdmtask_func";
case 2270: return "uhdmnet_bit";
case 2269: return "uhdmsim_nets";
case 2188: return "uhdmactual_group";
case 2271: return "uhdmnet";
case 2200: return "uhdmbyte_var";
case 2189: return "uhdmvar_select";
case 2190: return "uhdmvariable_drivers";
case 2272: return "uhdmnet_bits";
case 2201: return "uhdmshort_int_var";
case 2191: return "uhdmvariable_loads";
case 2273: return "uhdmstruct_net";
case 2202: return "uhdmint_var";
case 2192: return "uhdmindexes";
case 2274: return "uhdmenum_net";
case 2203: return "uhdmlong_int_var";
case 2193: return "uhdmprim_terms";
case 2275: return "uhdminteger_net";
case 2204: return "uhdminteger_var";
case 2194: return "uhdmcont_assigns";
case 2276: return "uhdmtime_net";
case 2205: return "uhdmtime_var";
case 2195: return "uhdmpath_term";
case 2277: return "uhdmlogic_net";
case 2206: return "uhdmleft_expr";
case 2196: return "uhdmtchk_term";
case 2278: return "uhdmarray_net";
case 2207: return "uhdmright_expr";
case 2197: return "uhdmmodule";
case 2280: return "uhdmnamed_event";
case 2279: return "uhdmpacked_array_net";
case 2208: return "uhdmvar_selects";
case 2198: return "uhdmshort_real_var";
case 2281: return "uhdmnamed_event_array";
case 2210: return "uhdmpacked_array_var";
case 2209: return "uhdmranges";
case 2199: return "uhdmreal_var";
case 2282: return "uhdmspec_param";
case 2211: return "uhdmexpr_index";
case 2283: return "uhdmassertion";
case 2212: return "uhdmvar_bits";
case 2284: return "uhdmclass_typespec";
case 2213: return "uhdmelements";
case 2285: return "uhdmclass_obj";
case 2214: return "uhdmbit_var";
case 2286: return "uhdmprograms";
case 2215: return "uhdmstruct_var";
case 2287: return "uhdmprogram_arrays";
case 2216: return "uhdmunion_var";
case 2288: return "uhdminterface_tf_decls";
case 2217: return "uhdmenum_var";
case 2300: return "uhdmtchks";
case 2290: return "uhdmglobal_clocking";
case 2289: return "uhdmmodports";
case 2218: return "uhdmstring_var";
case 2301: return "uhdmdef_params";
case 2291: return "uhdmdefault_clocking";
case 2220: return "uhdmclass_var";
case 2219: return "uhdmchandle_var";
case 2302: return "uhdmalias_stmts";
case 2292: return "uhdmmod_paths";
case 2221: return "uhdmvar_bit";
case 2303: return "uhdmdesign";
case 2293: return "uhdminterfaces";
case 2222: return "uhdmexpr_indexes";
case 2304: return "uhdmallModules";
case 2294: return "uhdminterface_arrays";
case 2223: return "uhdmclass_defn";
case 2305: return "uhdmtopModules";
case 2295: return "uhdmprogram";
case 2224: return "uhdmio_decl";
case 2306: return "uhdmallPrograms";
case 2296: return "uhdmclocking_blocks";
case 2225: return "uhdmtask";
case 2307: return "uhdmallPackages";
case 2297: return "uhdmpackage";
case 2226: return "uhdmfunction";
case 2145: return "uhdmprocess";
case 2298: return "uhdmprimitive_arrays";
case 2227: return "uhdmmodport";
case 2146: return "uhdmproperty_decl";
case 2299: return "uhdmmodule_arrays";
case 2228: return "uhdmio_decls";
case 2147: return "uhdmsequence_decl";
case 2230: return "uhdminterface_tf_decl";
case 2229: return "uhdminterface";
case 2148: return "uhdmconcurrent_assertion";
case 2231: return "uhdmtasks";
case 2150: return "uhdmlet_decl";
case 2149: return "uhdmvirtual_interface_var";
case 2232: return "uhdmfunctions";
case 2151: return "uhdmstmt";
case 2233: return "uhdmcont_assign";
case 2152: return "uhdmscope";
case 2234: return "uhdmhigh_conn";
case 2153: return "uhdmconcurrent_assertions";
case 2235: return "uhdmlow_conn";
case 2154: return "uhdmvariables";
case 2236: return "uhdmport";
case 2155: return "uhdmparameters";
case 2237: return "uhdmbits";
case 2156: return "uhdmscopes";
case 2238: return "uhdmport_bit";
case 2157: return "uhdmtypespecs";
case 2240: return "uhdmmod_path";
case 2239: return "uhdmprimitive";
case 2158: return "uhdmproperty_decls";
case 2241: return "uhdmtchk";
case 2159: return "uhdmsequence_decls";
case 2160: return "uhdmnamed_events";
case 2242: return "uhdmdef_param";
case 2161: return "uhdmnamed_event_arrays";
case 2243: return "uhdmrange";
case 2162: return "uhdmvirtual_interface_vars";
case 2244: return "uhdmudp_defn";
case 2163: return "uhdmlogic_var";
case 2245: return "uhdmalias_stmt";
case 2164: return "uhdmarray_var";
case 2246: return "uhdmclocking_block";
case 2165: return "uhdmarray_var_mem";
case 2247: return "uhdmparam_assign";
case 2166: return "uhdmlet_decls";
default: return "NO TYPE";
}
}


BaseClass* Serializer::getObject(unsigned int objectType, unsigned int index) {
  switch (objectType) {
  case uhdmprocess: return processFactory::objects_[index];
  case uhdmproperty_decl: return property_declFactory::objects_[index];
  case uhdmsequence_decl: return sequence_declFactory::objects_[index];
  case uhdmvirtual_interface_var: return virtual_interface_varFactory::objects_[index];
  case uhdmlet_decl: return let_declFactory::objects_[index];
  case uhdmbegin: return beginFactory::objects_[index];
  case uhdmnamed_begin: return named_beginFactory::objects_[index];
  case uhdmnamed_fork: return named_forkFactory::objects_[index];
  case uhdmfork_stmt: return fork_stmtFactory::objects_[index];
  case uhdmfor_stmt: return for_stmtFactory::objects_[index];
  case uhdmforeach_stmt: return foreach_stmtFactory::objects_[index];
  case uhdmgen_scope: return gen_scopeFactory::objects_[index];
  case uhdmdistribution: return distributionFactory::objects_[index];
  case uhdmoperation: return operationFactory::objects_[index];
  case uhdmpart_select: return part_selectFactory::objects_[index];
  case uhdmref_obj: return ref_objFactory::objects_[index];
  case uhdmvar_select: return var_selectFactory::objects_[index];
  case uhdmshort_real_var: return short_real_varFactory::objects_[index];
  case uhdmreal_var: return real_varFactory::objects_[index];
  case uhdmbyte_var: return byte_varFactory::objects_[index];
  case uhdmshort_int_var: return short_int_varFactory::objects_[index];
  case uhdmint_var: return int_varFactory::objects_[index];
  case uhdmlong_int_var: return long_int_varFactory::objects_[index];
  case uhdminteger_var: return integer_varFactory::objects_[index];
  case uhdmtime_var: return time_varFactory::objects_[index];
  case uhdmarray_var: return array_varFactory::objects_[index];
  case uhdmpacked_array_var: return packed_array_varFactory::objects_[index];
  case uhdmbit_var: return bit_varFactory::objects_[index];
  case uhdmlogic_var: return logic_varFactory::objects_[index];
  case uhdmstruct_var: return struct_varFactory::objects_[index];
  case uhdmunion_var: return union_varFactory::objects_[index];
  case uhdmenum_var: return enum_varFactory::objects_[index];
  case uhdmstring_var: return string_varFactory::objects_[index];
  case uhdmchandle_var: return chandle_varFactory::objects_[index];
  case uhdmclass_var: return class_varFactory::objects_[index];
  case uhdmvar_bit: return var_bitFactory::objects_[index];
  case uhdmtask: return taskFactory::objects_[index];
  case uhdmfunction: return functionFactory::objects_[index];
  case uhdmmodport: return modportFactory::objects_[index];
  case uhdminterface_tf_decl: return interface_tf_declFactory::objects_[index];
  case uhdmcont_assign: return cont_assignFactory::objects_[index];
  case uhdmport: return portFactory::objects_[index];
  case uhdmport_bit: return port_bitFactory::objects_[index];
  case uhdmprimitive: return primitiveFactory::objects_[index];
  case uhdmmod_path: return mod_pathFactory::objects_[index];
  case uhdmtchk: return tchkFactory::objects_[index];
  case uhdmdef_param: return def_paramFactory::objects_[index];
  case uhdmrange: return rangeFactory::objects_[index];
  case uhdmudp_defn: return udp_defnFactory::objects_[index];
  case uhdmio_decl: return io_declFactory::objects_[index];
  case uhdmalias_stmt: return alias_stmtFactory::objects_[index];
  case uhdmclocking_block: return clocking_blockFactory::objects_[index];
  case uhdmparam_assign: return param_assignFactory::objects_[index];
  case uhdminterface_array: return interface_arrayFactory::objects_[index];
  case uhdmprogram_array: return program_arrayFactory::objects_[index];
  case uhdmmodule_array: return module_arrayFactory::objects_[index];
  case uhdmgate_array: return gate_arrayFactory::objects_[index];
  case uhdmswitch_array: return switch_arrayFactory::objects_[index];
  case uhdmudp_array: return udp_arrayFactory::objects_[index];
  case uhdmprim_term: return prim_termFactory::objects_[index];
  case uhdmpath_term: return path_termFactory::objects_[index];
  case uhdmtchk_term: return tchk_termFactory::objects_[index];
  case uhdmnet_bit: return net_bitFactory::objects_[index];
  case uhdmstruct_net: return struct_netFactory::objects_[index];
  case uhdmenum_net: return enum_netFactory::objects_[index];
  case uhdminteger_net: return integer_netFactory::objects_[index];
  case uhdmtime_net: return time_netFactory::objects_[index];
  case uhdmlogic_net: return logic_netFactory::objects_[index];
  case uhdmarray_net: return array_netFactory::objects_[index];
  case uhdmpacked_array_net: return packed_array_netFactory::objects_[index];
  case uhdmnamed_event: return named_eventFactory::objects_[index];
  case uhdmnamed_event_array: return named_event_arrayFactory::objects_[index];
  case uhdmspec_param: return spec_paramFactory::objects_[index];
  case uhdmclass_defn: return class_defnFactory::objects_[index];
  case uhdmclass_typespec: return class_typespecFactory::objects_[index];
  case uhdmclass_obj: return class_objFactory::objects_[index];
  case uhdminterface: return interfaceFactory::objects_[index];
  case uhdmprogram: return programFactory::objects_[index];
  case uhdmpackage: return packageFactory::objects_[index];
  case uhdmmodule: return moduleFactory::objects_[index];
  case uhdmdesign: return designFactory::objects_[index];

  default:
    return NULL;
  }
  return NULL;
}

void Serializer::purge() {

  for (auto obj : processFactory::objects_) {
    delete obj;
  }
  processFactory::objects_.clear();

  for (auto obj : property_declFactory::objects_) {
    delete obj;
  }
  property_declFactory::objects_.clear();

  for (auto obj : sequence_declFactory::objects_) {
    delete obj;
  }
  sequence_declFactory::objects_.clear();

  for (auto obj : virtual_interface_varFactory::objects_) {
    delete obj;
  }
  virtual_interface_varFactory::objects_.clear();

  for (auto obj : let_declFactory::objects_) {
    delete obj;
  }
  let_declFactory::objects_.clear();

  for (auto obj : beginFactory::objects_) {
    delete obj;
  }
  beginFactory::objects_.clear();

  for (auto obj : named_beginFactory::objects_) {
    delete obj;
  }
  named_beginFactory::objects_.clear();

  for (auto obj : named_forkFactory::objects_) {
    delete obj;
  }
  named_forkFactory::objects_.clear();

  for (auto obj : fork_stmtFactory::objects_) {
    delete obj;
  }
  fork_stmtFactory::objects_.clear();

  for (auto obj : for_stmtFactory::objects_) {
    delete obj;
  }
  for_stmtFactory::objects_.clear();

  for (auto obj : foreach_stmtFactory::objects_) {
    delete obj;
  }
  foreach_stmtFactory::objects_.clear();

  for (auto obj : gen_scopeFactory::objects_) {
    delete obj;
  }
  gen_scopeFactory::objects_.clear();

  for (auto obj : distributionFactory::objects_) {
    delete obj;
  }
  distributionFactory::objects_.clear();

  for (auto obj : operationFactory::objects_) {
    delete obj;
  }
  operationFactory::objects_.clear();

  for (auto obj : part_selectFactory::objects_) {
    delete obj;
  }
  part_selectFactory::objects_.clear();

  for (auto obj : ref_objFactory::objects_) {
    delete obj;
  }
  ref_objFactory::objects_.clear();

  for (auto obj : var_selectFactory::objects_) {
    delete obj;
  }
  var_selectFactory::objects_.clear();

  for (auto obj : short_real_varFactory::objects_) {
    delete obj;
  }
  short_real_varFactory::objects_.clear();

  for (auto obj : real_varFactory::objects_) {
    delete obj;
  }
  real_varFactory::objects_.clear();

  for (auto obj : byte_varFactory::objects_) {
    delete obj;
  }
  byte_varFactory::objects_.clear();

  for (auto obj : short_int_varFactory::objects_) {
    delete obj;
  }
  short_int_varFactory::objects_.clear();

  for (auto obj : int_varFactory::objects_) {
    delete obj;
  }
  int_varFactory::objects_.clear();

  for (auto obj : long_int_varFactory::objects_) {
    delete obj;
  }
  long_int_varFactory::objects_.clear();

  for (auto obj : integer_varFactory::objects_) {
    delete obj;
  }
  integer_varFactory::objects_.clear();

  for (auto obj : time_varFactory::objects_) {
    delete obj;
  }
  time_varFactory::objects_.clear();

  for (auto obj : array_varFactory::objects_) {
    delete obj;
  }
  array_varFactory::objects_.clear();

  for (auto obj : packed_array_varFactory::objects_) {
    delete obj;
  }
  packed_array_varFactory::objects_.clear();

  for (auto obj : bit_varFactory::objects_) {
    delete obj;
  }
  bit_varFactory::objects_.clear();

  for (auto obj : logic_varFactory::objects_) {
    delete obj;
  }
  logic_varFactory::objects_.clear();

  for (auto obj : struct_varFactory::objects_) {
    delete obj;
  }
  struct_varFactory::objects_.clear();

  for (auto obj : union_varFactory::objects_) {
    delete obj;
  }
  union_varFactory::objects_.clear();

  for (auto obj : enum_varFactory::objects_) {
    delete obj;
  }
  enum_varFactory::objects_.clear();

  for (auto obj : string_varFactory::objects_) {
    delete obj;
  }
  string_varFactory::objects_.clear();

  for (auto obj : chandle_varFactory::objects_) {
    delete obj;
  }
  chandle_varFactory::objects_.clear();

  for (auto obj : class_varFactory::objects_) {
    delete obj;
  }
  class_varFactory::objects_.clear();

  for (auto obj : var_bitFactory::objects_) {
    delete obj;
  }
  var_bitFactory::objects_.clear();

  for (auto obj : taskFactory::objects_) {
    delete obj;
  }
  taskFactory::objects_.clear();

  for (auto obj : functionFactory::objects_) {
    delete obj;
  }
  functionFactory::objects_.clear();

  for (auto obj : modportFactory::objects_) {
    delete obj;
  }
  modportFactory::objects_.clear();

  for (auto obj : interface_tf_declFactory::objects_) {
    delete obj;
  }
  interface_tf_declFactory::objects_.clear();

  for (auto obj : cont_assignFactory::objects_) {
    delete obj;
  }
  cont_assignFactory::objects_.clear();

  for (auto obj : portFactory::objects_) {
    delete obj;
  }
  portFactory::objects_.clear();

  for (auto obj : port_bitFactory::objects_) {
    delete obj;
  }
  port_bitFactory::objects_.clear();

  for (auto obj : primitiveFactory::objects_) {
    delete obj;
  }
  primitiveFactory::objects_.clear();

  for (auto obj : mod_pathFactory::objects_) {
    delete obj;
  }
  mod_pathFactory::objects_.clear();

  for (auto obj : tchkFactory::objects_) {
    delete obj;
  }
  tchkFactory::objects_.clear();

  for (auto obj : def_paramFactory::objects_) {
    delete obj;
  }
  def_paramFactory::objects_.clear();

  for (auto obj : rangeFactory::objects_) {
    delete obj;
  }
  rangeFactory::objects_.clear();

  for (auto obj : udp_defnFactory::objects_) {
    delete obj;
  }
  udp_defnFactory::objects_.clear();

  for (auto obj : io_declFactory::objects_) {
    delete obj;
  }
  io_declFactory::objects_.clear();

  for (auto obj : alias_stmtFactory::objects_) {
    delete obj;
  }
  alias_stmtFactory::objects_.clear();

  for (auto obj : clocking_blockFactory::objects_) {
    delete obj;
  }
  clocking_blockFactory::objects_.clear();

  for (auto obj : param_assignFactory::objects_) {
    delete obj;
  }
  param_assignFactory::objects_.clear();

  for (auto obj : interface_arrayFactory::objects_) {
    delete obj;
  }
  interface_arrayFactory::objects_.clear();

  for (auto obj : program_arrayFactory::objects_) {
    delete obj;
  }
  program_arrayFactory::objects_.clear();

  for (auto obj : module_arrayFactory::objects_) {
    delete obj;
  }
  module_arrayFactory::objects_.clear();

  for (auto obj : gate_arrayFactory::objects_) {
    delete obj;
  }
  gate_arrayFactory::objects_.clear();

  for (auto obj : switch_arrayFactory::objects_) {
    delete obj;
  }
  switch_arrayFactory::objects_.clear();

  for (auto obj : udp_arrayFactory::objects_) {
    delete obj;
  }
  udp_arrayFactory::objects_.clear();

  for (auto obj : prim_termFactory::objects_) {
    delete obj;
  }
  prim_termFactory::objects_.clear();

  for (auto obj : path_termFactory::objects_) {
    delete obj;
  }
  path_termFactory::objects_.clear();

  for (auto obj : tchk_termFactory::objects_) {
    delete obj;
  }
  tchk_termFactory::objects_.clear();

  for (auto obj : net_bitFactory::objects_) {
    delete obj;
  }
  net_bitFactory::objects_.clear();

  for (auto obj : struct_netFactory::objects_) {
    delete obj;
  }
  struct_netFactory::objects_.clear();

  for (auto obj : enum_netFactory::objects_) {
    delete obj;
  }
  enum_netFactory::objects_.clear();

  for (auto obj : integer_netFactory::objects_) {
    delete obj;
  }
  integer_netFactory::objects_.clear();

  for (auto obj : time_netFactory::objects_) {
    delete obj;
  }
  time_netFactory::objects_.clear();

  for (auto obj : logic_netFactory::objects_) {
    delete obj;
  }
  logic_netFactory::objects_.clear();

  for (auto obj : array_netFactory::objects_) {
    delete obj;
  }
  array_netFactory::objects_.clear();

  for (auto obj : packed_array_netFactory::objects_) {
    delete obj;
  }
  packed_array_netFactory::objects_.clear();

  for (auto obj : named_eventFactory::objects_) {
    delete obj;
  }
  named_eventFactory::objects_.clear();

  for (auto obj : named_event_arrayFactory::objects_) {
    delete obj;
  }
  named_event_arrayFactory::objects_.clear();

  for (auto obj : spec_paramFactory::objects_) {
    delete obj;
  }
  spec_paramFactory::objects_.clear();

  for (auto obj : class_defnFactory::objects_) {
    delete obj;
  }
  class_defnFactory::objects_.clear();

  for (auto obj : class_typespecFactory::objects_) {
    delete obj;
  }
  class_typespecFactory::objects_.clear();

  for (auto obj : class_objFactory::objects_) {
    delete obj;
  }
  class_objFactory::objects_.clear();

  for (auto obj : interfaceFactory::objects_) {
    delete obj;
  }
  interfaceFactory::objects_.clear();

  for (auto obj : programFactory::objects_) {
    delete obj;
  }
  programFactory::objects_.clear();

  for (auto obj : packageFactory::objects_) {
    delete obj;
  }
  packageFactory::objects_.clear();

  for (auto obj : moduleFactory::objects_) {
    delete obj;
  }
  moduleFactory::objects_.clear();

  for (auto obj : designFactory::objects_) {
    delete obj;
  }
  designFactory::objects_.clear();

}

void Serializer::save(std::string file) {
  int fileid = open(file.c_str(), O_CREAT | O_WRONLY , S_IRWXU);
  ::capnp::MallocMessageBuilder message;
  UhdmRoot::Builder cap_root = message.initRoot<UhdmRoot>();
  unsigned long index = 0;


  index = 1;
  for (auto obj : processFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : property_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : sequence_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : virtual_interface_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : let_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : beginFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_beginFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_forkFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : fork_stmtFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : for_stmtFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : foreach_stmtFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : gen_scopeFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : distributionFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : operationFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : part_selectFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : ref_objFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : var_selectFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : short_real_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : real_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : byte_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : short_int_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : int_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : long_int_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : integer_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : time_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : array_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : packed_array_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : bit_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : logic_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : struct_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : union_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : enum_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : string_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : chandle_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : class_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : var_bitFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : taskFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : functionFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : modportFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interface_tf_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : cont_assignFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : portFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : port_bitFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : primitiveFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : mod_pathFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : tchkFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : def_paramFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : rangeFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : udp_defnFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : io_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : alias_stmtFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : clocking_blockFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : param_assignFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interface_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : program_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : module_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : gate_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : switch_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : udp_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : prim_termFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : path_termFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : tchk_termFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : net_bitFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : struct_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : enum_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : integer_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : time_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : logic_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : array_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : packed_array_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_eventFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_event_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : spec_paramFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : class_defnFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : class_typespecFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : class_objFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interfaceFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : programFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : packageFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : moduleFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : designFactory::objects_) {
    setId(obj, index);
    index++;
  }
  
  ::capnp::List<Design>::Builder designs = cap_root.initDesigns(designFactory::objects_.size());
  index = 0;
  for (auto design : designFactory::objects_) {
    designs[index].setVpiName(SymbolFactory::make(design->get_vpiName()));
    index++;
  }

  ::capnp::List<::capnp::Text>::Builder symbols = cap_root.initSymbols(SymbolFactory::id2SymbolMap_.size());
  index = 0;
  for (auto symbol : SymbolFactory::id2SymbolMap_) {
    symbols.set(index, symbol);
    index++;
  }


 ::capnp::List<Process>::Builder Processs = cap_root.initFactoryProcess(processFactory::objects_.size());
 index = 0;
 for (auto obj : processFactory::objects_) {
    Processs[index].setVpiParent(getId(obj->get_vpiParent()));
    Processs[index].setUhdmParentType(obj->get_uhdmParentType());
    Processs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Processs[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Propertydecl>::Builder Propertydecls = cap_root.initFactoryPropertydecl(property_declFactory::objects_.size());
 index = 0;
 for (auto obj : property_declFactory::objects_) {
    Propertydecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Propertydecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Propertydecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Propertydecls[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Sequencedecl>::Builder Sequencedecls = cap_root.initFactorySequencedecl(sequence_declFactory::objects_.size());
 index = 0;
 for (auto obj : sequence_declFactory::objects_) {
    Sequencedecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Sequencedecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Sequencedecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Sequencedecls[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Virtualinterfacevar>::Builder Virtualinterfacevars = cap_root.initFactoryVirtualinterfacevar(virtual_interface_varFactory::objects_.size());
 index = 0;
 for (auto obj : virtual_interface_varFactory::objects_) {
    Virtualinterfacevars[index].setVpiParent(getId(obj->get_vpiParent()));
    Virtualinterfacevars[index].setUhdmParentType(obj->get_uhdmParentType());
    Virtualinterfacevars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Virtualinterfacevars[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Letdecl>::Builder Letdecls = cap_root.initFactoryLetdecl(let_declFactory::objects_.size());
 index = 0;
 for (auto obj : let_declFactory::objects_) {
    Letdecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Letdecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Letdecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Letdecls[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Begin>::Builder Begins = cap_root.initFactoryBegin(beginFactory::objects_.size());
 index = 0;
 for (auto obj : beginFactory::objects_) {
    Begins[index].setVpiParent(getId(obj->get_vpiParent()));
    Begins[index].setUhdmParentType(obj->get_uhdmParentType());
    Begins[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Begins[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_stmts()) {  
      ::capnp::List<::ObjIndexType>::Builder Stmtss = Begins[index].initStmts(obj->get_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_stmts()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Stmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_stmts())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_stmts())[ind]))->getUhdmType());
      }
    }
    Begins[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Begins[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Begins[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Begins[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Begins[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Beginss = Begins[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Beginss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Begins[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Begins[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Begins[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Begins[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Begins[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Begins[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Begins[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Begins[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Begins[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Begins[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Begins[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Namedbegin>::Builder Namedbegins = cap_root.initFactoryNamedbegin(named_beginFactory::objects_.size());
 index = 0;
 for (auto obj : named_beginFactory::objects_) {
    Namedbegins[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedbegins[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedbegins[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedbegins[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_stmts()) {  
      ::capnp::List<::ObjIndexType>::Builder Stmtss = Namedbegins[index].initStmts(obj->get_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_stmts()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Stmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_stmts())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_stmts())[ind]))->getUhdmType());
      }
    }
    Namedbegins[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Namedbegins[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Namedbegins[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Namedbegins[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Namedbegins[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Namedbeginss = Namedbegins[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Namedbeginss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Namedbegins[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Namedbegins[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Namedbegins[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Namedbegins[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Namedbegins[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Namedbegins[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Namedbegins[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Namedbegins[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Namedbegins[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Namedbegins[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Namedbegins[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Namedfork>::Builder Namedforks = cap_root.initFactoryNamedfork(named_forkFactory::objects_.size());
 index = 0;
 for (auto obj : named_forkFactory::objects_) {
    Namedforks[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedforks[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedforks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedforks[index].setVpiLineNo(obj->get_vpiLineNo());
    Namedforks[index].setVpiJoinType(obj->get_vpiJoinType());
 
    if (obj->get_stmts()) {  
      ::capnp::List<::ObjIndexType>::Builder Stmtss = Namedforks[index].initStmts(obj->get_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_stmts()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Stmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_stmts())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_stmts())[ind]))->getUhdmType());
      }
    }
    Namedforks[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Namedforks[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Namedforks[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Namedforks[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Namedforks[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Namedforkss = Namedforks[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Namedforkss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Namedforks[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Namedforks[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Namedforks[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Namedforks[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Namedforks[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Namedforks[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Namedforks[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Namedforks[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Namedforks[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Namedforks[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Namedforks[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Forkstmt>::Builder Forkstmts = cap_root.initFactoryForkstmt(fork_stmtFactory::objects_.size());
 index = 0;
 for (auto obj : fork_stmtFactory::objects_) {
    Forkstmts[index].setVpiParent(getId(obj->get_vpiParent()));
    Forkstmts[index].setUhdmParentType(obj->get_uhdmParentType());
    Forkstmts[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Forkstmts[index].setVpiLineNo(obj->get_vpiLineNo());
    Forkstmts[index].setVpiJoinType(obj->get_vpiJoinType());
 
    if (obj->get_stmts()) {  
      ::capnp::List<::ObjIndexType>::Builder Stmtss = Forkstmts[index].initStmts(obj->get_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_stmts()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Stmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_stmts())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_stmts())[ind]))->getUhdmType());
      }
    }
    Forkstmts[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Forkstmts[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Forkstmts[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Forkstmts[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Forkstmts[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Forkstmtss = Forkstmts[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Forkstmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Forkstmts[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Forkstmts[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Forkstmts[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Forkstmts[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Forkstmts[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Forkstmts[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Forkstmts[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Forkstmts[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Forkstmts[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Forkstmts[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Forkstmts[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Forstmt>::Builder Forstmts = cap_root.initFactoryForstmt(for_stmtFactory::objects_.size());
 index = 0;
 for (auto obj : for_stmtFactory::objects_) {
    Forstmts[index].setVpiParent(getId(obj->get_vpiParent()));
    Forstmts[index].setUhdmParentType(obj->get_uhdmParentType());
    Forstmts[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Forstmts[index].setVpiLineNo(obj->get_vpiLineNo());
    Forstmts[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Forstmts[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Forstmts[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Forstmts[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Forstmts[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Forstmtss = Forstmts[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Forstmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Forstmts[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Forstmts[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Forstmts[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Forstmts[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Forstmts[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Forstmts[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Forstmts[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Forstmts[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Forstmts[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Forstmts[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Forstmts[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Foreachstmt>::Builder Foreachstmts = cap_root.initFactoryForeachstmt(foreach_stmtFactory::objects_.size());
 index = 0;
 for (auto obj : foreach_stmtFactory::objects_) {
    Foreachstmts[index].setVpiParent(getId(obj->get_vpiParent()));
    Foreachstmts[index].setUhdmParentType(obj->get_uhdmParentType());
    Foreachstmts[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Foreachstmts[index].setVpiLineNo(obj->get_vpiLineNo());
    Foreachstmts[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Foreachstmts[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Foreachstmts[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Foreachstmts[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Foreachstmts[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Foreachstmtss = Foreachstmts[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Foreachstmtss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Foreachstmts[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Foreachstmts[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Foreachstmts[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Foreachstmts[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Foreachstmts[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Foreachstmts[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Foreachstmts[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Foreachstmts[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Foreachstmts[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Foreachstmts[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Foreachstmts[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Genscope>::Builder Genscopes = cap_root.initFactoryGenscope(gen_scopeFactory::objects_.size());
 index = 0;
 for (auto obj : gen_scopeFactory::objects_) {
    Genscopes[index].setVpiParent(getId(obj->get_vpiParent()));
    Genscopes[index].setUhdmParentType(obj->get_uhdmParentType());
    Genscopes[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Genscopes[index].setVpiLineNo(obj->get_vpiLineNo());
    Genscopes[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Genscopes[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Genscopes[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Genscopes[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Genscopes[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Genscopess = Genscopes[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Genscopess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Genscopes[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Genscopes[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Genscopes[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Genscopes[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Genscopes[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Genscopes[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Genscopes[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Genscopes[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Genscopes[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Genscopes[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Genscopes[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Distribution>::Builder Distributions = cap_root.initFactoryDistribution(distributionFactory::objects_.size());
 index = 0;
 for (auto obj : distributionFactory::objects_) {
    Distributions[index].setVpiParent(getId(obj->get_vpiParent()));
    Distributions[index].setUhdmParentType(obj->get_uhdmParentType());
    Distributions[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Distributions[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Operation>::Builder Operations = cap_root.initFactoryOperation(operationFactory::objects_.size());
 index = 0;
 for (auto obj : operationFactory::objects_) {
    Operations[index].setVpiParent(getId(obj->get_vpiParent()));
    Operations[index].setUhdmParentType(obj->get_uhdmParentType());
    Operations[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Operations[index].setVpiLineNo(obj->get_vpiLineNo());
    Operations[index].setVpiOpType(obj->get_vpiOpType());
 
    if (obj->get_operands()) {  
      ::capnp::List<::ObjIndexType>::Builder Operandss = Operations[index].initOperands(obj->get_operands()->size());
      for (unsigned int ind = 0; ind < obj->get_operands()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Operandss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_operands())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_operands())[ind]))->getUhdmType());
      }
    }
    Operations[index].setVpiDecompile(SymbolFactory::make(obj->get_vpiDecompile()));
    Operations[index].setVpiSize(obj->get_vpiSize());


   index++;
 }
 ::capnp::List<Partselect>::Builder Partselects = cap_root.initFactoryPartselect(part_selectFactory::objects_.size());
 index = 0;
 for (auto obj : part_selectFactory::objects_) {
    Partselects[index].setVpiParent(getId(obj->get_vpiParent()));
    Partselects[index].setUhdmParentType(obj->get_uhdmParentType());
    Partselects[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Partselects[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Refobj>::Builder Refobjs = cap_root.initFactoryRefobj(ref_objFactory::objects_.size());
 index = 0;
 for (auto obj : ref_objFactory::objects_) {
    Refobjs[index].setVpiParent(getId(obj->get_vpiParent()));
    Refobjs[index].setUhdmParentType(obj->get_uhdmParentType());
    Refobjs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Refobjs[index].setVpiLineNo(obj->get_vpiLineNo());
    Refobjs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Refobjs[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Refobjs[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Refobjs[index].setVpiGeneric(obj->get_vpiGeneric());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Refobjs[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Refobjs[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Refobjs[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_task_func()) {
    ::ObjIndexType::Builder tmp2 = Refobjs[index].getTaskfunc();
    tmp2.setIndex(getId(((BaseClass*) obj->get_task_func())));
    tmp2.setType(((BaseClass*)obj->get_task_func())->getUhdmType());
  }  if (obj->get_actual_group()) {
    ::ObjIndexType::Builder tmp3 = Refobjs[index].getActualgroup();
    tmp3.setIndex(getId(((BaseClass*) obj->get_actual_group())));
    tmp3.setType(((BaseClass*)obj->get_actual_group())->getUhdmType());
  }
   index++;
 }
 ::capnp::List<Varselect>::Builder Varselects = cap_root.initFactoryVarselect(var_selectFactory::objects_.size());
 index = 0;
 for (auto obj : var_selectFactory::objects_) {
    Varselects[index].setVpiParent(getId(obj->get_vpiParent()));
    Varselects[index].setUhdmParentType(obj->get_uhdmParentType());
    Varselects[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Varselects[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Shortrealvar>::Builder Shortrealvars = cap_root.initFactoryShortrealvar(short_real_varFactory::objects_.size());
 index = 0;
 for (auto obj : short_real_varFactory::objects_) {
    Shortrealvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Shortrealvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Shortrealvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Shortrealvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Shortrealvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Shortrealvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Shortrealvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Shortrealvars[index].setVpiSigned(obj->get_vpiSigned());
    Shortrealvars[index].setVpiSize(obj->get_vpiSize());
    Shortrealvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Shortrealvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Shortrealvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Shortrealvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Shortrealvars[index].setVpiRandType(obj->get_vpiRandType());
    Shortrealvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Shortrealvars[index].setVpiScalar(obj->get_vpiScalar());
    Shortrealvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Shortrealvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Shortrealvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Shortrealvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Shortrealvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Shortrealvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Shortrealvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Shortrealvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Shortrealvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Shortrealvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Shortrealvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Shortrealvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Shortrealvars[index].setPathterm(getId(obj->get_path_term()));
    Shortrealvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Shortrealvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Realvar>::Builder Realvars = cap_root.initFactoryRealvar(real_varFactory::objects_.size());
 index = 0;
 for (auto obj : real_varFactory::objects_) {
    Realvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Realvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Realvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Realvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Realvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Realvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Realvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Realvars[index].setVpiSigned(obj->get_vpiSigned());
    Realvars[index].setVpiSize(obj->get_vpiSize());
    Realvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Realvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Realvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Realvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Realvars[index].setVpiRandType(obj->get_vpiRandType());
    Realvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Realvars[index].setVpiScalar(obj->get_vpiScalar());
    Realvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Realvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Realvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Realvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Realvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Realvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Realvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Realvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Realvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Realvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Realvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Realvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Realvars[index].setPathterm(getId(obj->get_path_term()));
    Realvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Realvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Bytevar>::Builder Bytevars = cap_root.initFactoryBytevar(byte_varFactory::objects_.size());
 index = 0;
 for (auto obj : byte_varFactory::objects_) {
    Bytevars[index].setVpiParent(getId(obj->get_vpiParent()));
    Bytevars[index].setUhdmParentType(obj->get_uhdmParentType());
    Bytevars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Bytevars[index].setVpiLineNo(obj->get_vpiLineNo());
    Bytevars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Bytevars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Bytevars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Bytevars[index].setVpiSigned(obj->get_vpiSigned());
    Bytevars[index].setVpiSize(obj->get_vpiSize());
    Bytevars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Bytevars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Bytevars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Bytevars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Bytevars[index].setVpiRandType(obj->get_vpiRandType());
    Bytevars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Bytevars[index].setVpiScalar(obj->get_vpiScalar());
    Bytevars[index].setVpiVisibility(obj->get_vpiVisibility());
    Bytevars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Bytevars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Bytevars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Bytevars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Bytevars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Bytevars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Bytevars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Bytevars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Bytevars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Bytevars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Bytevars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Bytevars[index].setPathterm(getId(obj->get_path_term()));
    Bytevars[index].setTchkterm(getId(obj->get_tchk_term()));
    Bytevars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Shortintvar>::Builder Shortintvars = cap_root.initFactoryShortintvar(short_int_varFactory::objects_.size());
 index = 0;
 for (auto obj : short_int_varFactory::objects_) {
    Shortintvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Shortintvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Shortintvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Shortintvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Shortintvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Shortintvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Shortintvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Shortintvars[index].setVpiSigned(obj->get_vpiSigned());
    Shortintvars[index].setVpiSize(obj->get_vpiSize());
    Shortintvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Shortintvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Shortintvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Shortintvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Shortintvars[index].setVpiRandType(obj->get_vpiRandType());
    Shortintvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Shortintvars[index].setVpiScalar(obj->get_vpiScalar());
    Shortintvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Shortintvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Shortintvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Shortintvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Shortintvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Shortintvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Shortintvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Shortintvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Shortintvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Shortintvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Shortintvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Shortintvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Shortintvars[index].setPathterm(getId(obj->get_path_term()));
    Shortintvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Shortintvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Intvar>::Builder Intvars = cap_root.initFactoryIntvar(int_varFactory::objects_.size());
 index = 0;
 for (auto obj : int_varFactory::objects_) {
    Intvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Intvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Intvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Intvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Intvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Intvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Intvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Intvars[index].setVpiSigned(obj->get_vpiSigned());
    Intvars[index].setVpiSize(obj->get_vpiSize());
    Intvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Intvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Intvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Intvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Intvars[index].setVpiRandType(obj->get_vpiRandType());
    Intvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Intvars[index].setVpiScalar(obj->get_vpiScalar());
    Intvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Intvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Intvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Intvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Intvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Intvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Intvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Intvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Intvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Intvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Intvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Intvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Intvars[index].setPathterm(getId(obj->get_path_term()));
    Intvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Intvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Longintvar>::Builder Longintvars = cap_root.initFactoryLongintvar(long_int_varFactory::objects_.size());
 index = 0;
 for (auto obj : long_int_varFactory::objects_) {
    Longintvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Longintvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Longintvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Longintvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Longintvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Longintvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Longintvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Longintvars[index].setVpiSigned(obj->get_vpiSigned());
    Longintvars[index].setVpiSize(obj->get_vpiSize());
    Longintvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Longintvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Longintvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Longintvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Longintvars[index].setVpiRandType(obj->get_vpiRandType());
    Longintvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Longintvars[index].setVpiScalar(obj->get_vpiScalar());
    Longintvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Longintvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Longintvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Longintvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Longintvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Longintvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Longintvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Longintvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Longintvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Longintvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Longintvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Longintvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Longintvars[index].setPathterm(getId(obj->get_path_term()));
    Longintvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Longintvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Integervar>::Builder Integervars = cap_root.initFactoryIntegervar(integer_varFactory::objects_.size());
 index = 0;
 for (auto obj : integer_varFactory::objects_) {
    Integervars[index].setVpiParent(getId(obj->get_vpiParent()));
    Integervars[index].setUhdmParentType(obj->get_uhdmParentType());
    Integervars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Integervars[index].setVpiLineNo(obj->get_vpiLineNo());
    Integervars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Integervars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Integervars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Integervars[index].setVpiSigned(obj->get_vpiSigned());
    Integervars[index].setVpiSize(obj->get_vpiSize());
    Integervars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Integervars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Integervars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Integervars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Integervars[index].setVpiRandType(obj->get_vpiRandType());
    Integervars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Integervars[index].setVpiScalar(obj->get_vpiScalar());
    Integervars[index].setVpiVisibility(obj->get_vpiVisibility());
    Integervars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Integervars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Integervars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Integervars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Integervars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Integervars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Integervars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Integervars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Integervars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Integervars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Integervars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Integervars[index].setPathterm(getId(obj->get_path_term()));
    Integervars[index].setTchkterm(getId(obj->get_tchk_term()));
    Integervars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Timevar>::Builder Timevars = cap_root.initFactoryTimevar(time_varFactory::objects_.size());
 index = 0;
 for (auto obj : time_varFactory::objects_) {
    Timevars[index].setVpiParent(getId(obj->get_vpiParent()));
    Timevars[index].setUhdmParentType(obj->get_uhdmParentType());
    Timevars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Timevars[index].setVpiLineNo(obj->get_vpiLineNo());
    Timevars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Timevars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Timevars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Timevars[index].setVpiSigned(obj->get_vpiSigned());
    Timevars[index].setVpiSize(obj->get_vpiSize());
    Timevars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Timevars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Timevars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Timevars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Timevars[index].setVpiRandType(obj->get_vpiRandType());
    Timevars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Timevars[index].setVpiScalar(obj->get_vpiScalar());
    Timevars[index].setVpiVisibility(obj->get_vpiVisibility());
    Timevars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Timevars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Timevars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Timevars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Timevars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Timevars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Timevars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Timevars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Timevars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Timevars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Timevars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Timevars[index].setPathterm(getId(obj->get_path_term()));
    Timevars[index].setTchkterm(getId(obj->get_tchk_term()));
    Timevars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Arrayvar>::Builder Arrayvars = cap_root.initFactoryArrayvar(array_varFactory::objects_.size());
 index = 0;
 for (auto obj : array_varFactory::objects_) {
    Arrayvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Arrayvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Arrayvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Arrayvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Arrayvars[index].setVpiArrayType(obj->get_vpiArrayType());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Arrayvars[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Arrayvars[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Arrayvars[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
    Arrayvars[index].setVarselects(getId(obj->get_var_selects()));
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Arrayvars[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
    Arrayvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Arrayvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Arrayvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Arrayvars[index].setVpiSigned(obj->get_vpiSigned());
    Arrayvars[index].setVpiSize(obj->get_vpiSize());
    Arrayvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Arrayvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Arrayvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Arrayvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Arrayvars[index].setVpiRandType(obj->get_vpiRandType());
    Arrayvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Arrayvars[index].setVpiScalar(obj->get_vpiScalar());
    Arrayvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Arrayvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Arrayvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Arrayvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Arrayvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Arrayvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Arrayvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Arrayvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Arrayvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Arrayvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Arrayvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Arrayvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Arrayvars[index].setPathterm(getId(obj->get_path_term()));
    Arrayvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Arrayvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Packedarrayvar>::Builder Packedarrayvars = cap_root.initFactoryPackedarrayvar(packed_array_varFactory::objects_.size());
 index = 0;
 for (auto obj : packed_array_varFactory::objects_) {
    Packedarrayvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Packedarrayvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Packedarrayvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Packedarrayvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Packedarrayvars[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
    Packedarrayvars[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Packedarrayvars[index].setVpiPacked(obj->get_vpiPacked());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Packedarrayvars[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Packedarrayvars[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  }  if (obj->get_expr_index()) {
    ::ObjIndexType::Builder tmp2 = Packedarrayvars[index].getExprindex();
    tmp2.setIndex(getId(((BaseClass*) obj->get_expr_index())));
    tmp2.setType(((BaseClass*)obj->get_expr_index())->getUhdmType());
  } 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Packedarrayvars[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_var_bits()) {  
      ::capnp::List<::uint64_t>::Builder Varbitss = Packedarrayvars[index].initVarbits(obj->get_var_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_var_bits()->size(); ind++) {
        Varbitss.set(ind, getId((*obj->get_var_bits())[ind]));
      }
    }
 
    if (obj->get_elements()) {  
      ::capnp::List<::ObjIndexType>::Builder Elementss = Packedarrayvars[index].initElements(obj->get_elements()->size());
      for (unsigned int ind = 0; ind < obj->get_elements()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Elementss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_elements())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_elements())[ind]))->getUhdmType());
      }
    }
    Packedarrayvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Packedarrayvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packedarrayvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Packedarrayvars[index].setVpiSigned(obj->get_vpiSigned());
    Packedarrayvars[index].setVpiSize(obj->get_vpiSize());
    Packedarrayvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Packedarrayvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Packedarrayvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Packedarrayvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Packedarrayvars[index].setVpiRandType(obj->get_vpiRandType());
    Packedarrayvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Packedarrayvars[index].setVpiScalar(obj->get_vpiScalar());
    Packedarrayvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Packedarrayvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Packedarrayvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Packedarrayvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Packedarrayvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Packedarrayvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Packedarrayvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Packedarrayvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Packedarrayvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Packedarrayvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Packedarrayvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Packedarrayvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Packedarrayvars[index].setPathterm(getId(obj->get_path_term()));
    Packedarrayvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Packedarrayvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Bitvar>::Builder Bitvars = cap_root.initFactoryBitvar(bit_varFactory::objects_.size());
 index = 0;
 for (auto obj : bit_varFactory::objects_) {
    Bitvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Bitvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Bitvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Bitvars[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Bitvars[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Bitvars[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Bitvars[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_var_bits()) {  
      ::capnp::List<::uint64_t>::Builder Varbitss = Bitvars[index].initVarbits(obj->get_var_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_var_bits()->size(); ind++) {
        Varbitss.set(ind, getId((*obj->get_var_bits())[ind]));
      }
    }
    Bitvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Bitvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Bitvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Bitvars[index].setVpiSigned(obj->get_vpiSigned());
    Bitvars[index].setVpiSize(obj->get_vpiSize());
    Bitvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Bitvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Bitvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Bitvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Bitvars[index].setVpiRandType(obj->get_vpiRandType());
    Bitvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Bitvars[index].setVpiScalar(obj->get_vpiScalar());
    Bitvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Bitvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Bitvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Bitvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Bitvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Bitvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Bitvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Bitvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Bitvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Bitvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Bitvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Bitvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Bitvars[index].setPathterm(getId(obj->get_path_term()));
    Bitvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Bitvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Logicvar>::Builder Logicvars = cap_root.initFactoryLogicvar(logic_varFactory::objects_.size());
 index = 0;
 for (auto obj : logic_varFactory::objects_) {
    Logicvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Logicvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Logicvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Logicvars[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Logicvars[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Logicvars[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Logicvars[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_var_bits()) {  
      ::capnp::List<::uint64_t>::Builder Varbitss = Logicvars[index].initVarbits(obj->get_var_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_var_bits()->size(); ind++) {
        Varbitss.set(ind, getId((*obj->get_var_bits())[ind]));
      }
    }
    Logicvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Logicvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Logicvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Logicvars[index].setVpiSigned(obj->get_vpiSigned());
    Logicvars[index].setVpiSize(obj->get_vpiSize());
    Logicvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Logicvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Logicvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Logicvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Logicvars[index].setVpiRandType(obj->get_vpiRandType());
    Logicvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Logicvars[index].setVpiScalar(obj->get_vpiScalar());
    Logicvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Logicvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Logicvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Logicvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Logicvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Logicvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Logicvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Logicvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Logicvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Logicvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Logicvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Logicvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Logicvars[index].setPathterm(getId(obj->get_path_term()));
    Logicvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Logicvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Structvar>::Builder Structvars = cap_root.initFactoryStructvar(struct_varFactory::objects_.size());
 index = 0;
 for (auto obj : struct_varFactory::objects_) {
    Structvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Structvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Structvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Structvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Structvars[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
    Structvars[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Structvars[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
  if (obj->get_expr_index()) {
    ::ObjIndexType::Builder tmp0 = Structvars[index].getExprindex();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_index())));
    tmp0.setType(((BaseClass*)obj->get_expr_index())->getUhdmType());
  } 
    if (obj->get_var_bits()) {  
      ::capnp::List<::uint64_t>::Builder Varbitss = Structvars[index].initVarbits(obj->get_var_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_var_bits()->size(); ind++) {
        Varbitss.set(ind, getId((*obj->get_var_bits())[ind]));
      }
    }
    Structvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Structvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Structvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Structvars[index].setVpiSigned(obj->get_vpiSigned());
    Structvars[index].setVpiSize(obj->get_vpiSize());
    Structvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Structvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Structvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Structvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Structvars[index].setVpiRandType(obj->get_vpiRandType());
    Structvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Structvars[index].setVpiScalar(obj->get_vpiScalar());
    Structvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Structvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Structvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Structvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Structvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Structvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Structvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Structvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Structvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Structvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Structvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Structvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Structvars[index].setPathterm(getId(obj->get_path_term()));
    Structvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Structvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Unionvar>::Builder Unionvars = cap_root.initFactoryUnionvar(union_varFactory::objects_.size());
 index = 0;
 for (auto obj : union_varFactory::objects_) {
    Unionvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Unionvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Unionvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Unionvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Unionvars[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
    Unionvars[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Unionvars[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
  if (obj->get_expr_index()) {
    ::ObjIndexType::Builder tmp0 = Unionvars[index].getExprindex();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_index())));
    tmp0.setType(((BaseClass*)obj->get_expr_index())->getUhdmType());
  } 
    if (obj->get_var_bits()) {  
      ::capnp::List<::uint64_t>::Builder Varbitss = Unionvars[index].initVarbits(obj->get_var_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_var_bits()->size(); ind++) {
        Varbitss.set(ind, getId((*obj->get_var_bits())[ind]));
      }
    }
    Unionvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Unionvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Unionvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Unionvars[index].setVpiSigned(obj->get_vpiSigned());
    Unionvars[index].setVpiSize(obj->get_vpiSize());
    Unionvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Unionvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Unionvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Unionvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Unionvars[index].setVpiRandType(obj->get_vpiRandType());
    Unionvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Unionvars[index].setVpiScalar(obj->get_vpiScalar());
    Unionvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Unionvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Unionvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Unionvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Unionvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Unionvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Unionvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Unionvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Unionvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Unionvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Unionvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Unionvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Unionvars[index].setPathterm(getId(obj->get_path_term()));
    Unionvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Unionvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Enumvar>::Builder Enumvars = cap_root.initFactoryEnumvar(enum_varFactory::objects_.size());
 index = 0;
 for (auto obj : enum_varFactory::objects_) {
    Enumvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Enumvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Enumvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Enumvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Enumvars[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
    Enumvars[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
  if (obj->get_expr_index()) {
    ::ObjIndexType::Builder tmp0 = Enumvars[index].getExprindex();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_index())));
    tmp0.setType(((BaseClass*)obj->get_expr_index())->getUhdmType());
  }    Enumvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Enumvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Enumvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Enumvars[index].setVpiSigned(obj->get_vpiSigned());
    Enumvars[index].setVpiSize(obj->get_vpiSize());
    Enumvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Enumvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Enumvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Enumvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Enumvars[index].setVpiRandType(obj->get_vpiRandType());
    Enumvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Enumvars[index].setVpiScalar(obj->get_vpiScalar());
    Enumvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Enumvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Enumvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Enumvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Enumvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Enumvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Enumvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Enumvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Enumvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Enumvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Enumvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Enumvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Enumvars[index].setPathterm(getId(obj->get_path_term()));
    Enumvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Enumvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Stringvar>::Builder Stringvars = cap_root.initFactoryStringvar(string_varFactory::objects_.size());
 index = 0;
 for (auto obj : string_varFactory::objects_) {
    Stringvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Stringvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Stringvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Stringvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Stringvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Stringvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Stringvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Stringvars[index].setVpiSigned(obj->get_vpiSigned());
    Stringvars[index].setVpiSize(obj->get_vpiSize());
    Stringvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Stringvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Stringvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Stringvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Stringvars[index].setVpiRandType(obj->get_vpiRandType());
    Stringvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Stringvars[index].setVpiScalar(obj->get_vpiScalar());
    Stringvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Stringvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Stringvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Stringvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Stringvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Stringvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Stringvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Stringvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Stringvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Stringvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Stringvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Stringvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Stringvars[index].setPathterm(getId(obj->get_path_term()));
    Stringvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Stringvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Chandlevar>::Builder Chandlevars = cap_root.initFactoryChandlevar(chandle_varFactory::objects_.size());
 index = 0;
 for (auto obj : chandle_varFactory::objects_) {
    Chandlevars[index].setVpiParent(getId(obj->get_vpiParent()));
    Chandlevars[index].setUhdmParentType(obj->get_uhdmParentType());
    Chandlevars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Chandlevars[index].setVpiLineNo(obj->get_vpiLineNo());
    Chandlevars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Chandlevars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Chandlevars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Chandlevars[index].setVpiSigned(obj->get_vpiSigned());
    Chandlevars[index].setVpiSize(obj->get_vpiSize());
    Chandlevars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Chandlevars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Chandlevars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Chandlevars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Chandlevars[index].setVpiRandType(obj->get_vpiRandType());
    Chandlevars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Chandlevars[index].setVpiScalar(obj->get_vpiScalar());
    Chandlevars[index].setVpiVisibility(obj->get_vpiVisibility());
    Chandlevars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Chandlevars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Chandlevars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Chandlevars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Chandlevars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Chandlevars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Chandlevars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Chandlevars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Chandlevars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Chandlevars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Chandlevars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Chandlevars[index].setPathterm(getId(obj->get_path_term()));
    Chandlevars[index].setTchkterm(getId(obj->get_tchk_term()));
    Chandlevars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Classvar>::Builder Classvars = cap_root.initFactoryClassvar(class_varFactory::objects_.size());
 index = 0;
 for (auto obj : class_varFactory::objects_) {
    Classvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Classvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Classvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Classvars[index].setVpiLineNo(obj->get_vpiLineNo());
    Classvars[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Classvars[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Classvars[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Classvars[index].setVpiSigned(obj->get_vpiSigned());
    Classvars[index].setVpiSize(obj->get_vpiSize());
    Classvars[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Classvars[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Classvars[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Classvars[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Classvars[index].setVpiRandType(obj->get_vpiRandType());
    Classvars[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Classvars[index].setVpiScalar(obj->get_vpiScalar());
    Classvars[index].setVpiVisibility(obj->get_vpiVisibility());
    Classvars[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Classvars[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Classvars[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Classvars[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Classvars[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Classvars[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Classvars[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Classvars[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Classvars[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Classvars[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Classvars[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Classvars[index].setPathterm(getId(obj->get_path_term()));
    Classvars[index].setTchkterm(getId(obj->get_tchk_term()));
    Classvars[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Varbit>::Builder Varbits = cap_root.initFactoryVarbit(var_bitFactory::objects_.size());
 index = 0;
 for (auto obj : var_bitFactory::objects_) {
    Varbits[index].setVpiParent(getId(obj->get_vpiParent()));
    Varbits[index].setUhdmParentType(obj->get_uhdmParentType());
    Varbits[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Varbits[index].setVpiLineNo(obj->get_vpiLineNo());
    Varbits[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
  if (obj->get_expr_index()) {
    ::ObjIndexType::Builder tmp0 = Varbits[index].getExprindex();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_index())));
    tmp0.setType(((BaseClass*)obj->get_expr_index())->getUhdmType());
  } 
    if (obj->get_expr_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Exprindexess = Varbits[index].initExprindexes(obj->get_expr_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_expr_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Exprindexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_expr_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_expr_indexes())[ind]))->getUhdmType());
      }
    }
    Varbits[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Varbits[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Varbits[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Varbits[index].setVpiSigned(obj->get_vpiSigned());
    Varbits[index].setVpiSize(obj->get_vpiSize());
    Varbits[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Varbits[index].setVpiAllocScheme(obj->get_vpiAllocScheme());
    Varbits[index].setVpiConstantVariable(obj->get_vpiConstantVariable());
    Varbits[index].setVpiIsRandomized(obj->get_vpiIsRandomized());
    Varbits[index].setVpiRandType(obj->get_vpiRandType());
    Varbits[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
    Varbits[index].setVpiScalar(obj->get_vpiScalar());
    Varbits[index].setVpiVisibility(obj->get_vpiVisibility());
    Varbits[index].setVpiVector(obj->get_vpiVector());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Varbits[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabledriverss = Varbits[index].initVariabledrivers(obj->get_variable_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabledriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variable_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Variableloadss = Varbits[index].initVariableloads(obj->get_variable_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_variable_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variableloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variable_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variable_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp0 = Varbits[index].getTypespec();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp0.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Varbits[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_scope()) {
    ::ObjIndexType::Builder tmp2 = Varbits[index].getScope();
    tmp2.setIndex(getId(((BaseClass*) obj->get_scope())));
    tmp2.setType(((BaseClass*)obj->get_scope())->getUhdmType());
  }  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp3 = Varbits[index].getExpr();
    tmp3.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp3.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  } 
    if (obj->get_indexes()) {  
      ::capnp::List<::ObjIndexType>::Builder Indexess = Varbits[index].initIndexes(obj->get_indexes()->size());
      for (unsigned int ind = 0; ind < obj->get_indexes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Indexess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_indexes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_indexes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Varbits[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Varbits[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
    Varbits[index].setPathterm(getId(obj->get_path_term()));
    Varbits[index].setTchkterm(getId(obj->get_tchk_term()));
    Varbits[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Task>::Builder Tasks = cap_root.initFactoryTask(taskFactory::objects_.size());
 index = 0;
 for (auto obj : taskFactory::objects_) {
    Tasks[index].setVpiParent(getId(obj->get_vpiParent()));
    Tasks[index].setUhdmParentType(obj->get_uhdmParentType());
    Tasks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Tasks[index].setVpiLineNo(obj->get_vpiLineNo());
    Tasks[index].setVpiMethod(obj->get_vpiMethod());
    Tasks[index].setVpiAccessType(obj->get_vpiAccessType());
    Tasks[index].setVpiVisibility(obj->get_vpiVisibility());
    Tasks[index].setVpiVirtual(obj->get_vpiVirtual());
    Tasks[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Tasks[index].setVpiDPIContext(obj->get_vpiDPIContext());
    Tasks[index].setVpiDPICStr(obj->get_vpiDPICStr());
    Tasks[index].setVpiDPICIdentifier(SymbolFactory::make(obj->get_vpiDPICIdentifier()));
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Tasks[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Tasks[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  }  if (obj->get_stmt()) {
    ::ObjIndexType::Builder tmp2 = Tasks[index].getStmt();
    tmp2.setIndex(getId(((BaseClass*) obj->get_stmt())));
    tmp2.setType(((BaseClass*)obj->get_stmt())->getUhdmType());
  }    Tasks[index].setClassdefn(getId(obj->get_class_defn()));
    Tasks[index].setRefobj(getId(obj->get_ref_obj()));
    Tasks[index].setIodecl(getId(obj->get_io_decl()));
    Tasks[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Tasks[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Tasks[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Tasks[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Tasks[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskss = Tasks[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Tasks[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Tasks[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Tasks[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Tasks[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Tasks[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Tasks[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Tasks[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Tasks[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Tasks[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Tasks[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Tasks[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Tasks[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Tasks[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Tasks[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Tasks[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Tasks[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskss = Tasks[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Tasks[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Tasks[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Tasks[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Tasks[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Tasks[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Tasks[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Tasks[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Tasks[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Tasks[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Tasks[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Tasks[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Function>::Builder Functions = cap_root.initFactoryFunction(functionFactory::objects_.size());
 index = 0;
 for (auto obj : functionFactory::objects_) {
    Functions[index].setVpiParent(getId(obj->get_vpiParent()));
    Functions[index].setUhdmParentType(obj->get_uhdmParentType());
    Functions[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Functions[index].setVpiLineNo(obj->get_vpiLineNo());
    Functions[index].setVpiSigned(obj->get_vpiSigned());
    Functions[index].setVpiSize(obj->get_vpiSize());
    Functions[index].setVpiFuncType(obj->get_vpiFuncType());
    Functions[index].setVpiMethod(obj->get_vpiMethod());
    Functions[index].setVpiAccessType(obj->get_vpiAccessType());
    Functions[index].setVpiVisibility(obj->get_vpiVisibility());
    Functions[index].setVpiVirtual(obj->get_vpiVirtual());
    Functions[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Functions[index].setVpiDPIContext(obj->get_vpiDPIContext());
    Functions[index].setVpiDPICStr(obj->get_vpiDPICStr());
    Functions[index].setVpiDPICIdentifier(SymbolFactory::make(obj->get_vpiDPICIdentifier()));
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Functions[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Functions[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  }  if (obj->get_stmt()) {
    ::ObjIndexType::Builder tmp2 = Functions[index].getStmt();
    tmp2.setIndex(getId(((BaseClass*) obj->get_stmt())));
    tmp2.setType(((BaseClass*)obj->get_stmt())->getUhdmType());
  }    Functions[index].setClassdefn(getId(obj->get_class_defn()));
    Functions[index].setRefobj(getId(obj->get_ref_obj()));
    Functions[index].setIodecl(getId(obj->get_io_decl()));
    Functions[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Functions[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Functions[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Functions[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Functions[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Functionss = Functions[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Functionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Functions[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Functions[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Functions[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Functions[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Functions[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Functions[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Functions[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Functions[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Functions[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Functions[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Functions[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Functions[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Functions[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Functions[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Functions[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Functions[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Functionss = Functions[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Functionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Functions[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Functions[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Functions[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Functions[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Functions[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Functions[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Functions[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Functions[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Functions[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Functions[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Functions[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Modport>::Builder Modports = cap_root.initFactoryModport(modportFactory::objects_.size());
 index = 0;
 for (auto obj : modportFactory::objects_) {
    Modports[index].setVpiParent(getId(obj->get_vpiParent()));
    Modports[index].setUhdmParentType(obj->get_uhdmParentType());
    Modports[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modports[index].setVpiLineNo(obj->get_vpiLineNo());
    Modports[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
 
    if (obj->get_io_decls()) {  
      ::capnp::List<::uint64_t>::Builder Iodeclss = Modports[index].initIodecls(obj->get_io_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_io_decls()->size(); ind++) {
        Iodeclss.set(ind, getId((*obj->get_io_decls())[ind]));
      }
    }
    Modports[index].setInterface(getId(obj->get_interface()));

   index++;
 }
 ::capnp::List<Interfacetfdecl>::Builder Interfacetfdecls = cap_root.initFactoryInterfacetfdecl(interface_tf_declFactory::objects_.size());
 index = 0;
 for (auto obj : interface_tf_declFactory::objects_) {
    Interfacetfdecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfacetfdecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfacetfdecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfacetfdecls[index].setVpiLineNo(obj->get_vpiLineNo());
    Interfacetfdecls[index].setVpiAccessType(obj->get_vpiAccessType());
 
    if (obj->get_tasks()) {  
      ::capnp::List<::uint64_t>::Builder Taskss = Interfacetfdecls[index].initTasks(obj->get_tasks()->size());
      for (unsigned int ind = 0; ind < obj->get_tasks()->size(); ind++) {
        Taskss.set(ind, getId((*obj->get_tasks())[ind]));
      }
    }
 
    if (obj->get_functions()) {  
      ::capnp::List<::uint64_t>::Builder Functionss = Interfacetfdecls[index].initFunctions(obj->get_functions()->size());
      for (unsigned int ind = 0; ind < obj->get_functions()->size(); ind++) {
        Functionss.set(ind, getId((*obj->get_functions())[ind]));
      }
    }

   index++;
 }
 ::capnp::List<Contassign>::Builder Contassigns = cap_root.initFactoryContassign(cont_assignFactory::objects_.size());
 index = 0;
 for (auto obj : cont_assignFactory::objects_) {
    Contassigns[index].setVpiParent(getId(obj->get_vpiParent()));
    Contassigns[index].setUhdmParentType(obj->get_uhdmParentType());
    Contassigns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Contassigns[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Port>::Builder Ports = cap_root.initFactoryPort(portFactory::objects_.size());
 index = 0;
 for (auto obj : portFactory::objects_) {
    Ports[index].setVpiParent(getId(obj->get_vpiParent()));
    Ports[index].setUhdmParentType(obj->get_uhdmParentType());
    Ports[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Ports[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_bits()) {  
      ::capnp::List<::uint64_t>::Builder Bitss = Ports[index].initBits(obj->get_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_bits()->size(); ind++) {
        Bitss.set(ind, getId((*obj->get_bits())[ind]));
      }
    }
    Ports[index].setVpiPortIndex(obj->get_vpiPortIndex());
    Ports[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Ports[index].setVpiPortType(obj->get_vpiPortType());
    Ports[index].setVpiScalar(obj->get_vpiScalar());
    Ports[index].setVpiVector(obj->get_vpiVector());
    Ports[index].setVpiConnByName(obj->get_vpiConnByName());
    Ports[index].setVpiDirection(obj->get_vpiDirection());
    Ports[index].setVpiSize(obj->get_vpiSize());
    Ports[index].setVpiExplicitName(SymbolFactory::make(obj->get_vpiExplicitName()));
  if (obj->get_typespecs()) {
    ::ObjIndexType::Builder tmp0 = Ports[index].getTypespecs();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespecs())));
    tmp0.setType(((BaseClass*)obj->get_typespecs())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Ports[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }    Ports[index].setModule(getId(obj->get_module()));
  if (obj->get_high_conn()) {
    ::ObjIndexType::Builder tmp2 = Ports[index].getHighconn();
    tmp2.setIndex(getId(((BaseClass*) obj->get_high_conn())));
    tmp2.setType(((BaseClass*)obj->get_high_conn())->getUhdmType());
  }  if (obj->get_low_conn()) {
    ::ObjIndexType::Builder tmp3 = Ports[index].getLowconn();
    tmp3.setIndex(getId(((BaseClass*) obj->get_low_conn())));
    tmp3.setType(((BaseClass*)obj->get_low_conn())->getUhdmType());
  }

   index++;
 }
 ::capnp::List<Portbit>::Builder Portbits = cap_root.initFactoryPortbit(port_bitFactory::objects_.size());
 index = 0;
 for (auto obj : port_bitFactory::objects_) {
    Portbits[index].setVpiParent(getId(obj->get_vpiParent()));
    Portbits[index].setUhdmParentType(obj->get_uhdmParentType());
    Portbits[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Portbits[index].setVpiLineNo(obj->get_vpiLineNo());
    Portbits[index].setVpiPortIndex(obj->get_vpiPortIndex());
    Portbits[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Portbits[index].setVpiPortType(obj->get_vpiPortType());
    Portbits[index].setVpiScalar(obj->get_vpiScalar());
    Portbits[index].setVpiVector(obj->get_vpiVector());
    Portbits[index].setVpiConnByName(obj->get_vpiConnByName());
    Portbits[index].setVpiDirection(obj->get_vpiDirection());
    Portbits[index].setVpiSize(obj->get_vpiSize());
    Portbits[index].setVpiExplicitName(SymbolFactory::make(obj->get_vpiExplicitName()));
  if (obj->get_typespecs()) {
    ::ObjIndexType::Builder tmp0 = Portbits[index].getTypespecs();
    tmp0.setIndex(getId(((BaseClass*) obj->get_typespecs())));
    tmp0.setType(((BaseClass*)obj->get_typespecs())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp1 = Portbits[index].getInstance();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp1.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }    Portbits[index].setModule(getId(obj->get_module()));
  if (obj->get_high_conn()) {
    ::ObjIndexType::Builder tmp2 = Portbits[index].getHighconn();
    tmp2.setIndex(getId(((BaseClass*) obj->get_high_conn())));
    tmp2.setType(((BaseClass*)obj->get_high_conn())->getUhdmType());
  }  if (obj->get_low_conn()) {
    ::ObjIndexType::Builder tmp3 = Portbits[index].getLowconn();
    tmp3.setIndex(getId(((BaseClass*) obj->get_low_conn())));
    tmp3.setType(((BaseClass*)obj->get_low_conn())->getUhdmType());
  }

   index++;
 }
 ::capnp::List<Primitive>::Builder Primitives = cap_root.initFactoryPrimitive(primitiveFactory::objects_.size());
 index = 0;
 for (auto obj : primitiveFactory::objects_) {
    Primitives[index].setVpiParent(getId(obj->get_vpiParent()));
    Primitives[index].setUhdmParentType(obj->get_uhdmParentType());
    Primitives[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Primitives[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Modpath>::Builder Modpaths = cap_root.initFactoryModpath(mod_pathFactory::objects_.size());
 index = 0;
 for (auto obj : mod_pathFactory::objects_) {
    Modpaths[index].setVpiParent(getId(obj->get_vpiParent()));
    Modpaths[index].setUhdmParentType(obj->get_uhdmParentType());
    Modpaths[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modpaths[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Tchk>::Builder Tchks = cap_root.initFactoryTchk(tchkFactory::objects_.size());
 index = 0;
 for (auto obj : tchkFactory::objects_) {
    Tchks[index].setVpiParent(getId(obj->get_vpiParent()));
    Tchks[index].setUhdmParentType(obj->get_uhdmParentType());
    Tchks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Tchks[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Defparam>::Builder Defparams = cap_root.initFactoryDefparam(def_paramFactory::objects_.size());
 index = 0;
 for (auto obj : def_paramFactory::objects_) {
    Defparams[index].setVpiParent(getId(obj->get_vpiParent()));
    Defparams[index].setUhdmParentType(obj->get_uhdmParentType());
    Defparams[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Defparams[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Range>::Builder Ranges = cap_root.initFactoryRange(rangeFactory::objects_.size());
 index = 0;
 for (auto obj : rangeFactory::objects_) {
    Ranges[index].setVpiParent(getId(obj->get_vpiParent()));
    Ranges[index].setUhdmParentType(obj->get_uhdmParentType());
    Ranges[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Ranges[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Udpdefn>::Builder Udpdefns = cap_root.initFactoryUdpdefn(udp_defnFactory::objects_.size());
 index = 0;
 for (auto obj : udp_defnFactory::objects_) {
    Udpdefns[index].setVpiParent(getId(obj->get_vpiParent()));
    Udpdefns[index].setUhdmParentType(obj->get_uhdmParentType());
    Udpdefns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Udpdefns[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Iodecl>::Builder Iodecls = cap_root.initFactoryIodecl(io_declFactory::objects_.size());
 index = 0;
 for (auto obj : io_declFactory::objects_) {
    Iodecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Iodecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Iodecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Iodecls[index].setVpiLineNo(obj->get_vpiLineNo());
    Iodecls[index].setVpiDirection(obj->get_vpiDirection());
    Iodecls[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Iodecls[index].setVpiScalar(obj->get_vpiScalar());
    Iodecls[index].setVpiSigned(obj->get_vpiSigned());
    Iodecls[index].setVpiSize(obj->get_vpiSize());
    Iodecls[index].setVpiVector(obj->get_vpiVector());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Iodecls[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Iodecls[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  }  if (obj->get_typespecs()) {
    ::ObjIndexType::Builder tmp2 = Iodecls[index].getTypespecs();
    tmp2.setIndex(getId(((BaseClass*) obj->get_typespecs())));
    tmp2.setType(((BaseClass*)obj->get_typespecs())->getUhdmType());
  }  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp3 = Iodecls[index].getInstance();
    tmp3.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp3.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  }  if (obj->get_task_func()) {
    ::ObjIndexType::Builder tmp4 = Iodecls[index].getTaskfunc();
    tmp4.setIndex(getId(((BaseClass*) obj->get_task_func())));
    tmp4.setType(((BaseClass*)obj->get_task_func())->getUhdmType());
  } 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Iodecls[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
    Iodecls[index].setUdpdefn(getId(obj->get_udp_defn()));
    Iodecls[index].setModule(getId(obj->get_module()));
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp5 = Iodecls[index].getExpr();
    tmp5.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp5.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }
   index++;
 }
 ::capnp::List<Aliasstmt>::Builder Aliasstmts = cap_root.initFactoryAliasstmt(alias_stmtFactory::objects_.size());
 index = 0;
 for (auto obj : alias_stmtFactory::objects_) {
    Aliasstmts[index].setVpiParent(getId(obj->get_vpiParent()));
    Aliasstmts[index].setUhdmParentType(obj->get_uhdmParentType());
    Aliasstmts[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Aliasstmts[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Clockingblock>::Builder Clockingblocks = cap_root.initFactoryClockingblock(clocking_blockFactory::objects_.size());
 index = 0;
 for (auto obj : clocking_blockFactory::objects_) {
    Clockingblocks[index].setVpiParent(getId(obj->get_vpiParent()));
    Clockingblocks[index].setUhdmParentType(obj->get_uhdmParentType());
    Clockingblocks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Clockingblocks[index].setVpiLineNo(obj->get_vpiLineNo());
    Clockingblocks[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Clockingblocks[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Clockingblocks[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Clockingblocks[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Clockingblocks[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Clockingblockss = Clockingblocks[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Clockingblockss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Clockingblocks[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Clockingblocks[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Clockingblocks[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Clockingblocks[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Clockingblocks[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Clockingblocks[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Clockingblocks[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Clockingblocks[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Clockingblocks[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Clockingblocks[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Clockingblocks[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Paramassign>::Builder Paramassigns = cap_root.initFactoryParamassign(param_assignFactory::objects_.size());
 index = 0;
 for (auto obj : param_assignFactory::objects_) {
    Paramassigns[index].setVpiParent(getId(obj->get_vpiParent()));
    Paramassigns[index].setUhdmParentType(obj->get_uhdmParentType());
    Paramassigns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Paramassigns[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Interfacearray>::Builder Interfacearrays = cap_root.initFactoryInterfacearray(interface_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : interface_arrayFactory::objects_) {
    Interfacearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfacearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfacearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfacearrays[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_param_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Paramassignss = Interfacearrays[index].initParamassigns(obj->get_param_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_param_assigns()->size(); ind++) {
        Paramassignss.set(ind, getId((*obj->get_param_assigns())[ind]));
      }
    }
    Interfacearrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Interfacearrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Interfacearrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Interfacearrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Interfacearrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Interfacearrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Interfacearrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Interfacearrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Interfacearrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Programarray>::Builder Programarrays = cap_root.initFactoryProgramarray(program_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : program_arrayFactory::objects_) {
    Programarrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Programarrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Programarrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Programarrays[index].setVpiLineNo(obj->get_vpiLineNo());
    Programarrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Programarrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Programarrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Programarrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Programarrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Programarrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Programarrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Programarrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Programarrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Modulearray>::Builder Modulearrays = cap_root.initFactoryModulearray(module_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : module_arrayFactory::objects_) {
    Modulearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Modulearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Modulearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modulearrays[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_param_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Paramassignss = Modulearrays[index].initParamassigns(obj->get_param_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_param_assigns()->size(); ind++) {
        Paramassignss.set(ind, getId((*obj->get_param_assigns())[ind]));
      }
    }
    Modulearrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Modulearrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Modulearrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Modulearrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Modulearrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Modulearrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Modulearrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Modulearrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Modulearrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Gatearray>::Builder Gatearrays = cap_root.initFactoryGatearray(gate_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : gate_arrayFactory::objects_) {
    Gatearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Gatearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Gatearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Gatearrays[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_delay()) {
    ::ObjIndexType::Builder tmp0 = Gatearrays[index].getDelay();
    tmp0.setIndex(getId(((BaseClass*) obj->get_delay())));
    tmp0.setType(((BaseClass*)obj->get_delay())->getUhdmType());
  } 
    if (obj->get_primitives()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivess = Gatearrays[index].initPrimitives(obj->get_primitives()->size());
      for (unsigned int ind = 0; ind < obj->get_primitives()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_primitives())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_primitives())[ind]))->getUhdmType());
      }
    }
    Gatearrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Gatearrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Gatearrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Gatearrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Gatearrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Gatearrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Gatearrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Gatearrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Gatearrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


    Gatearrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Gatearrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Gatearrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Gatearrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Gatearrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Gatearrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Gatearrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Gatearrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Gatearrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Switcharray>::Builder Switcharrays = cap_root.initFactorySwitcharray(switch_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : switch_arrayFactory::objects_) {
    Switcharrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Switcharrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Switcharrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Switcharrays[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_delay()) {
    ::ObjIndexType::Builder tmp0 = Switcharrays[index].getDelay();
    tmp0.setIndex(getId(((BaseClass*) obj->get_delay())));
    tmp0.setType(((BaseClass*)obj->get_delay())->getUhdmType());
  } 
    if (obj->get_primitives()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivess = Switcharrays[index].initPrimitives(obj->get_primitives()->size());
      for (unsigned int ind = 0; ind < obj->get_primitives()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_primitives())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_primitives())[ind]))->getUhdmType());
      }
    }
    Switcharrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Switcharrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Switcharrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Switcharrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Switcharrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Switcharrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Switcharrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Switcharrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Switcharrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


    Switcharrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Switcharrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Switcharrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Switcharrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Switcharrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Switcharrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Switcharrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Switcharrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Switcharrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Udparray>::Builder Udparrays = cap_root.initFactoryUdparray(udp_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : udp_arrayFactory::objects_) {
    Udparrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Udparrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Udparrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Udparrays[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_delay()) {
    ::ObjIndexType::Builder tmp0 = Udparrays[index].getDelay();
    tmp0.setIndex(getId(((BaseClass*) obj->get_delay())));
    tmp0.setType(((BaseClass*)obj->get_delay())->getUhdmType());
  } 
    if (obj->get_primitives()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivess = Udparrays[index].initPrimitives(obj->get_primitives()->size());
      for (unsigned int ind = 0; ind < obj->get_primitives()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_primitives())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_primitives())[ind]))->getUhdmType());
      }
    }
    Udparrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Udparrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Udparrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Udparrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Udparrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Udparrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Udparrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Udparrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Udparrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


    Udparrays[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Udparrays[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Udparrays[index].setVpiSize(obj->get_vpiSize());
  if (obj->get_expr()) {
    ::ObjIndexType::Builder tmp0 = Udparrays[index].getExpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr())));
    tmp0.setType(((BaseClass*)obj->get_expr())->getUhdmType());
  }  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp1 = Udparrays[index].getLeftexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp1.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp2 = Udparrays[index].getRightexpr();
    tmp2.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp2.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_instances()) {  
      ::capnp::List<::ObjIndexType>::Builder Instancess = Udparrays[index].initInstances(obj->get_instances()->size());
      for (unsigned int ind = 0; ind < obj->get_instances()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instancess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instances())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instances())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Udparrays[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Udparrays[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Primterm>::Builder Primterms = cap_root.initFactoryPrimterm(prim_termFactory::objects_.size());
 index = 0;
 for (auto obj : prim_termFactory::objects_) {
    Primterms[index].setVpiParent(getId(obj->get_vpiParent()));
    Primterms[index].setUhdmParentType(obj->get_uhdmParentType());
    Primterms[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Primterms[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Pathterm>::Builder Pathterms = cap_root.initFactoryPathterm(path_termFactory::objects_.size());
 index = 0;
 for (auto obj : path_termFactory::objects_) {
    Pathterms[index].setVpiParent(getId(obj->get_vpiParent()));
    Pathterms[index].setUhdmParentType(obj->get_uhdmParentType());
    Pathterms[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Pathterms[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Tchkterm>::Builder Tchkterms = cap_root.initFactoryTchkterm(tchk_termFactory::objects_.size());
 index = 0;
 for (auto obj : tchk_termFactory::objects_) {
    Tchkterms[index].setVpiParent(getId(obj->get_vpiParent()));
    Tchkterms[index].setUhdmParentType(obj->get_uhdmParentType());
    Tchkterms[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Tchkterms[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Netbit>::Builder Netbits = cap_root.initFactoryNetbit(net_bitFactory::objects_.size());
 index = 0;
 for (auto obj : net_bitFactory::objects_) {
    Netbits[index].setVpiParent(getId(obj->get_vpiParent()));
    Netbits[index].setUhdmParentType(obj->get_uhdmParentType());
    Netbits[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Netbits[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_expr()) {  
      ::capnp::List<::ObjIndexType>::Builder Exprs = Netbits[index].initExpr(obj->get_expr()->size());
      for (unsigned int ind = 0; ind < obj->get_expr()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Exprs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_expr())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_expr())[ind]))->getUhdmType());
      }
    }
    Netbits[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Netbits[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Netbits[index].setVpiExpanded(obj->get_vpiExpanded());
    Netbits[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Netbits[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Netbits[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Netbits[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Netbits[index].setVpiNetType(obj->get_vpiNetType());
    Netbits[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Netbits[index].setVpiScalar(obj->get_vpiScalar());
    Netbits[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Netbits[index].setVpiSigned(obj->get_vpiSigned());
    Netbits[index].setVpiSize(obj->get_vpiSize());
    Netbits[index].setVpiStrength0(obj->get_vpiStrength0());
    Netbits[index].setVpiStrength1(obj->get_vpiStrength1());
    Netbits[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Netbits[index].setVpiVector(obj->get_vpiVector());
    Netbits[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Netbits[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Netbits[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Netbits[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Netbits[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Netbits[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Netbits[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Netbits[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Netbits[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Netbits[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Netbits[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Netbits[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Netbits[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Netbits[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Structnet>::Builder Structnets = cap_root.initFactoryStructnet(struct_netFactory::objects_.size());
 index = 0;
 for (auto obj : struct_netFactory::objects_) {
    Structnets[index].setVpiParent(getId(obj->get_vpiParent()));
    Structnets[index].setUhdmParentType(obj->get_uhdmParentType());
    Structnets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Structnets[index].setVpiLineNo(obj->get_vpiLineNo());
    Structnets[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
 
    if (obj->get_nets()) {  
      ::capnp::List<::ObjIndexType>::Builder Netss = Structnets[index].initNets(obj->get_nets()->size());
      for (unsigned int ind = 0; ind < obj->get_nets()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Netss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_nets())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_nets())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_expr()) {  
      ::capnp::List<::ObjIndexType>::Builder Exprs = Structnets[index].initExpr(obj->get_expr()->size());
      for (unsigned int ind = 0; ind < obj->get_expr()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Exprs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_expr())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_expr())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Structnets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Structnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Structnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Structnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Structnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Structnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Structnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Structnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Structnets[index].setVpiNetType(obj->get_vpiNetType());
    Structnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Structnets[index].setVpiScalar(obj->get_vpiScalar());
    Structnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Structnets[index].setVpiSigned(obj->get_vpiSigned());
    Structnets[index].setVpiSize(obj->get_vpiSize());
    Structnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Structnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Structnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Structnets[index].setVpiVector(obj->get_vpiVector());
    Structnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Structnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Structnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Structnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Structnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Structnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Structnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Structnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Structnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Structnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Structnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Structnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Structnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Structnets[index].setModule(getId(obj->get_module()));


    Structnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Structnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Structnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Structnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Structnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Structnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Structnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Structnets[index].setVpiNetType(obj->get_vpiNetType());
    Structnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Structnets[index].setVpiScalar(obj->get_vpiScalar());
    Structnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Structnets[index].setVpiSigned(obj->get_vpiSigned());
    Structnets[index].setVpiSize(obj->get_vpiSize());
    Structnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Structnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Structnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Structnets[index].setVpiVector(obj->get_vpiVector());
    Structnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Structnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Structnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Structnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Structnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Structnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Structnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Structnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Structnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Structnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Structnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Structnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Structnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Structnets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Enumnet>::Builder Enumnets = cap_root.initFactoryEnumnet(enum_netFactory::objects_.size());
 index = 0;
 for (auto obj : enum_netFactory::objects_) {
    Enumnets[index].setVpiParent(getId(obj->get_vpiParent()));
    Enumnets[index].setUhdmParentType(obj->get_uhdmParentType());
    Enumnets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Enumnets[index].setVpiLineNo(obj->get_vpiLineNo());
    Enumnets[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
 
    if (obj->get_expr()) {  
      ::capnp::List<::ObjIndexType>::Builder Exprs = Enumnets[index].initExpr(obj->get_expr()->size());
      for (unsigned int ind = 0; ind < obj->get_expr()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Exprs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_expr())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_expr())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Enumnets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Enumnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Enumnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Enumnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Enumnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Enumnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Enumnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Enumnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Enumnets[index].setVpiNetType(obj->get_vpiNetType());
    Enumnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Enumnets[index].setVpiScalar(obj->get_vpiScalar());
    Enumnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Enumnets[index].setVpiSigned(obj->get_vpiSigned());
    Enumnets[index].setVpiSize(obj->get_vpiSize());
    Enumnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Enumnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Enumnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Enumnets[index].setVpiVector(obj->get_vpiVector());
    Enumnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Enumnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Enumnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Enumnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Enumnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Enumnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Enumnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Enumnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Enumnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Enumnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Enumnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Enumnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Enumnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Enumnets[index].setModule(getId(obj->get_module()));


    Enumnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Enumnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Enumnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Enumnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Enumnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Enumnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Enumnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Enumnets[index].setVpiNetType(obj->get_vpiNetType());
    Enumnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Enumnets[index].setVpiScalar(obj->get_vpiScalar());
    Enumnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Enumnets[index].setVpiSigned(obj->get_vpiSigned());
    Enumnets[index].setVpiSize(obj->get_vpiSize());
    Enumnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Enumnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Enumnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Enumnets[index].setVpiVector(obj->get_vpiVector());
    Enumnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Enumnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Enumnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Enumnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Enumnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Enumnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Enumnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Enumnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Enumnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Enumnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Enumnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Enumnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Enumnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Enumnets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Integernet>::Builder Integernets = cap_root.initFactoryIntegernet(integer_netFactory::objects_.size());
 index = 0;
 for (auto obj : integer_netFactory::objects_) {
    Integernets[index].setVpiParent(getId(obj->get_vpiParent()));
    Integernets[index].setUhdmParentType(obj->get_uhdmParentType());
    Integernets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Integernets[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Integernets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Integernets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Integernets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Integernets[index].setVpiExpanded(obj->get_vpiExpanded());
    Integernets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Integernets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Integernets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Integernets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Integernets[index].setVpiNetType(obj->get_vpiNetType());
    Integernets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Integernets[index].setVpiScalar(obj->get_vpiScalar());
    Integernets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Integernets[index].setVpiSigned(obj->get_vpiSigned());
    Integernets[index].setVpiSize(obj->get_vpiSize());
    Integernets[index].setVpiStrength0(obj->get_vpiStrength0());
    Integernets[index].setVpiStrength1(obj->get_vpiStrength1());
    Integernets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Integernets[index].setVpiVector(obj->get_vpiVector());
    Integernets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Integernets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Integernets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Integernets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Integernets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Integernets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Integernets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Integernets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Integernets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Integernets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Integernets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Integernets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Integernets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Integernets[index].setModule(getId(obj->get_module()));


    Integernets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Integernets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Integernets[index].setVpiExpanded(obj->get_vpiExpanded());
    Integernets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Integernets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Integernets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Integernets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Integernets[index].setVpiNetType(obj->get_vpiNetType());
    Integernets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Integernets[index].setVpiScalar(obj->get_vpiScalar());
    Integernets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Integernets[index].setVpiSigned(obj->get_vpiSigned());
    Integernets[index].setVpiSize(obj->get_vpiSize());
    Integernets[index].setVpiStrength0(obj->get_vpiStrength0());
    Integernets[index].setVpiStrength1(obj->get_vpiStrength1());
    Integernets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Integernets[index].setVpiVector(obj->get_vpiVector());
    Integernets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Integernets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Integernets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Integernets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Integernets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Integernets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Integernets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Integernets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Integernets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Integernets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Integernets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Integernets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Integernets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Integernets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Timenet>::Builder Timenets = cap_root.initFactoryTimenet(time_netFactory::objects_.size());
 index = 0;
 for (auto obj : time_netFactory::objects_) {
    Timenets[index].setVpiParent(getId(obj->get_vpiParent()));
    Timenets[index].setUhdmParentType(obj->get_uhdmParentType());
    Timenets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Timenets[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Timenets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Timenets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Timenets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Timenets[index].setVpiExpanded(obj->get_vpiExpanded());
    Timenets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Timenets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Timenets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Timenets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Timenets[index].setVpiNetType(obj->get_vpiNetType());
    Timenets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Timenets[index].setVpiScalar(obj->get_vpiScalar());
    Timenets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Timenets[index].setVpiSigned(obj->get_vpiSigned());
    Timenets[index].setVpiSize(obj->get_vpiSize());
    Timenets[index].setVpiStrength0(obj->get_vpiStrength0());
    Timenets[index].setVpiStrength1(obj->get_vpiStrength1());
    Timenets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Timenets[index].setVpiVector(obj->get_vpiVector());
    Timenets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Timenets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Timenets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Timenets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Timenets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Timenets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Timenets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Timenets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Timenets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Timenets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Timenets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Timenets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Timenets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Timenets[index].setModule(getId(obj->get_module()));


    Timenets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Timenets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Timenets[index].setVpiExpanded(obj->get_vpiExpanded());
    Timenets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Timenets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Timenets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Timenets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Timenets[index].setVpiNetType(obj->get_vpiNetType());
    Timenets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Timenets[index].setVpiScalar(obj->get_vpiScalar());
    Timenets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Timenets[index].setVpiSigned(obj->get_vpiSigned());
    Timenets[index].setVpiSize(obj->get_vpiSize());
    Timenets[index].setVpiStrength0(obj->get_vpiStrength0());
    Timenets[index].setVpiStrength1(obj->get_vpiStrength1());
    Timenets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Timenets[index].setVpiVector(obj->get_vpiVector());
    Timenets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Timenets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Timenets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Timenets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Timenets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Timenets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Timenets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Timenets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Timenets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Timenets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Timenets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Timenets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Timenets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Timenets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Logicnet>::Builder Logicnets = cap_root.initFactoryLogicnet(logic_netFactory::objects_.size());
 index = 0;
 for (auto obj : logic_netFactory::objects_) {
    Logicnets[index].setVpiParent(getId(obj->get_vpiParent()));
    Logicnets[index].setUhdmParentType(obj->get_uhdmParentType());
    Logicnets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Logicnets[index].setVpiLineNo(obj->get_vpiLineNo());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Logicnets[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Logicnets[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Logicnets[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Logicnets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Logicnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Logicnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Logicnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Logicnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Logicnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Logicnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Logicnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Logicnets[index].setVpiNetType(obj->get_vpiNetType());
    Logicnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Logicnets[index].setVpiScalar(obj->get_vpiScalar());
    Logicnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Logicnets[index].setVpiSigned(obj->get_vpiSigned());
    Logicnets[index].setVpiSize(obj->get_vpiSize());
    Logicnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Logicnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Logicnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Logicnets[index].setVpiVector(obj->get_vpiVector());
    Logicnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Logicnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Logicnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Logicnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Logicnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Logicnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Logicnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Logicnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Logicnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Logicnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Logicnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Logicnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Logicnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Logicnets[index].setModule(getId(obj->get_module()));


    Logicnets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Logicnets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Logicnets[index].setVpiExpanded(obj->get_vpiExpanded());
    Logicnets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Logicnets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Logicnets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Logicnets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Logicnets[index].setVpiNetType(obj->get_vpiNetType());
    Logicnets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Logicnets[index].setVpiScalar(obj->get_vpiScalar());
    Logicnets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Logicnets[index].setVpiSigned(obj->get_vpiSigned());
    Logicnets[index].setVpiSize(obj->get_vpiSize());
    Logicnets[index].setVpiStrength0(obj->get_vpiStrength0());
    Logicnets[index].setVpiStrength1(obj->get_vpiStrength1());
    Logicnets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Logicnets[index].setVpiVector(obj->get_vpiVector());
    Logicnets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Logicnets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Logicnets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Logicnets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Logicnets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Logicnets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Logicnets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Logicnets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Logicnets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Logicnets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Logicnets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Logicnets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Logicnets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Logicnets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Arraynet>::Builder Arraynets = cap_root.initFactoryArraynet(array_netFactory::objects_.size());
 index = 0;
 for (auto obj : array_netFactory::objects_) {
    Arraynets[index].setVpiParent(getId(obj->get_vpiParent()));
    Arraynets[index].setUhdmParentType(obj->get_uhdmParentType());
    Arraynets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Arraynets[index].setVpiLineNo(obj->get_vpiLineNo());
 
    if (obj->get_nets()) {  
      ::capnp::List<::ObjIndexType>::Builder Netss = Arraynets[index].initNets(obj->get_nets()->size());
      for (unsigned int ind = 0; ind < obj->get_nets()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Netss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_nets())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_nets())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_range()) {  
      ::capnp::List<::uint64_t>::Builder Ranges = Arraynets[index].initRange(obj->get_range()->size());
      for (unsigned int ind = 0; ind < obj->get_range()->size(); ind++) {
        Ranges.set(ind, getId((*obj->get_range())[ind]));
      }
    }
    Arraynets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Arraynets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Arraynets[index].setVpiExpanded(obj->get_vpiExpanded());
    Arraynets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Arraynets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Arraynets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Arraynets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Arraynets[index].setVpiNetType(obj->get_vpiNetType());
    Arraynets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Arraynets[index].setVpiScalar(obj->get_vpiScalar());
    Arraynets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Arraynets[index].setVpiSigned(obj->get_vpiSigned());
    Arraynets[index].setVpiSize(obj->get_vpiSize());
    Arraynets[index].setVpiStrength0(obj->get_vpiStrength0());
    Arraynets[index].setVpiStrength1(obj->get_vpiStrength1());
    Arraynets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Arraynets[index].setVpiVector(obj->get_vpiVector());
    Arraynets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Arraynets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Arraynets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Arraynets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Arraynets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Arraynets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Arraynets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Arraynets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Arraynets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Arraynets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Arraynets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Arraynets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Arraynets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Arraynets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Packedarraynet>::Builder Packedarraynets = cap_root.initFactoryPackedarraynet(packed_array_netFactory::objects_.size());
 index = 0;
 for (auto obj : packed_array_netFactory::objects_) {
    Packedarraynets[index].setVpiParent(getId(obj->get_vpiParent()));
    Packedarraynets[index].setUhdmParentType(obj->get_uhdmParentType());
    Packedarraynets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Packedarraynets[index].setVpiLineNo(obj->get_vpiLineNo());
    Packedarraynets[index].setVpiPackedArrayMember(obj->get_vpiPackedArrayMember());
  if (obj->get_left_expr()) {
    ::ObjIndexType::Builder tmp0 = Packedarraynets[index].getLeftexpr();
    tmp0.setIndex(getId(((BaseClass*) obj->get_left_expr())));
    tmp0.setType(((BaseClass*)obj->get_left_expr())->getUhdmType());
  }  if (obj->get_right_expr()) {
    ::ObjIndexType::Builder tmp1 = Packedarraynets[index].getRightexpr();
    tmp1.setIndex(getId(((BaseClass*) obj->get_right_expr())));
    tmp1.setType(((BaseClass*)obj->get_right_expr())->getUhdmType());
  } 
    if (obj->get_expr()) {  
      ::capnp::List<::ObjIndexType>::Builder Exprs = Packedarraynets[index].initExpr(obj->get_expr()->size());
      for (unsigned int ind = 0; ind < obj->get_expr()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Exprs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_expr())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_expr())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_ranges()) {  
      ::capnp::List<::uint64_t>::Builder Rangess = Packedarraynets[index].initRanges(obj->get_ranges()->size());
      for (unsigned int ind = 0; ind < obj->get_ranges()->size(); ind++) {
        Rangess.set(ind, getId((*obj->get_ranges())[ind]));
      }
    }
 
    if (obj->get_elements()) {  
      ::capnp::List<::ObjIndexType>::Builder Elementss = Packedarraynets[index].initElements(obj->get_elements()->size());
      for (unsigned int ind = 0; ind < obj->get_elements()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Elementss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_elements())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_elements())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net_bits()) {  
      ::capnp::List<::uint64_t>::Builder Netbitss = Packedarraynets[index].initNetbits(obj->get_net_bits()->size());
      for (unsigned int ind = 0; ind < obj->get_net_bits()->size(); ind++) {
        Netbitss.set(ind, getId((*obj->get_net_bits())[ind]));
      }
    }
    Packedarraynets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Packedarraynets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Packedarraynets[index].setVpiExpanded(obj->get_vpiExpanded());
    Packedarraynets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Packedarraynets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packedarraynets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Packedarraynets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Packedarraynets[index].setVpiNetType(obj->get_vpiNetType());
    Packedarraynets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Packedarraynets[index].setVpiScalar(obj->get_vpiScalar());
    Packedarraynets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Packedarraynets[index].setVpiSigned(obj->get_vpiSigned());
    Packedarraynets[index].setVpiSize(obj->get_vpiSize());
    Packedarraynets[index].setVpiStrength0(obj->get_vpiStrength0());
    Packedarraynets[index].setVpiStrength1(obj->get_vpiStrength1());
    Packedarraynets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Packedarraynets[index].setVpiVector(obj->get_vpiVector());
    Packedarraynets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Packedarraynets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Packedarraynets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Packedarraynets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Packedarraynets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Packedarraynets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Packedarraynets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Packedarraynets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Packedarraynets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Packedarraynets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Packedarraynets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Packedarraynets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Packedarraynets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Packedarraynets[index].setModule(getId(obj->get_module()));


    Packedarraynets[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Packedarraynets[index].setVpiConstantSelect(obj->get_vpiConstantSelect());
    Packedarraynets[index].setVpiExpanded(obj->get_vpiExpanded());
    Packedarraynets[index].setVpiImplicitDecl(obj->get_vpiImplicitDecl());
    Packedarraynets[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packedarraynets[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Packedarraynets[index].setVpiNetDeclAssign(obj->get_vpiNetDeclAssign());
    Packedarraynets[index].setVpiNetType(obj->get_vpiNetType());
    Packedarraynets[index].setVpiResolvedNetType(obj->get_vpiResolvedNetType());
    Packedarraynets[index].setVpiScalar(obj->get_vpiScalar());
    Packedarraynets[index].setVpiExplicitScalared(obj->get_vpiExplicitScalared());
    Packedarraynets[index].setVpiSigned(obj->get_vpiSigned());
    Packedarraynets[index].setVpiSize(obj->get_vpiSize());
    Packedarraynets[index].setVpiStrength0(obj->get_vpiStrength0());
    Packedarraynets[index].setVpiStrength1(obj->get_vpiStrength1());
    Packedarraynets[index].setVpiChargeStrength(obj->get_vpiChargeStrength());
    Packedarraynets[index].setVpiVector(obj->get_vpiVector());
    Packedarraynets[index].setVpiExplicitVectored(obj->get_vpiExplicitVectored());
    Packedarraynets[index].setVpiStructUnionMember(obj->get_vpiStructUnionMember());
 
    if (obj->get_ports()) {  
      ::capnp::List<::ObjIndexType>::Builder Portss = Packedarraynets[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Portss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_ports())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_ports())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Driverss = Packedarraynets[index].initDrivers(obj->get_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Driverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Loadss = Packedarraynets[index].initLoads(obj->get_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Loadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_loads())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_drivers()) {  
      ::capnp::List<::ObjIndexType>::Builder Localdriverss = Packedarraynets[index].initLocaldrivers(obj->get_local_drivers()->size());
      for (unsigned int ind = 0; ind < obj->get_local_drivers()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localdriverss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_drivers())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_drivers())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_local_loads()) {  
      ::capnp::List<::ObjIndexType>::Builder Localloadss = Packedarraynets[index].initLocalloads(obj->get_local_loads()->size());
      for (unsigned int ind = 0; ind < obj->get_local_loads()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Localloadss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_local_loads())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_local_loads())[ind]))->getUhdmType());
      }
    }
  if (obj->get_sim_nets()) {
    ::ObjIndexType::Builder tmp0 = Packedarraynets[index].getSimnets();
    tmp0.setIndex(getId(((BaseClass*) obj->get_sim_nets())));
    tmp0.setType(((BaseClass*)obj->get_sim_nets())->getUhdmType());
  }  if (obj->get_typespec()) {
    ::ObjIndexType::Builder tmp1 = Packedarraynets[index].getTypespec();
    tmp1.setIndex(getId(((BaseClass*) obj->get_typespec())));
    tmp1.setType(((BaseClass*)obj->get_typespec())->getUhdmType());
  } 
    if (obj->get_prim_terms()) {  
      ::capnp::List<::uint64_t>::Builder Primtermss = Packedarraynets[index].initPrimterms(obj->get_prim_terms()->size());
      for (unsigned int ind = 0; ind < obj->get_prim_terms()->size(); ind++) {
        Primtermss.set(ind, getId((*obj->get_prim_terms())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Packedarraynets[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_path_term()) {  
      ::capnp::List<::uint64_t>::Builder Pathterms = Packedarraynets[index].initPathterm(obj->get_path_term()->size());
      for (unsigned int ind = 0; ind < obj->get_path_term()->size(); ind++) {
        Pathterms.set(ind, getId((*obj->get_path_term())[ind]));
      }
    }
 
    if (obj->get_tchk_term()) {  
      ::capnp::List<::uint64_t>::Builder Tchkterms = Packedarraynets[index].initTchkterm(obj->get_tchk_term()->size());
      for (unsigned int ind = 0; ind < obj->get_tchk_term()->size(); ind++) {
        Tchkterms.set(ind, getId((*obj->get_tchk_term())[ind]));
      }
    }
    Packedarraynets[index].setModule(getId(obj->get_module()));


   index++;
 }
 ::capnp::List<Namedevent>::Builder Namedevents = cap_root.initFactoryNamedevent(named_eventFactory::objects_.size());
 index = 0;
 for (auto obj : named_eventFactory::objects_) {
    Namedevents[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedevents[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedevents[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedevents[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Namedeventarray>::Builder Namedeventarrays = cap_root.initFactoryNamedeventarray(named_event_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : named_event_arrayFactory::objects_) {
    Namedeventarrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedeventarrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedeventarrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedeventarrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Specparam>::Builder Specparams = cap_root.initFactorySpecparam(spec_paramFactory::objects_.size());
 index = 0;
 for (auto obj : spec_paramFactory::objects_) {
    Specparams[index].setVpiParent(getId(obj->get_vpiParent()));
    Specparams[index].setUhdmParentType(obj->get_uhdmParentType());
    Specparams[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Specparams[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Classdefn>::Builder Classdefns = cap_root.initFactoryClassdefn(class_defnFactory::objects_.size());
 index = 0;
 for (auto obj : class_defnFactory::objects_) {
    Classdefns[index].setVpiParent(getId(obj->get_vpiParent()));
    Classdefns[index].setUhdmParentType(obj->get_uhdmParentType());
    Classdefns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Classdefns[index].setVpiLineNo(obj->get_vpiLineNo());
    Classdefns[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Classdefns[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Classdefns[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Classdefns[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Classdefns[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefnss = Classdefns[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefnss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Classdefns[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Classdefns[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Classdefns[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Classdefns[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Classdefns[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Classdefns[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Classdefns[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Classdefns[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Classdefns[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Classdefns[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Classdefns[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Classtypespec>::Builder Classtypespecs = cap_root.initFactoryClasstypespec(class_typespecFactory::objects_.size());
 index = 0;
 for (auto obj : class_typespecFactory::objects_) {
    Classtypespecs[index].setVpiParent(getId(obj->get_vpiParent()));
    Classtypespecs[index].setUhdmParentType(obj->get_uhdmParentType());
    Classtypespecs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Classtypespecs[index].setVpiLineNo(obj->get_vpiLineNo());
    Classtypespecs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Classtypespecs[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Classtypespecs[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Classtypespecs[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Classtypespecs[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Classtypespecss = Classtypespecs[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classtypespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Classtypespecs[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Classtypespecs[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Classtypespecs[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Classtypespecs[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Classtypespecs[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Classtypespecs[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Classtypespecs[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Classtypespecs[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Classtypespecs[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Classtypespecs[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Classtypespecs[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Classobj>::Builder Classobjs = cap_root.initFactoryClassobj(class_objFactory::objects_.size());
 index = 0;
 for (auto obj : class_objFactory::objects_) {
    Classobjs[index].setVpiParent(getId(obj->get_vpiParent()));
    Classobjs[index].setUhdmParentType(obj->get_uhdmParentType());
    Classobjs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Classobjs[index].setVpiLineNo(obj->get_vpiLineNo());
    Classobjs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Classobjs[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Classobjs[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Classobjs[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Classobjs[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Classobjss = Classobjs[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classobjss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Classobjs[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Classobjs[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Classobjs[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Classobjs[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Classobjs[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Classobjs[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Classobjs[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Classobjs[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Classobjs[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Classobjs[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Classobjs[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Interface>::Builder Interfaces = cap_root.initFactoryInterface(interfaceFactory::objects_.size());
 index = 0;
 for (auto obj : interfaceFactory::objects_) {
    Interfaces[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfaces[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfaces[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfaces[index].setVpiLineNo(obj->get_vpiLineNo());
    Interfaces[index].setVpiIndex(obj->get_vpiIndex());
  if (obj->get_expr_dist()) {
    ::ObjIndexType::Builder tmp0 = Interfaces[index].getExprdist();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_dist())));
    tmp0.setType(((BaseClass*)obj->get_expr_dist())->getUhdmType());
  }  if (obj->get_instance_array()) {
    ::ObjIndexType::Builder tmp1 = Interfaces[index].getInstancearray();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance_array())));
    tmp1.setType(((BaseClass*)obj->get_instance_array())->getUhdmType());
  } 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Interfaces[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_process())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_process())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_interface_tf_decls()) {  
      ::capnp::List<::uint64_t>::Builder Interfacetfdeclss = Interfaces[index].initInterfacetfdecls(obj->get_interface_tf_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_tf_decls()->size(); ind++) {
        Interfacetfdeclss.set(ind, getId((*obj->get_interface_tf_decls())[ind]));
      }
    }
 
    if (obj->get_modports()) {  
      ::capnp::List<::uint64_t>::Builder Modportss = Interfaces[index].initModports(obj->get_modports()->size());
      for (unsigned int ind = 0; ind < obj->get_modports()->size(); ind++) {
        Modportss.set(ind, getId((*obj->get_modports())[ind]));
      }
    }
    Interfaces[index].setGlobalclocking(getId(obj->get_global_clocking()));
    Interfaces[index].setDefaultclocking(getId(obj->get_default_clocking()));
 
    if (obj->get_mod_paths()) {  
      ::capnp::List<::uint64_t>::Builder Modpathss = Interfaces[index].initModpaths(obj->get_mod_paths()->size());
      for (unsigned int ind = 0; ind < obj->get_mod_paths()->size(); ind++) {
        Modpathss.set(ind, getId((*obj->get_mod_paths())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Interfaces[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Interfaces[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
        Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Interfaces[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
        Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }
    Interfaces[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Interfaces[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Interfaces[index].setVpiCellInstance(obj->get_vpiCellInstance());
    Interfaces[index].setVpiDefNetType(obj->get_vpiDefNetType());
    Interfaces[index].setVpiDefFile(SymbolFactory::make(obj->get_vpiDefFile()));
    Interfaces[index].setVpiDefDelayMode(obj->get_vpiDefDelayMode());
    Interfaces[index].setVpiProtected(obj->get_vpiProtected());
    Interfaces[index].setVpiTimePrecision(obj->get_vpiTimePrecision());
    Interfaces[index].setVpiTimeUnit(obj->get_vpiTimeUnit());
    Interfaces[index].setVpiUnconnDrive(obj->get_vpiUnconnDrive());
    Interfaces[index].setVpiLibrary(SymbolFactory::make(obj->get_vpiLibrary()));
    Interfaces[index].setVpiCell(SymbolFactory::make(obj->get_vpiCell()));
    Interfaces[index].setVpiConfig(SymbolFactory::make(obj->get_vpiConfig()));
    Interfaces[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Interfaces[index].setVpiTop(obj->get_vpiTop());
 
    if (obj->get_task_func()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskfuncs = Interfaces[index].initTaskfunc(obj->get_task_func()->size());
      for (unsigned int ind = 0; ind < obj->get_task_func()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskfuncs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_task_func())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_task_func())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Nets = Interfaces[index].initNet(obj->get_net()->size());
      for (unsigned int ind = 0; ind < obj->get_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Nets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_array_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Arraynets = Interfaces[index].initArraynet(obj->get_array_net()->size());
      for (unsigned int ind = 0; ind < obj->get_array_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Arraynets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_array_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_array_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_assertion()) {  
      ::capnp::List<::ObjIndexType>::Builder Assertions = Interfaces[index].initAssertion(obj->get_assertion()->size());
      for (unsigned int ind = 0; ind < obj->get_assertion()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Assertions[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_assertion())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_assertion())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_class_defn()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefns = Interfaces[index].initClassdefn(obj->get_class_defn()->size());
      for (unsigned int ind = 0; ind < obj->get_class_defn()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefns[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_class_defn())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_class_defn())[ind]))->getUhdmType());
      }
    }
  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp0 = Interfaces[index].getInstance();
    tmp0.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp0.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  } 
    if (obj->get_programs()) {  
      ::capnp::List<::uint64_t>::Builder Programss = Interfaces[index].initPrograms(obj->get_programs()->size());
      for (unsigned int ind = 0; ind < obj->get_programs()->size(); ind++) {
        Programss.set(ind, getId((*obj->get_programs())[ind]));
      }
    }
 
    if (obj->get_program_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Programarrayss = Interfaces[index].initProgramarrays(obj->get_program_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_program_arrays()->size(); ind++) {
        Programarrayss.set(ind, getId((*obj->get_program_arrays())[ind]));
      }
    }
 
    if (obj->get_named_event()) {  
      ::capnp::List<::uint64_t>::Builder Namedevents = Interfaces[index].initNamedevent(obj->get_named_event()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event()->size(); ind++) {
        Namedevents.set(ind, getId((*obj->get_named_event())[ind]));
      }
    }
 
    if (obj->get_named_event_array()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrays = Interfaces[index].initNamedeventarray(obj->get_named_event_array()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_array()->size(); ind++) {
        Namedeventarrays.set(ind, getId((*obj->get_named_event_array())[ind]));
      }
    }
 
    if (obj->get_spec_param()) {  
      ::capnp::List<::uint64_t>::Builder Specparams = Interfaces[index].initSpecparam(obj->get_spec_param()->size());
      for (unsigned int ind = 0; ind < obj->get_spec_param()->size(); ind++) {
        Specparams.set(ind, getId((*obj->get_spec_param())[ind]));
      }
    }
    Interfaces[index].setModule(getId(obj->get_module()));
    Interfaces[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Interfaces[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Interfaces[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Interfaces[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Interfaces[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Interfacess = Interfaces[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Interfacess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Interfaces[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Interfaces[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Interfaces[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Interfaces[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Interfaces[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Interfaces[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Interfaces[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Interfaces[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Interfaces[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Interfaces[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Interfaces[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Interfaces[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Interfaces[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Interfaces[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Interfaces[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Interfaces[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Interfacess = Interfaces[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Interfacess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Interfaces[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Interfaces[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Interfaces[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Interfaces[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Interfaces[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Interfaces[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Interfaces[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Interfaces[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Interfaces[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Interfaces[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Interfaces[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Program>::Builder Programs = cap_root.initFactoryProgram(programFactory::objects_.size());
 index = 0;
 for (auto obj : programFactory::objects_) {
    Programs[index].setVpiParent(getId(obj->get_vpiParent()));
    Programs[index].setUhdmParentType(obj->get_uhdmParentType());
    Programs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Programs[index].setVpiLineNo(obj->get_vpiLineNo());
    Programs[index].setVpiIndex(obj->get_vpiIndex());
  if (obj->get_instance_array()) {
    ::ObjIndexType::Builder tmp0 = Programs[index].getInstancearray();
    tmp0.setIndex(getId(((BaseClass*) obj->get_instance_array())));
    tmp0.setType(((BaseClass*)obj->get_instance_array())->getUhdmType());
  }  if (obj->get_expr_dist()) {
    ::ObjIndexType::Builder tmp1 = Programs[index].getExprdist();
    tmp1.setIndex(getId(((BaseClass*) obj->get_expr_dist())));
    tmp1.setType(((BaseClass*)obj->get_expr_dist())->getUhdmType());
  } 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Programs[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_process())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_process())[ind]))->getUhdmType());
      }
    }
    Programs[index].setDefaultclocking(getId(obj->get_default_clocking()));
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Programs[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
        Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Programs[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
        Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Programs[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_clocking_blocks()) {  
      ::capnp::List<::uint64_t>::Builder Clockingblockss = Programs[index].initClockingblocks(obj->get_clocking_blocks()->size());
      for (unsigned int ind = 0; ind < obj->get_clocking_blocks()->size(); ind++) {
        Clockingblockss.set(ind, getId((*obj->get_clocking_blocks())[ind]));
      }
    }
    Programs[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Programs[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Programs[index].setVpiCellInstance(obj->get_vpiCellInstance());
    Programs[index].setVpiDefNetType(obj->get_vpiDefNetType());
    Programs[index].setVpiDefFile(SymbolFactory::make(obj->get_vpiDefFile()));
    Programs[index].setVpiDefDelayMode(obj->get_vpiDefDelayMode());
    Programs[index].setVpiProtected(obj->get_vpiProtected());
    Programs[index].setVpiTimePrecision(obj->get_vpiTimePrecision());
    Programs[index].setVpiTimeUnit(obj->get_vpiTimeUnit());
    Programs[index].setVpiUnconnDrive(obj->get_vpiUnconnDrive());
    Programs[index].setVpiLibrary(SymbolFactory::make(obj->get_vpiLibrary()));
    Programs[index].setVpiCell(SymbolFactory::make(obj->get_vpiCell()));
    Programs[index].setVpiConfig(SymbolFactory::make(obj->get_vpiConfig()));
    Programs[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Programs[index].setVpiTop(obj->get_vpiTop());
 
    if (obj->get_task_func()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskfuncs = Programs[index].initTaskfunc(obj->get_task_func()->size());
      for (unsigned int ind = 0; ind < obj->get_task_func()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskfuncs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_task_func())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_task_func())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Nets = Programs[index].initNet(obj->get_net()->size());
      for (unsigned int ind = 0; ind < obj->get_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Nets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_array_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Arraynets = Programs[index].initArraynet(obj->get_array_net()->size());
      for (unsigned int ind = 0; ind < obj->get_array_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Arraynets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_array_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_array_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_assertion()) {  
      ::capnp::List<::ObjIndexType>::Builder Assertions = Programs[index].initAssertion(obj->get_assertion()->size());
      for (unsigned int ind = 0; ind < obj->get_assertion()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Assertions[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_assertion())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_assertion())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_class_defn()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefns = Programs[index].initClassdefn(obj->get_class_defn()->size());
      for (unsigned int ind = 0; ind < obj->get_class_defn()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefns[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_class_defn())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_class_defn())[ind]))->getUhdmType());
      }
    }
  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp0 = Programs[index].getInstance();
    tmp0.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp0.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  } 
    if (obj->get_programs()) {  
      ::capnp::List<::uint64_t>::Builder Programss = Programs[index].initPrograms(obj->get_programs()->size());
      for (unsigned int ind = 0; ind < obj->get_programs()->size(); ind++) {
        Programss.set(ind, getId((*obj->get_programs())[ind]));
      }
    }
 
    if (obj->get_program_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Programarrayss = Programs[index].initProgramarrays(obj->get_program_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_program_arrays()->size(); ind++) {
        Programarrayss.set(ind, getId((*obj->get_program_arrays())[ind]));
      }
    }
 
    if (obj->get_named_event()) {  
      ::capnp::List<::uint64_t>::Builder Namedevents = Programs[index].initNamedevent(obj->get_named_event()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event()->size(); ind++) {
        Namedevents.set(ind, getId((*obj->get_named_event())[ind]));
      }
    }
 
    if (obj->get_named_event_array()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrays = Programs[index].initNamedeventarray(obj->get_named_event_array()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_array()->size(); ind++) {
        Namedeventarrays.set(ind, getId((*obj->get_named_event_array())[ind]));
      }
    }
 
    if (obj->get_spec_param()) {  
      ::capnp::List<::uint64_t>::Builder Specparams = Programs[index].initSpecparam(obj->get_spec_param()->size());
      for (unsigned int ind = 0; ind < obj->get_spec_param()->size(); ind++) {
        Specparams.set(ind, getId((*obj->get_spec_param())[ind]));
      }
    }
    Programs[index].setModule(getId(obj->get_module()));
    Programs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Programs[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Programs[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Programs[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Programs[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Programss = Programs[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Programss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Programs[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Programs[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Programs[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Programs[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Programs[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Programs[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Programs[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Programs[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Programs[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Programs[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Programs[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Programs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Programs[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Programs[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Programs[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Programs[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Programss = Programs[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Programss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Programs[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Programs[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Programs[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Programs[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Programs[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Programs[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Programs[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Programs[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Programs[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Programs[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Programs[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Package>::Builder Packages = cap_root.initFactoryPackage(packageFactory::objects_.size());
 index = 0;
 for (auto obj : packageFactory::objects_) {
    Packages[index].setVpiParent(getId(obj->get_vpiParent()));
    Packages[index].setUhdmParentType(obj->get_uhdmParentType());
    Packages[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Packages[index].setVpiLineNo(obj->get_vpiLineNo());
    Packages[index].setVpiUnit(obj->get_vpiUnit());
    Packages[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Packages[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Packages[index].setVpiCellInstance(obj->get_vpiCellInstance());
    Packages[index].setVpiDefNetType(obj->get_vpiDefNetType());
    Packages[index].setVpiDefFile(SymbolFactory::make(obj->get_vpiDefFile()));
    Packages[index].setVpiDefDelayMode(obj->get_vpiDefDelayMode());
    Packages[index].setVpiProtected(obj->get_vpiProtected());
    Packages[index].setVpiTimePrecision(obj->get_vpiTimePrecision());
    Packages[index].setVpiTimeUnit(obj->get_vpiTimeUnit());
    Packages[index].setVpiUnconnDrive(obj->get_vpiUnconnDrive());
    Packages[index].setVpiLibrary(SymbolFactory::make(obj->get_vpiLibrary()));
    Packages[index].setVpiCell(SymbolFactory::make(obj->get_vpiCell()));
    Packages[index].setVpiConfig(SymbolFactory::make(obj->get_vpiConfig()));
    Packages[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Packages[index].setVpiTop(obj->get_vpiTop());
 
    if (obj->get_task_func()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskfuncs = Packages[index].initTaskfunc(obj->get_task_func()->size());
      for (unsigned int ind = 0; ind < obj->get_task_func()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskfuncs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_task_func())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_task_func())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Nets = Packages[index].initNet(obj->get_net()->size());
      for (unsigned int ind = 0; ind < obj->get_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Nets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_array_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Arraynets = Packages[index].initArraynet(obj->get_array_net()->size());
      for (unsigned int ind = 0; ind < obj->get_array_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Arraynets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_array_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_array_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_assertion()) {  
      ::capnp::List<::ObjIndexType>::Builder Assertions = Packages[index].initAssertion(obj->get_assertion()->size());
      for (unsigned int ind = 0; ind < obj->get_assertion()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Assertions[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_assertion())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_assertion())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_class_defn()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefns = Packages[index].initClassdefn(obj->get_class_defn()->size());
      for (unsigned int ind = 0; ind < obj->get_class_defn()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefns[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_class_defn())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_class_defn())[ind]))->getUhdmType());
      }
    }
  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp0 = Packages[index].getInstance();
    tmp0.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp0.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  } 
    if (obj->get_programs()) {  
      ::capnp::List<::uint64_t>::Builder Programss = Packages[index].initPrograms(obj->get_programs()->size());
      for (unsigned int ind = 0; ind < obj->get_programs()->size(); ind++) {
        Programss.set(ind, getId((*obj->get_programs())[ind]));
      }
    }
 
    if (obj->get_program_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Programarrayss = Packages[index].initProgramarrays(obj->get_program_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_program_arrays()->size(); ind++) {
        Programarrayss.set(ind, getId((*obj->get_program_arrays())[ind]));
      }
    }
 
    if (obj->get_named_event()) {  
      ::capnp::List<::uint64_t>::Builder Namedevents = Packages[index].initNamedevent(obj->get_named_event()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event()->size(); ind++) {
        Namedevents.set(ind, getId((*obj->get_named_event())[ind]));
      }
    }
 
    if (obj->get_named_event_array()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrays = Packages[index].initNamedeventarray(obj->get_named_event_array()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_array()->size(); ind++) {
        Namedeventarrays.set(ind, getId((*obj->get_named_event_array())[ind]));
      }
    }
 
    if (obj->get_spec_param()) {  
      ::capnp::List<::uint64_t>::Builder Specparams = Packages[index].initSpecparam(obj->get_spec_param()->size());
      for (unsigned int ind = 0; ind < obj->get_spec_param()->size(); ind++) {
        Specparams.set(ind, getId((*obj->get_spec_param())[ind]));
      }
    }
    Packages[index].setModule(getId(obj->get_module()));
    Packages[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packages[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Packages[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Packages[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Packages[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Packagess = Packages[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Packagess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Packages[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Packages[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Packages[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Packages[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Packages[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Packages[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Packages[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Packages[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Packages[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Packages[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Packages[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Packages[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packages[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Packages[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Packages[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Packages[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Packagess = Packages[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Packagess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Packages[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Packages[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Packages[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Packages[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Packages[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Packages[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Packages[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Packages[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Packages[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Packages[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Packages[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Module>::Builder Modules = cap_root.initFactoryModule(moduleFactory::objects_.size());
 index = 0;
 for (auto obj : moduleFactory::objects_) {
    Modules[index].setVpiParent(getId(obj->get_vpiParent()));
    Modules[index].setUhdmParentType(obj->get_uhdmParentType());
    Modules[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modules[index].setVpiLineNo(obj->get_vpiLineNo());
    Modules[index].setVpiIndex(obj->get_vpiIndex());
    Modules[index].setVpiTopModule(obj->get_vpiTopModule());
    Modules[index].setVpiDefDecayTime(obj->get_vpiDefDecayTime());
  if (obj->get_expr_dist()) {
    ::ObjIndexType::Builder tmp0 = Modules[index].getExprdist();
    tmp0.setIndex(getId(((BaseClass*) obj->get_expr_dist())));
    tmp0.setType(((BaseClass*)obj->get_expr_dist())->getUhdmType());
  }  if (obj->get_instance_array()) {
    ::ObjIndexType::Builder tmp1 = Modules[index].getInstancearray();
    tmp1.setIndex(getId(((BaseClass*) obj->get_instance_array())));
    tmp1.setType(((BaseClass*)obj->get_instance_array())->getUhdmType());
  } 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Modules[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_process())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_process())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_primitives()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivess = Modules[index].initPrimitives(obj->get_primitives()->size());
      for (unsigned int ind = 0; ind < obj->get_primitives()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivess[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_primitives())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_primitives())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_primitive_arrays()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivearrayss = Modules[index].initPrimitivearrays(obj->get_primitive_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_primitive_arrays()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivearrayss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_primitive_arrays())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_primitive_arrays())[ind]))->getUhdmType());
      }
    }
    Modules[index].setGlobalclocking(getId(obj->get_global_clocking()));
    Modules[index].setDefaultclocking(getId(obj->get_default_clocking()));
    Modules[index].setModulearray(getId(obj->get_module_array()));
 
    if (obj->get_ports()) {  
      ::capnp::List<::uint64_t>::Builder Portss = Modules[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
        Portss.set(ind, getId((*obj->get_ports())[ind]));
      }
    }
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Modules[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
        Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Modules[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
        Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Modules[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
        Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Modules[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
        Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }
 
    if (obj->get_module_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Modulearrayss = Modules[index].initModulearrays(obj->get_module_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_module_arrays()->size(); ind++) {
        Modulearrayss.set(ind, getId((*obj->get_module_arrays())[ind]));
      }
    }
 
    if (obj->get_mod_paths()) {  
      ::capnp::List<::uint64_t>::Builder Modpathss = Modules[index].initModpaths(obj->get_mod_paths()->size());
      for (unsigned int ind = 0; ind < obj->get_mod_paths()->size(); ind++) {
        Modpathss.set(ind, getId((*obj->get_mod_paths())[ind]));
      }
    }
 
    if (obj->get_tchks()) {  
      ::capnp::List<::uint64_t>::Builder Tchkss = Modules[index].initTchks(obj->get_tchks()->size());
      for (unsigned int ind = 0; ind < obj->get_tchks()->size(); ind++) {
        Tchkss.set(ind, getId((*obj->get_tchks())[ind]));
      }
    }
 
    if (obj->get_def_params()) {  
      ::capnp::List<::uint64_t>::Builder Defparamss = Modules[index].initDefparams(obj->get_def_params()->size());
      for (unsigned int ind = 0; ind < obj->get_def_params()->size(); ind++) {
        Defparamss.set(ind, getId((*obj->get_def_params())[ind]));
      }
    }
 
    if (obj->get_io_decls()) {  
      ::capnp::List<::uint64_t>::Builder Iodeclss = Modules[index].initIodecls(obj->get_io_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_io_decls()->size(); ind++) {
        Iodeclss.set(ind, getId((*obj->get_io_decls())[ind]));
      }
    }
 
    if (obj->get_alias_stmts()) {  
      ::capnp::List<::uint64_t>::Builder Aliasstmtss = Modules[index].initAliasstmts(obj->get_alias_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_alias_stmts()->size(); ind++) {
        Aliasstmtss.set(ind, getId((*obj->get_alias_stmts())[ind]));
      }
    }
 
    if (obj->get_clocking_blocks()) {  
      ::capnp::List<::uint64_t>::Builder Clockingblockss = Modules[index].initClockingblocks(obj->get_clocking_blocks()->size());
      for (unsigned int ind = 0; ind < obj->get_clocking_blocks()->size(); ind++) {
        Clockingblockss.set(ind, getId((*obj->get_clocking_blocks())[ind]));
      }
    }
    Modules[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Modules[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Modules[index].setVpiCellInstance(obj->get_vpiCellInstance());
    Modules[index].setVpiDefNetType(obj->get_vpiDefNetType());
    Modules[index].setVpiDefFile(SymbolFactory::make(obj->get_vpiDefFile()));
    Modules[index].setVpiDefDelayMode(obj->get_vpiDefDelayMode());
    Modules[index].setVpiProtected(obj->get_vpiProtected());
    Modules[index].setVpiTimePrecision(obj->get_vpiTimePrecision());
    Modules[index].setVpiTimeUnit(obj->get_vpiTimeUnit());
    Modules[index].setVpiUnconnDrive(obj->get_vpiUnconnDrive());
    Modules[index].setVpiLibrary(SymbolFactory::make(obj->get_vpiLibrary()));
    Modules[index].setVpiCell(SymbolFactory::make(obj->get_vpiCell()));
    Modules[index].setVpiConfig(SymbolFactory::make(obj->get_vpiConfig()));
    Modules[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Modules[index].setVpiTop(obj->get_vpiTop());
 
    if (obj->get_task_func()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskfuncs = Modules[index].initTaskfunc(obj->get_task_func()->size());
      for (unsigned int ind = 0; ind < obj->get_task_func()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskfuncs[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_task_func())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_task_func())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Nets = Modules[index].initNet(obj->get_net()->size());
      for (unsigned int ind = 0; ind < obj->get_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Nets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_array_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Arraynets = Modules[index].initArraynet(obj->get_array_net()->size());
      for (unsigned int ind = 0; ind < obj->get_array_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Arraynets[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_array_net())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_array_net())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_assertion()) {  
      ::capnp::List<::ObjIndexType>::Builder Assertions = Modules[index].initAssertion(obj->get_assertion()->size());
      for (unsigned int ind = 0; ind < obj->get_assertion()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Assertions[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_assertion())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_assertion())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_class_defn()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefns = Modules[index].initClassdefn(obj->get_class_defn()->size());
      for (unsigned int ind = 0; ind < obj->get_class_defn()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefns[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_class_defn())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_class_defn())[ind]))->getUhdmType());
      }
    }
  if (obj->get_instance()) {
    ::ObjIndexType::Builder tmp0 = Modules[index].getInstance();
    tmp0.setIndex(getId(((BaseClass*) obj->get_instance())));
    tmp0.setType(((BaseClass*)obj->get_instance())->getUhdmType());
  } 
    if (obj->get_programs()) {  
      ::capnp::List<::uint64_t>::Builder Programss = Modules[index].initPrograms(obj->get_programs()->size());
      for (unsigned int ind = 0; ind < obj->get_programs()->size(); ind++) {
        Programss.set(ind, getId((*obj->get_programs())[ind]));
      }
    }
 
    if (obj->get_program_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Programarrayss = Modules[index].initProgramarrays(obj->get_program_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_program_arrays()->size(); ind++) {
        Programarrayss.set(ind, getId((*obj->get_program_arrays())[ind]));
      }
    }
 
    if (obj->get_named_event()) {  
      ::capnp::List<::uint64_t>::Builder Namedevents = Modules[index].initNamedevent(obj->get_named_event()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event()->size(); ind++) {
        Namedevents.set(ind, getId((*obj->get_named_event())[ind]));
      }
    }
 
    if (obj->get_named_event_array()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrays = Modules[index].initNamedeventarray(obj->get_named_event_array()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_array()->size(); ind++) {
        Namedeventarrays.set(ind, getId((*obj->get_named_event_array())[ind]));
      }
    }
 
    if (obj->get_spec_param()) {  
      ::capnp::List<::uint64_t>::Builder Specparams = Modules[index].initSpecparam(obj->get_spec_param()->size());
      for (unsigned int ind = 0; ind < obj->get_spec_param()->size(); ind++) {
        Specparams.set(ind, getId((*obj->get_spec_param())[ind]));
      }
    }
    Modules[index].setModule(getId(obj->get_module()));
    Modules[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Modules[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Modules[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Modules[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Modules[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Moduless = Modules[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Moduless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Modules[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Modules[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Modules[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Modules[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Modules[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Modules[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Modules[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Modules[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Modules[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Modules[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Modules[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


    Modules[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Modules[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
 
    if (obj->get_concurrent_assertions()) {  
      ::capnp::List<::ObjIndexType>::Builder Concurrentassertionss = Modules[index].initConcurrentassertions(obj->get_concurrent_assertions()->size());
      for (unsigned int ind = 0; ind < obj->get_concurrent_assertions()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Concurrentassertionss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_concurrent_assertions())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_concurrent_assertions())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Modules[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_variables())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_variables())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Modules[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_parameters())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_parameters())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_scopes()) {  
      ::capnp::List<::ObjIndexType>::Builder Moduless = Modules[index].initScopes(obj->get_scopes()->size());
      for (unsigned int ind = 0; ind < obj->get_scopes()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Moduless[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_scopes())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_scopes())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_typespecs()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecss = Modules[index].initTypespecs(obj->get_typespecs()->size());
      for (unsigned int ind = 0; ind < obj->get_typespecs()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_typespecs())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_typespecs())[ind]))->getUhdmType());
      }
    }
 
    if (obj->get_property_decls()) {  
      ::capnp::List<::uint64_t>::Builder Propertydeclss = Modules[index].initPropertydecls(obj->get_property_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_property_decls()->size(); ind++) {
        Propertydeclss.set(ind, getId((*obj->get_property_decls())[ind]));
      }
    }
 
    if (obj->get_sequence_decls()) {  
      ::capnp::List<::uint64_t>::Builder Sequencedeclss = Modules[index].initSequencedecls(obj->get_sequence_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_sequence_decls()->size(); ind++) {
        Sequencedeclss.set(ind, getId((*obj->get_sequence_decls())[ind]));
      }
    }
 
    if (obj->get_named_events()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventss = Modules[index].initNamedevents(obj->get_named_events()->size());
      for (unsigned int ind = 0; ind < obj->get_named_events()->size(); ind++) {
        Namedeventss.set(ind, getId((*obj->get_named_events())[ind]));
      }
    }
 
    if (obj->get_named_event_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrayss = Modules[index].initNamedeventarrays(obj->get_named_event_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_arrays()->size(); ind++) {
        Namedeventarrayss.set(ind, getId((*obj->get_named_event_arrays())[ind]));
      }
    }
 
    if (obj->get_virtual_interface_vars()) {  
      ::capnp::List<::uint64_t>::Builder Virtualinterfacevarss = Modules[index].initVirtualinterfacevars(obj->get_virtual_interface_vars()->size());
      for (unsigned int ind = 0; ind < obj->get_virtual_interface_vars()->size(); ind++) {
        Virtualinterfacevarss.set(ind, getId((*obj->get_virtual_interface_vars())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Modules[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
        Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Modules[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
        Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Modules[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
        Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_let_decls()) {  
      ::capnp::List<::uint64_t>::Builder Letdeclss = Modules[index].initLetdecls(obj->get_let_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_let_decls()->size(); ind++) {
        Letdeclss.set(ind, getId((*obj->get_let_decls())[ind]));
      }
    }
 
    if (obj->get_instance_items()) {  
      ::capnp::List<::ObjIndexType>::Builder Instanceitemss = Modules[index].initInstanceitems(obj->get_instance_items()->size());
      for (unsigned int ind = 0; ind < obj->get_instance_items()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Instanceitemss[ind];
        tmp.setIndex(getId(((BaseClass*) (*obj->get_instance_items())[ind])));
        tmp.setType(((BaseClass*)((*obj->get_instance_items())[ind]))->getUhdmType());
      }
    }


   index++;
 }
 ::capnp::List<Design>::Builder Designs = cap_root.initFactoryDesign(designFactory::objects_.size());
 index = 0;
 for (auto obj : designFactory::objects_) {
    Designs[index].setVpiParent(getId(obj->get_vpiParent()));
    Designs[index].setUhdmParentType(obj->get_uhdmParentType());
    Designs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Designs[index].setVpiLineNo(obj->get_vpiLineNo());
    Designs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
 
    if (obj->get_allModules()) {  
      ::capnp::List<::uint64_t>::Builder AllModuless = Designs[index].initAllModules(obj->get_allModules()->size());
      for (unsigned int ind = 0; ind < obj->get_allModules()->size(); ind++) {
        AllModuless.set(ind, getId((*obj->get_allModules())[ind]));
      }
    }
 
    if (obj->get_topModules()) {  
      ::capnp::List<::uint64_t>::Builder TopModuless = Designs[index].initTopModules(obj->get_topModules()->size());
      for (unsigned int ind = 0; ind < obj->get_topModules()->size(); ind++) {
        TopModuless.set(ind, getId((*obj->get_topModules())[ind]));
      }
    }
 
    if (obj->get_allPrograms()) {  
      ::capnp::List<::uint64_t>::Builder AllProgramss = Designs[index].initAllPrograms(obj->get_allPrograms()->size());
      for (unsigned int ind = 0; ind < obj->get_allPrograms()->size(); ind++) {
        AllProgramss.set(ind, getId((*obj->get_allPrograms())[ind]));
      }
    }
 
    if (obj->get_allPackages()) {  
      ::capnp::List<::uint64_t>::Builder AllPackagess = Designs[index].initAllPackages(obj->get_allPackages()->size());
      for (unsigned int ind = 0; ind < obj->get_allPackages()->size(); ind++) {
        AllPackagess.set(ind, getId((*obj->get_allPackages())[ind]));
      }
    }

   index++;
 }
  
  writePackedMessageToFd(fileid, message);   
  close(fileid);
}


