/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_user.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */
#include <string>
#include <vector>
#include <map>
#include <iostream>
#include "include/sv_vpi_user.h"
#include "include/vhpi_user.h"
typedef void any;
#include "headers/containers.h"
#include "include/vpi_uhdm.h"
#include "headers/uhdm.h"
#include <string.h>

#include "headers/process.h"
#include "headers/property_decl.h"
#include "headers/sequence_decl.h"
#include "headers/concurrent_assertion.h"
#include "headers/virtual_interface_var.h"
#include "headers/let_decl.h"
#include "headers/stmt.h"
#include "headers/instance_item.h"
#include "headers/scope.h"
#include "headers/begin.h"
#include "headers/named_begin.h"
#include "headers/named_fork.h"
#include "headers/fork_stmt.h"
#include "headers/for_stmt.h"
#include "headers/foreach_stmt.h"
#include "headers/gen_scope.h"
#include "headers/expr_dist.h"
#include "headers/expr.h"
#include "headers/distribution.h"
#include "headers/operand_group.h"
#include "headers/operation.h"
#include "headers/part_select.h"
#include "headers/actual_group.h"
#include "headers/ref_obj.h"
#include "headers/var_select.h"
#include "headers/variables.h"
#include "headers/variable_drivers.h"
#include "headers/variable_loads.h"
#include "headers/short_real_var.h"
#include "headers/real_var.h"
#include "headers/byte_var.h"
#include "headers/short_int_var.h"
#include "headers/int_var.h"
#include "headers/long_int_var.h"
#include "headers/integer_var.h"
#include "headers/time_var.h"
#include "headers/array_var.h"
#include "headers/packed_array_var.h"
#include "headers/bit_var.h"
#include "headers/logic_var.h"
#include "headers/struct_var.h"
#include "headers/union_var.h"
#include "headers/enum_var.h"
#include "headers/string_var.h"
#include "headers/chandle_var.h"
#include "headers/class_var.h"
#include "headers/var_bit.h"
#include "headers/task_func.h"
#include "headers/task.h"
#include "headers/function.h"
#include "headers/modport.h"
#include "headers/interface_tf_decl.h"
#include "headers/cont_assign.h"
#include "headers/expr_ref_obj_group.h"
#include "headers/ports.h"
#include "headers/port.h"
#include "headers/port_bit.h"
#include "headers/primitive.h"
#include "headers/mod_path.h"
#include "headers/tchk.h"
#include "headers/def_param.h"
#include "headers/range.h"
#include "headers/udp_defn.h"
#include "headers/ref_obj_interf_net_var_group.h"
#include "headers/io_decl.h"
#include "headers/alias_stmt.h"
#include "headers/clocking_block.h"
#include "headers/param_assign.h"
#include "headers/instance_array.h"
#include "headers/interface_array.h"
#include "headers/program_array.h"
#include "headers/module_array.h"
#include "headers/primitive_array.h"
#include "headers/gate_array.h"
#include "headers/switch_array.h"
#include "headers/udp_array.h"
#include "headers/typespec.h"
#include "headers/net_drivers.h"
#include "headers/net_loads.h"
#include "headers/prim_term.h"
#include "headers/path_term.h"
#include "headers/tchk_term.h"
#include "headers/nets.h"
#include "headers/net_bit.h"
#include "headers/net.h"
#include "headers/struct_net.h"
#include "headers/enum_net.h"
#include "headers/integer_net.h"
#include "headers/time_net.h"
#include "headers/logic_net.h"
#include "headers/array_net.h"
#include "headers/enum_struct_packed_net_group.h"
#include "headers/packed_array_net.h"
#include "headers/named_event.h"
#include "headers/named_event_array.h"
#include "headers/parameters.h"
#include "headers/spec_param.h"
#include "headers/assertion.h"
#include "headers/class_defn.h"
#include "headers/class_typespec.h"
#include "headers/class_obj.h"
#include "headers/instance.h"
#include "headers/interface.h"
#include "headers/program.h"
#include "headers/package.h"
#include "headers/module.h"
#include "headers/design.h"


using namespace UHDM;

vpiHandle vpi_handle_by_name (PLI_BYTE8    *name,
                              vpiHandle    scope) {
  return 0;
}

vpiHandle vpi_handle_by_index (vpiHandle object,
                                PLI_INT32    indx) {
  return 0;
}

/* for traversing relationships */

vpiHandle vpi_handle (PLI_INT32 type,
                      vpiHandle   refHandle) {
  uhdm_handle* handle = (uhdm_handle*) refHandle;
  BaseClass*  object = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((process*)(object))->get_vpiParent())->getUhdmType(), ((process*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmproperty_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((property_decl*)(object))->get_vpiParent())->getUhdmType(), ((property_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmsequence_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((sequence_decl*)(object))->get_vpiParent())->getUhdmType(), ((sequence_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((virtual_interface_var*)(object))->get_vpiParent())->getUhdmType(), ((virtual_interface_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmlet_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((let_decl*)(object))->get_vpiParent())->getUhdmType(), ((let_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmbegin) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((begin*)(object))->get_vpiParent())->getUhdmType(), ((begin*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmnamed_begin) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((named_begin*)(object))->get_vpiParent())->getUhdmType(), ((named_begin*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmnamed_fork) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((named_fork*)(object))->get_vpiParent())->getUhdmType(), ((named_fork*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmfork_stmt) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((fork_stmt*)(object))->get_vpiParent())->getUhdmType(), ((fork_stmt*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmfor_stmt) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((for_stmt*)(object))->get_vpiParent())->getUhdmType(), ((for_stmt*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((foreach_stmt*)(object))->get_vpiParent())->getUhdmType(), ((foreach_stmt*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmgen_scope) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((gen_scope*)(object))->get_vpiParent())->getUhdmType(), ((gen_scope*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmdistribution) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((distribution*)(object))->get_vpiParent())->getUhdmType(), ((distribution*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmoperation) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((operation*)(object))->get_vpiParent())->getUhdmType(), ((operation*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmpart_select) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((part_select*)(object))->get_vpiParent())->getUhdmType(), ((part_select*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmref_obj) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ref_obj*)(object))->get_vpiParent())->getUhdmType(), ((ref_obj*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmref_obj) {
     if (type == vpiTypespec) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ref_obj*)(object))->get_typespec())->getUhdmType(), ((ref_obj*)(object))->get_typespec());
 } 
}

 if (handle->type == uhdmref_obj) {
     if (type == vpiInstance) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ref_obj*)(object))->get_instance())->getUhdmType(), ((ref_obj*)(object))->get_instance());
 } 
}

 if (handle->type == uhdmref_obj) {
     if (type == vpiTaskFunc) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ref_obj*)(object))->get_task_func())->getUhdmType(), ((ref_obj*)(object))->get_task_func());
 } 
}

 if (handle->type == uhdmref_obj) {
     if (type == vpiActual) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ref_obj*)(object))->get_actual_group())->getUhdmType(), ((ref_obj*)(object))->get_actual_group());
 } 
}

 if (handle->type == uhdmvar_select) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((var_select*)(object))->get_vpiParent())->getUhdmType(), ((var_select*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiTypespec) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_typespec())->getUhdmType(), ((variables*)(object))->get_typespec());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiInstance) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_instance())->getUhdmType(), ((variables*)(object))->get_instance());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiScope) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_scope())->getUhdmType(), ((variables*)(object))->get_scope());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiExpr) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_expr())->getUhdmType(), ((variables*)(object))->get_expr());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiPathTerm) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_path_term())->getUhdmType(), ((variables*)(object))->get_path_term());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiTchkTerm) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_tchk_term())->getUhdmType(), ((variables*)(object))->get_tchk_term());
 } 
}

 if (handle->type == uhdmvariables) {
     if (type == vpiModule) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((variables*)(object))->get_module())->getUhdmType(), ((variables*)(object))->get_module());
 } 
}

 if (handle->type == uhdmshort_real_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((short_real_var*)(object))->get_vpiParent())->getUhdmType(), ((short_real_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmreal_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((real_var*)(object))->get_vpiParent())->getUhdmType(), ((real_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmbyte_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((byte_var*)(object))->get_vpiParent())->getUhdmType(), ((byte_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmshort_int_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((short_int_var*)(object))->get_vpiParent())->getUhdmType(), ((short_int_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmint_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((int_var*)(object))->get_vpiParent())->getUhdmType(), ((int_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmlong_int_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((long_int_var*)(object))->get_vpiParent())->getUhdmType(), ((long_int_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminteger_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((integer_var*)(object))->get_vpiParent())->getUhdmType(), ((integer_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtime_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((time_var*)(object))->get_vpiParent())->getUhdmType(), ((time_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmarray_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((array_var*)(object))->get_vpiParent())->getUhdmType(), ((array_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmarray_var) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((array_var*)(object))->get_left_expr())->getUhdmType(), ((array_var*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmarray_var) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((array_var*)(object))->get_right_expr())->getUhdmType(), ((array_var*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmarray_var) {
     if (type == vpiVarSelect) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((array_var*)(object))->get_var_selects())->getUhdmType(), ((array_var*)(object))->get_var_selects());
 } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_var*)(object))->get_vpiParent())->getUhdmType(), ((packed_array_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_var*)(object))->get_left_expr())->getUhdmType(), ((packed_array_var*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_var*)(object))->get_right_expr())->getUhdmType(), ((packed_array_var*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmbit_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((bit_var*)(object))->get_vpiParent())->getUhdmType(), ((bit_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmbit_var) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((bit_var*)(object))->get_left_expr())->getUhdmType(), ((bit_var*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmbit_var) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((bit_var*)(object))->get_right_expr())->getUhdmType(), ((bit_var*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmlogic_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_var*)(object))->get_vpiParent())->getUhdmType(), ((logic_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmlogic_var) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_var*)(object))->get_left_expr())->getUhdmType(), ((logic_var*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmlogic_var) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_var*)(object))->get_right_expr())->getUhdmType(), ((logic_var*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmstruct_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((struct_var*)(object))->get_vpiParent())->getUhdmType(), ((struct_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmunion_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((union_var*)(object))->get_vpiParent())->getUhdmType(), ((union_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmenum_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((enum_var*)(object))->get_vpiParent())->getUhdmType(), ((enum_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmstring_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((string_var*)(object))->get_vpiParent())->getUhdmType(), ((string_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmchandle_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((chandle_var*)(object))->get_vpiParent())->getUhdmType(), ((chandle_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclass_var) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((class_var*)(object))->get_vpiParent())->getUhdmType(), ((class_var*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmvar_bit) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((var_bit*)(object))->get_vpiParent())->getUhdmType(), ((var_bit*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmvar_bit) {
     if (type == vpiIndex) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((var_bit*)(object))->get_expr_index())->getUhdmType(), ((var_bit*)(object))->get_expr_index());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_left_expr())->getUhdmType(), ((task_func*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_right_expr())->getUhdmType(), ((task_func*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiStmt) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_stmt())->getUhdmType(), ((task_func*)(object))->get_stmt());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiClassDefn) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_class_defn())->getUhdmType(), ((task_func*)(object))->get_class_defn());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_ref_obj())->getUhdmType(), ((task_func*)(object))->get_ref_obj());
 } 
}

 if (handle->type == uhdmtask_func) {
     if (type == vpiIODecl) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task_func*)(object))->get_io_decl())->getUhdmType(), ((task_func*)(object))->get_io_decl());
 } 
}

 if (handle->type == uhdmtask) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((task*)(object))->get_vpiParent())->getUhdmType(), ((task*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmfunction) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((function*)(object))->get_vpiParent())->getUhdmType(), ((function*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodport) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((modport*)(object))->get_vpiParent())->getUhdmType(), ((modport*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodport) {
     if (type == vpiInterface) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((modport*)(object))->get_interface())->getUhdmType(), ((modport*)(object))->get_interface());
 } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface_tf_decl*)(object))->get_vpiParent())->getUhdmType(), ((interface_tf_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmcont_assign) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((cont_assign*)(object))->get_vpiParent())->getUhdmType(), ((cont_assign*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmports) {
     if (type == vpiTypedef) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ports*)(object))->get_typespecs())->getUhdmType(), ((ports*)(object))->get_typespecs());
 } 
}

 if (handle->type == uhdmports) {
     if (type == vpiInstance) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ports*)(object))->get_instance())->getUhdmType(), ((ports*)(object))->get_instance());
 } 
}

 if (handle->type == uhdmports) {
     if (type == vpiModule) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ports*)(object))->get_module())->getUhdmType(), ((ports*)(object))->get_module());
 } 
}

 if (handle->type == uhdmports) {
     if (type == vpiHighConn) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ports*)(object))->get_high_conn())->getUhdmType(), ((ports*)(object))->get_high_conn());
 } 
}

 if (handle->type == uhdmports) {
     if (type == vpiLowConn) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((ports*)(object))->get_low_conn())->getUhdmType(), ((ports*)(object))->get_low_conn());
 } 
}

 if (handle->type == uhdmport) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((port*)(object))->get_vpiParent())->getUhdmType(), ((port*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmport_bit) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((port_bit*)(object))->get_vpiParent())->getUhdmType(), ((port_bit*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprimitive) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((primitive*)(object))->get_vpiParent())->getUhdmType(), ((primitive*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmod_path) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((mod_path*)(object))->get_vpiParent())->getUhdmType(), ((mod_path*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtchk) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((tchk*)(object))->get_vpiParent())->getUhdmType(), ((tchk*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmdef_param) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((def_param*)(object))->get_vpiParent())->getUhdmType(), ((def_param*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmrange) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((range*)(object))->get_vpiParent())->getUhdmType(), ((range*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmudp_defn) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((udp_defn*)(object))->get_vpiParent())->getUhdmType(), ((udp_defn*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_vpiParent())->getUhdmType(), ((io_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_left_expr())->getUhdmType(), ((io_decl*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_right_expr())->getUhdmType(), ((io_decl*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiTypedef) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_typespecs())->getUhdmType(), ((io_decl*)(object))->get_typespecs());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiInstance) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_instance())->getUhdmType(), ((io_decl*)(object))->get_instance());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiTaskFunc) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_task_func())->getUhdmType(), ((io_decl*)(object))->get_task_func());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiUdpDefn) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_udp_defn())->getUhdmType(), ((io_decl*)(object))->get_udp_defn());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiModule) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_module())->getUhdmType(), ((io_decl*)(object))->get_module());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiExpr) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((io_decl*)(object))->get_expr())->getUhdmType(), ((io_decl*)(object))->get_expr());
 } 
}

 if (handle->type == uhdmalias_stmt) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((alias_stmt*)(object))->get_vpiParent())->getUhdmType(), ((alias_stmt*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclocking_block) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((clocking_block*)(object))->get_vpiParent())->getUhdmType(), ((clocking_block*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmparam_assign) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((param_assign*)(object))->get_vpiParent())->getUhdmType(), ((param_assign*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminstance_array) {
     if (type == vpiExpr) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((instance_array*)(object))->get_expr())->getUhdmType(), ((instance_array*)(object))->get_expr());
 } 
}

 if (handle->type == uhdminstance_array) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((instance_array*)(object))->get_left_expr())->getUhdmType(), ((instance_array*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdminstance_array) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((instance_array*)(object))->get_right_expr())->getUhdmType(), ((instance_array*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdminterface_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface_array*)(object))->get_vpiParent())->getUhdmType(), ((interface_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprogram_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((program_array*)(object))->get_vpiParent())->getUhdmType(), ((program_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module_array*)(object))->get_vpiParent())->getUhdmType(), ((module_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprimitive_array) {
     if (type == vpiDelay) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((primitive_array*)(object))->get_delay())->getUhdmType(), ((primitive_array*)(object))->get_delay());
 } 
}

 if (handle->type == uhdmgate_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((gate_array*)(object))->get_vpiParent())->getUhdmType(), ((gate_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmswitch_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((switch_array*)(object))->get_vpiParent())->getUhdmType(), ((switch_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmudp_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((udp_array*)(object))->get_vpiParent())->getUhdmType(), ((udp_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprim_term) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((prim_term*)(object))->get_vpiParent())->getUhdmType(), ((prim_term*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmpath_term) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((path_term*)(object))->get_vpiParent())->getUhdmType(), ((path_term*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtchk_term) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((tchk_term*)(object))->get_vpiParent())->getUhdmType(), ((tchk_term*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmnets) {
     if (type == vpiSimNet) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((nets*)(object))->get_sim_nets())->getUhdmType(), ((nets*)(object))->get_sim_nets());
 } 
}

 if (handle->type == uhdmnets) {
     if (type == vpiTypespec) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((nets*)(object))->get_typespec())->getUhdmType(), ((nets*)(object))->get_typespec());
 } 
}

 if (handle->type == uhdmnets) {
     if (type == vpiModule) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((nets*)(object))->get_module())->getUhdmType(), ((nets*)(object))->get_module());
 } 
}

 if (handle->type == uhdmnet_bit) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((net_bit*)(object))->get_vpiParent())->getUhdmType(), ((net_bit*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmstruct_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((struct_net*)(object))->get_vpiParent())->getUhdmType(), ((struct_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmenum_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((enum_net*)(object))->get_vpiParent())->getUhdmType(), ((enum_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminteger_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((integer_net*)(object))->get_vpiParent())->getUhdmType(), ((integer_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtime_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((time_net*)(object))->get_vpiParent())->getUhdmType(), ((time_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmlogic_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_net*)(object))->get_vpiParent())->getUhdmType(), ((logic_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmlogic_net) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_net*)(object))->get_left_expr())->getUhdmType(), ((logic_net*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmlogic_net) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((logic_net*)(object))->get_right_expr())->getUhdmType(), ((logic_net*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmarray_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((array_net*)(object))->get_vpiParent())->getUhdmType(), ((array_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_net*)(object))->get_vpiParent())->getUhdmType(), ((packed_array_net*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (type == vpiLeftRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_net*)(object))->get_left_expr())->getUhdmType(), ((packed_array_net*)(object))->get_left_expr());
 } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (type == vpiRightRange) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((packed_array_net*)(object))->get_right_expr())->getUhdmType(), ((packed_array_net*)(object))->get_right_expr());
 } 
}

 if (handle->type == uhdmnamed_event) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((named_event*)(object))->get_vpiParent())->getUhdmType(), ((named_event*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((named_event_array*)(object))->get_vpiParent())->getUhdmType(), ((named_event_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmspec_param) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((spec_param*)(object))->get_vpiParent())->getUhdmType(), ((spec_param*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclass_defn) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((class_defn*)(object))->get_vpiParent())->getUhdmType(), ((class_defn*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclass_typespec) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((class_typespec*)(object))->get_vpiParent())->getUhdmType(), ((class_typespec*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclass_obj) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((class_obj*)(object))->get_vpiParent())->getUhdmType(), ((class_obj*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminstance) {
     if (type == vpiInstance) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((instance*)(object))->get_instance())->getUhdmType(), ((instance*)(object))->get_instance());
 } 
}

 if (handle->type == uhdminstance) {
     if (type == vpiModule) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((instance*)(object))->get_module())->getUhdmType(), ((instance*)(object))->get_module());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface*)(object))->get_vpiParent())->getUhdmType(), ((interface*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiDefaultDisableIff) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface*)(object))->get_expr_dist())->getUhdmType(), ((interface*)(object))->get_expr_dist());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiInstanceArray) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface*)(object))->get_instance_array())->getUhdmType(), ((interface*)(object))->get_instance_array());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiGlobalClocking) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface*)(object))->get_global_clocking())->getUhdmType(), ((interface*)(object))->get_global_clocking());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((interface*)(object))->get_default_clocking())->getUhdmType(), ((interface*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((program*)(object))->get_vpiParent())->getUhdmType(), ((program*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiInstanceArray) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((program*)(object))->get_instance_array())->getUhdmType(), ((program*)(object))->get_instance_array());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiDefaultDisableIff) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((program*)(object))->get_expr_dist())->getUhdmType(), ((program*)(object))->get_expr_dist());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((program*)(object))->get_default_clocking())->getUhdmType(), ((program*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdmpackage) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((package*)(object))->get_vpiParent())->getUhdmType(), ((package*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_vpiParent())->getUhdmType(), ((module*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiDefaultDisableIff) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_expr_dist())->getUhdmType(), ((module*)(object))->get_expr_dist());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiInstanceArray) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_instance_array())->getUhdmType(), ((module*)(object))->get_instance_array());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiGlobalClocking) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_global_clocking())->getUhdmType(), ((module*)(object))->get_global_clocking());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_default_clocking())->getUhdmType(), ((module*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiModuleArray) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((module*)(object))->get_module_array())->getUhdmType(), ((module*)(object))->get_module_array());
 } 
}

 if (handle->type == uhdmdesign) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((BaseClass*)((design*)(object))->get_vpiParent())->getUhdmType(), ((design*)(object))->get_vpiParent());
 } 
}

  std::cout << "VPI ERROR: Bad usage of vpi_handle" << std::endl;    
  return 0;
}

vpiHandle vpi_handle_multi (PLI_INT32 type,
                            vpiHandle   refHandle1,
                            vpiHandle   refHandle2,
                            ... ) {
  return 0;
}

vpiHandle vpi_iterate (PLI_INT32 type, vpiHandle refHandle) {
  const uhdm_handle* const handle = (uhdm_handle*) refHandle;
  const BaseClass*  object = (BaseClass*) handle->object;
  
    
 if (handle->type == uhdmscope) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmscope) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiStmt) {
 if (((begin*)(object))->get_stmts())
 return (vpiHandle) new uhdm_handle(uhdmstmts, ((begin*)(object))->get_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbegin) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiStmt) {
 if (((named_begin*)(object))->get_stmts())
 return (vpiHandle) new uhdm_handle(uhdmstmts, ((named_begin*)(object))->get_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_begin) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiStmt) {
 if (((named_fork*)(object))->get_stmts())
 return (vpiHandle) new uhdm_handle(uhdmstmts, ((named_fork*)(object))->get_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnamed_fork) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiStmt) {
 if (((fork_stmt*)(object))->get_stmts())
 return (vpiHandle) new uhdm_handle(uhdmstmts, ((fork_stmt*)(object))->get_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfork_stmt) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfor_stmt) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmforeach_stmt) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgen_scope) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmoperation) {
 if (type == vpiOperand) {
 if (((operation*)(object))->get_operands())
 return (vpiHandle) new uhdm_handle(uhdmoperands, ((operation*)(object))->get_operands());
 else return 0;
  }
 }

    
 if (handle->type == uhdmref_obj) {
 if (type == vpiPortInst) {
 if (((ref_obj*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((ref_obj*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvariables) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_real_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmreal_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbyte_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmshort_int_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmint_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlong_int_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiReg) {
 if (((array_var*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((array_var*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiRange) {
 if (((array_var*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((array_var*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiRange) {
 if (((packed_array_var*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((packed_array_var*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiBit) {
 if (((packed_array_var*)(object))->get_var_bits())
 return (vpiHandle) new uhdm_handle(uhdmvar_bits, ((packed_array_var*)(object))->get_var_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiRange) {
 if (((bit_var*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((bit_var*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiBit) {
 if (((bit_var*)(object))->get_var_bits())
 return (vpiHandle) new uhdm_handle(uhdmvar_bits, ((bit_var*)(object))->get_var_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmbit_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiRange) {
 if (((logic_var*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((logic_var*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiBit) {
 if (((logic_var*)(object))->get_var_bits())
 return (vpiHandle) new uhdm_handle(uhdmvar_bits, ((logic_var*)(object))->get_var_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiMember) {
 if (((struct_var*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((struct_var*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiBit) {
 if (((struct_var*)(object))->get_var_bits())
 return (vpiHandle) new uhdm_handle(uhdmvar_bits, ((struct_var*)(object))->get_var_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiMember) {
 if (((union_var*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((union_var*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiBit) {
 if (((union_var*)(object))->get_var_bits())
 return (vpiHandle) new uhdm_handle(uhdmvar_bits, ((union_var*)(object))->get_var_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmunion_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstring_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmchandle_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_var) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiIndex) {
 if (((var_bit*)(object))->get_expr_indexes())
 return (vpiHandle) new uhdm_handle(uhdmexpr_indexes, ((var_bit*)(object))->get_expr_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiPortInst) {
 if (((variables*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((variables*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiDriver) {
 if (((variables*)(object))->get_variable_drivers())
 return (vpiHandle) new uhdm_handle(uhdmvariable_drivers, ((variables*)(object))->get_variable_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiLoad) {
 if (((variables*)(object))->get_variable_loads())
 return (vpiHandle) new uhdm_handle(uhdmvariable_loads, ((variables*)(object))->get_variable_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiIndex) {
 if (((variables*)(object))->get_indexes())
 return (vpiHandle) new uhdm_handle(uhdmindexes, ((variables*)(object))->get_indexes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiPrimTerm) {
 if (((variables*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((variables*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmvar_bit) {
 if (type == vpiContAssign) {
 if (((variables*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((variables*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask_func) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtask) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmfunction) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodport) {
 if (type == vpiIODecl) {
 if (((modport*)(object))->get_io_decls())
 return (vpiHandle) new uhdm_handle(uhdmio_decls, ((modport*)(object))->get_io_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_tf_decl) {
 if (type == vpiTask) {
 if (((interface_tf_decl*)(object))->get_tasks())
 return (vpiHandle) new uhdm_handle(uhdmtasks, ((interface_tf_decl*)(object))->get_tasks());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_tf_decl) {
 if (type == vpiFunction) {
 if (((interface_tf_decl*)(object))->get_functions())
 return (vpiHandle) new uhdm_handle(uhdmfunctions, ((interface_tf_decl*)(object))->get_functions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmport) {
 if (type == vpiBit) {
 if (((port*)(object))->get_bits())
 return (vpiHandle) new uhdm_handle(uhdmbits, ((port*)(object))->get_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmio_decl) {
 if (type == vpiRange) {
 if (((io_decl*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((io_decl*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclocking_block) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_array) {
 if (type == vpiParamAssign) {
 if (((interface_array*)(object))->get_param_assigns())
 return (vpiHandle) new uhdm_handle(uhdmparam_assigns, ((interface_array*)(object))->get_param_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule_array) {
 if (type == vpiParamAssign) {
 if (((module_array*)(object))->get_param_assigns())
 return (vpiHandle) new uhdm_handle(uhdmparam_assigns, ((module_array*)(object))->get_param_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprimitive_array) {
 if (type == vpiPrimitive) {
 if (((primitive_array*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((primitive_array*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprimitive_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprimitive_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprimitive_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgate_array) {
 if (type == vpiPrimitive) {
 if (((primitive_array*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((primitive_array*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgate_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgate_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmgate_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmswitch_array) {
 if (type == vpiPrimitive) {
 if (((primitive_array*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((primitive_array*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmswitch_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmswitch_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmswitch_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmudp_array) {
 if (type == vpiPrimitive) {
 if (((primitive_array*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((primitive_array*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmudp_array) {
 if (type == vpiInstance) {
 if (((instance_array*)(object))->get_instances())
 return (vpiHandle) new uhdm_handle(uhdminstances, ((instance_array*)(object))->get_instances());
 else return 0;
  }
 }

    
 if (handle->type == uhdmudp_array) {
 if (type == vpiRange) {
 if (((instance_array*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((instance_array*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmudp_array) {
 if (type == vpiModule) {
 if (((instance_array*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((instance_array*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnets) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiIndex) {
 if (((net_bit*)(object))->get_expr())
 return (vpiHandle) new uhdm_handle(uhdmexpr, ((net_bit*)(object))->get_expr());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet_bit) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmnet) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiMember) {
 if (((struct_net*)(object))->get_nets())
 return (vpiHandle) new uhdm_handle(uhdmnets, ((struct_net*)(object))->get_nets());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiIndex) {
 if (((struct_net*)(object))->get_expr())
 return (vpiHandle) new uhdm_handle(uhdmexpr, ((struct_net*)(object))->get_expr());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmstruct_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiIndex) {
 if (((enum_net*)(object))->get_expr())
 return (vpiHandle) new uhdm_handle(uhdmexpr, ((enum_net*)(object))->get_expr());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmenum_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdminteger_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmtime_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiRange) {
 if (((logic_net*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((logic_net*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmlogic_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiNet) {
 if (((array_net*)(object))->get_nets())
 return (vpiHandle) new uhdm_handle(uhdmnets, ((array_net*)(object))->get_nets());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiRange) {
 if (((array_net*)(object))->get_range())
 return (vpiHandle) new uhdm_handle(uhdmrange, ((array_net*)(object))->get_range());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmarray_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiIndex) {
 if (((packed_array_net*)(object))->get_expr())
 return (vpiHandle) new uhdm_handle(uhdmexpr, ((packed_array_net*)(object))->get_expr());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiRange) {
 if (((packed_array_net*)(object))->get_ranges())
 return (vpiHandle) new uhdm_handle(uhdmranges, ((packed_array_net*)(object))->get_ranges());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiElement) {
 if (((packed_array_net*)(object))->get_elements())
 return (vpiHandle) new uhdm_handle(uhdmelements, ((packed_array_net*)(object))->get_elements());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiBit) {
 if (((net*)(object))->get_net_bits())
 return (vpiHandle) new uhdm_handle(uhdmnet_bits, ((net*)(object))->get_net_bits());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiPortInst) {
 if (((nets*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((nets*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiDriver) {
 if (((nets*)(object))->get_drivers())
 return (vpiHandle) new uhdm_handle(uhdmdrivers, ((nets*)(object))->get_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiLoad) {
 if (((nets*)(object))->get_loads())
 return (vpiHandle) new uhdm_handle(uhdmloads, ((nets*)(object))->get_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiLocalDriver) {
 if (((nets*)(object))->get_local_drivers())
 return (vpiHandle) new uhdm_handle(uhdmlocal_drivers, ((nets*)(object))->get_local_drivers());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiLocalLoad) {
 if (((nets*)(object))->get_local_loads())
 return (vpiHandle) new uhdm_handle(uhdmlocal_loads, ((nets*)(object))->get_local_loads());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiPrimTerm) {
 if (((nets*)(object))->get_prim_terms())
 return (vpiHandle) new uhdm_handle(uhdmprim_terms, ((nets*)(object))->get_prim_terms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiContAssign) {
 if (((nets*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((nets*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiPathTerm) {
 if (((nets*)(object))->get_path_term())
 return (vpiHandle) new uhdm_handle(uhdmpath_term, ((nets*)(object))->get_path_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpacked_array_net) {
 if (type == vpiTchkTerm) {
 if (((nets*)(object))->get_tchk_term())
 return (vpiHandle) new uhdm_handle(uhdmtchk_term, ((nets*)(object))->get_tchk_term());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_defn) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_typespec) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmclass_obj) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiTaskFunc) {
 if (((instance*)(object))->get_task_func())
 return (vpiHandle) new uhdm_handle(uhdmtask_func, ((instance*)(object))->get_task_func());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiNet) {
 if (((instance*)(object))->get_net())
 return (vpiHandle) new uhdm_handle(uhdmnet, ((instance*)(object))->get_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiArrayNet) {
 if (((instance*)(object))->get_array_net())
 return (vpiHandle) new uhdm_handle(uhdmarray_net, ((instance*)(object))->get_array_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiAssertion) {
 if (((instance*)(object))->get_assertion())
 return (vpiHandle) new uhdm_handle(uhdmassertion, ((instance*)(object))->get_assertion());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiClassDefn) {
 if (((instance*)(object))->get_class_defn())
 return (vpiHandle) new uhdm_handle(uhdmclass_defn, ((instance*)(object))->get_class_defn());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiProgram) {
 if (((instance*)(object))->get_programs())
 return (vpiHandle) new uhdm_handle(uhdmprograms, ((instance*)(object))->get_programs());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiProgramArray) {
 if (((instance*)(object))->get_program_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprogram_arrays, ((instance*)(object))->get_program_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event, ((instance*)(object))->get_named_event());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event_array())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_array, ((instance*)(object))->get_named_event_array());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiSpecParam) {
 if (((instance*)(object))->get_spec_param())
 return (vpiHandle) new uhdm_handle(uhdmspec_param, ((instance*)(object))->get_spec_param());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminstance) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiProcess) {
 if (((interface*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((interface*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiInterfaceTfDecl) {
 if (((interface*)(object))->get_interface_tf_decls())
 return (vpiHandle) new uhdm_handle(uhdminterface_tf_decls, ((interface*)(object))->get_interface_tf_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiModport) {
 if (((interface*)(object))->get_modports())
 return (vpiHandle) new uhdm_handle(uhdmmodports, ((interface*)(object))->get_modports());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiModPath) {
 if (((interface*)(object))->get_mod_paths())
 return (vpiHandle) new uhdm_handle(uhdmmod_paths, ((interface*)(object))->get_mod_paths());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiContAssign) {
 if (((interface*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((interface*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == uhdminterface) {
 if (((interface*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((interface*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == uhdminterface_array) {
 if (((interface*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((interface*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiTaskFunc) {
 if (((instance*)(object))->get_task_func())
 return (vpiHandle) new uhdm_handle(uhdmtask_func, ((instance*)(object))->get_task_func());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiNet) {
 if (((instance*)(object))->get_net())
 return (vpiHandle) new uhdm_handle(uhdmnet, ((instance*)(object))->get_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiArrayNet) {
 if (((instance*)(object))->get_array_net())
 return (vpiHandle) new uhdm_handle(uhdmarray_net, ((instance*)(object))->get_array_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiAssertion) {
 if (((instance*)(object))->get_assertion())
 return (vpiHandle) new uhdm_handle(uhdmassertion, ((instance*)(object))->get_assertion());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiClassDefn) {
 if (((instance*)(object))->get_class_defn())
 return (vpiHandle) new uhdm_handle(uhdmclass_defn, ((instance*)(object))->get_class_defn());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiProgram) {
 if (((instance*)(object))->get_programs())
 return (vpiHandle) new uhdm_handle(uhdmprograms, ((instance*)(object))->get_programs());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiProgramArray) {
 if (((instance*)(object))->get_program_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprogram_arrays, ((instance*)(object))->get_program_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event, ((instance*)(object))->get_named_event());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event_array())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_array, ((instance*)(object))->get_named_event_array());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiSpecParam) {
 if (((instance*)(object))->get_spec_param())
 return (vpiHandle) new uhdm_handle(uhdmspec_param, ((instance*)(object))->get_spec_param());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiProcess) {
 if (((program*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((program*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdminterface) {
 if (((program*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((program*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdminterface_array) {
 if (((program*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((program*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiContAssign) {
 if (((program*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((program*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdmclocking_block) {
 if (((program*)(object))->get_clocking_blocks())
 return (vpiHandle) new uhdm_handle(uhdmclocking_blocks, ((program*)(object))->get_clocking_blocks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiTaskFunc) {
 if (((instance*)(object))->get_task_func())
 return (vpiHandle) new uhdm_handle(uhdmtask_func, ((instance*)(object))->get_task_func());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiNet) {
 if (((instance*)(object))->get_net())
 return (vpiHandle) new uhdm_handle(uhdmnet, ((instance*)(object))->get_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiArrayNet) {
 if (((instance*)(object))->get_array_net())
 return (vpiHandle) new uhdm_handle(uhdmarray_net, ((instance*)(object))->get_array_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiAssertion) {
 if (((instance*)(object))->get_assertion())
 return (vpiHandle) new uhdm_handle(uhdmassertion, ((instance*)(object))->get_assertion());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiClassDefn) {
 if (((instance*)(object))->get_class_defn())
 return (vpiHandle) new uhdm_handle(uhdmclass_defn, ((instance*)(object))->get_class_defn());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiProgram) {
 if (((instance*)(object))->get_programs())
 return (vpiHandle) new uhdm_handle(uhdmprograms, ((instance*)(object))->get_programs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiProgramArray) {
 if (((instance*)(object))->get_program_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprogram_arrays, ((instance*)(object))->get_program_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event, ((instance*)(object))->get_named_event());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event_array())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_array, ((instance*)(object))->get_named_event_array());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiSpecParam) {
 if (((instance*)(object))->get_spec_param())
 return (vpiHandle) new uhdm_handle(uhdmspec_param, ((instance*)(object))->get_spec_param());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiTaskFunc) {
 if (((instance*)(object))->get_task_func())
 return (vpiHandle) new uhdm_handle(uhdmtask_func, ((instance*)(object))->get_task_func());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiNet) {
 if (((instance*)(object))->get_net())
 return (vpiHandle) new uhdm_handle(uhdmnet, ((instance*)(object))->get_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiArrayNet) {
 if (((instance*)(object))->get_array_net())
 return (vpiHandle) new uhdm_handle(uhdmarray_net, ((instance*)(object))->get_array_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiAssertion) {
 if (((instance*)(object))->get_assertion())
 return (vpiHandle) new uhdm_handle(uhdmassertion, ((instance*)(object))->get_assertion());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiClassDefn) {
 if (((instance*)(object))->get_class_defn())
 return (vpiHandle) new uhdm_handle(uhdmclass_defn, ((instance*)(object))->get_class_defn());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiProgram) {
 if (((instance*)(object))->get_programs())
 return (vpiHandle) new uhdm_handle(uhdmprograms, ((instance*)(object))->get_programs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiProgramArray) {
 if (((instance*)(object))->get_program_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprogram_arrays, ((instance*)(object))->get_program_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event, ((instance*)(object))->get_named_event());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event_array())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_array, ((instance*)(object))->get_named_event_array());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiSpecParam) {
 if (((instance*)(object))->get_spec_param())
 return (vpiHandle) new uhdm_handle(uhdmspec_param, ((instance*)(object))->get_spec_param());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmpackage) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiProcess) {
 if (((module*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((module*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPrimitive) {
 if (((module*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((module*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPrimitiveArray) {
 if (((module*)(object))->get_primitive_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprimitive_arrays, ((module*)(object))->get_primitive_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPort) {
 if (((module*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((module*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdminterface) {
 if (((module*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((module*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdminterface_array) {
 if (((module*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((module*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiContAssign) {
 if (((module*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((module*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModule) {
 if (((module*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((module*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModuleArray) {
 if (((module*)(object))->get_module_arrays())
 return (vpiHandle) new uhdm_handle(uhdmmodule_arrays, ((module*)(object))->get_module_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModPath) {
 if (((module*)(object))->get_mod_paths())
 return (vpiHandle) new uhdm_handle(uhdmmod_paths, ((module*)(object))->get_mod_paths());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiTchk) {
 if (((module*)(object))->get_tchks())
 return (vpiHandle) new uhdm_handle(uhdmtchks, ((module*)(object))->get_tchks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiDefParam) {
 if (((module*)(object))->get_def_params())
 return (vpiHandle) new uhdm_handle(uhdmdef_params, ((module*)(object))->get_def_params());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiIODecl) {
 if (((module*)(object))->get_io_decls())
 return (vpiHandle) new uhdm_handle(uhdmio_decls, ((module*)(object))->get_io_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdmalias_stmt) {
 if (((module*)(object))->get_alias_stmts())
 return (vpiHandle) new uhdm_handle(uhdmalias_stmts, ((module*)(object))->get_alias_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdmclocking_block) {
 if (((module*)(object))->get_clocking_blocks())
 return (vpiHandle) new uhdm_handle(uhdmclocking_blocks, ((module*)(object))->get_clocking_blocks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiTaskFunc) {
 if (((instance*)(object))->get_task_func())
 return (vpiHandle) new uhdm_handle(uhdmtask_func, ((instance*)(object))->get_task_func());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiNet) {
 if (((instance*)(object))->get_net())
 return (vpiHandle) new uhdm_handle(uhdmnet, ((instance*)(object))->get_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiArrayNet) {
 if (((instance*)(object))->get_array_net())
 return (vpiHandle) new uhdm_handle(uhdmarray_net, ((instance*)(object))->get_array_net());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiAssertion) {
 if (((instance*)(object))->get_assertion())
 return (vpiHandle) new uhdm_handle(uhdmassertion, ((instance*)(object))->get_assertion());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiClassDefn) {
 if (((instance*)(object))->get_class_defn())
 return (vpiHandle) new uhdm_handle(uhdmclass_defn, ((instance*)(object))->get_class_defn());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiProgram) {
 if (((instance*)(object))->get_programs())
 return (vpiHandle) new uhdm_handle(uhdmprograms, ((instance*)(object))->get_programs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiProgramArray) {
 if (((instance*)(object))->get_program_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprogram_arrays, ((instance*)(object))->get_program_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event, ((instance*)(object))->get_named_event());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiNamedEvent) {
 if (((instance*)(object))->get_named_event_array())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_array, ((instance*)(object))->get_named_event_array());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiSpecParam) {
 if (((instance*)(object))->get_spec_param())
 return (vpiHandle) new uhdm_handle(uhdmspec_param, ((instance*)(object))->get_spec_param());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiConcurrentAssertions) {
 if (((scope*)(object))->get_concurrent_assertions())
 return (vpiHandle) new uhdm_handle(uhdmconcurrent_assertions, ((scope*)(object))->get_concurrent_assertions());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiVariables) {
 if (((scope*)(object))->get_variables())
 return (vpiHandle) new uhdm_handle(uhdmvariables, ((scope*)(object))->get_variables());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiParameter) {
 if (((scope*)(object))->get_parameters())
 return (vpiHandle) new uhdm_handle(uhdmparameters, ((scope*)(object))->get_parameters());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiInternalScope) {
 if (((scope*)(object))->get_scopes())
 return (vpiHandle) new uhdm_handle(uhdmscopes, ((scope*)(object))->get_scopes());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiTypedef) {
 if (((scope*)(object))->get_typespecs())
 return (vpiHandle) new uhdm_handle(uhdmtypespecs, ((scope*)(object))->get_typespecs());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPropertyDecl) {
 if (((scope*)(object))->get_property_decls())
 return (vpiHandle) new uhdm_handle(uhdmproperty_decls, ((scope*)(object))->get_property_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiSequenceDecl) {
 if (((scope*)(object))->get_sequence_decls())
 return (vpiHandle) new uhdm_handle(uhdmsequence_decls, ((scope*)(object))->get_sequence_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiNamedEvent) {
 if (((scope*)(object))->get_named_events())
 return (vpiHandle) new uhdm_handle(uhdmnamed_events, ((scope*)(object))->get_named_events());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiNamedEventArray) {
 if (((scope*)(object))->get_named_event_arrays())
 return (vpiHandle) new uhdm_handle(uhdmnamed_event_arrays, ((scope*)(object))->get_named_event_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiVirtualInterfaceVar) {
 if (((scope*)(object))->get_virtual_interface_vars())
 return (vpiHandle) new uhdm_handle(uhdmvirtual_interface_vars, ((scope*)(object))->get_virtual_interface_vars());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiReg) {
 if (((scope*)(object))->get_logic_var())
 return (vpiHandle) new uhdm_handle(uhdmlogic_var, ((scope*)(object))->get_logic_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiRegArray) {
 if (((scope*)(object))->get_array_var())
 return (vpiHandle) new uhdm_handle(uhdmarray_var, ((scope*)(object))->get_array_var());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiMemory) {
 if (((scope*)(object))->get_array_var_mem())
 return (vpiHandle) new uhdm_handle(uhdmarray_var_mem, ((scope*)(object))->get_array_var_mem());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiLetDecl) {
 if (((scope*)(object))->get_let_decls())
 return (vpiHandle) new uhdm_handle(uhdmlet_decls, ((scope*)(object))->get_let_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiImport) {
 if (((scope*)(object))->get_instance_items())
 return (vpiHandle) new uhdm_handle(uhdminstance_items, ((scope*)(object))->get_instance_items());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallModules) {
 if (((design*)(object))->get_allModules())
 return (vpiHandle) new uhdm_handle(uhdmallModules, ((design*)(object))->get_allModules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmtopModules) {
 if (((design*)(object))->get_topModules())
 return (vpiHandle) new uhdm_handle(uhdmtopModules, ((design*)(object))->get_topModules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallPrograms) {
 if (((design*)(object))->get_allPrograms())
 return (vpiHandle) new uhdm_handle(uhdmallPrograms, ((design*)(object))->get_allPrograms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallPackages) {
 if (((design*)(object))->get_allPackages())
 return (vpiHandle) new uhdm_handle(uhdmallPackages, ((design*)(object))->get_allPackages());
 else return 0;
  }
 }

  std::cout << "VPI ERROR: Bad usage of vpi_iterate" << std::endl;    
  return 0;   
}

vpiHandle vpi_scan (vpiHandle iterator) {
  if (!iterator) return 0;
  uhdm_handle* handle = (uhdm_handle*) iterator;
  const void* vect = handle->object;
  

  if (handle->type == uhdmconcurrent_assertions) {
 VectorOfconcurrent_assertion* the_vec = (VectorOfconcurrent_assertion*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariables) {
 VectorOfvariables* the_vec = (VectorOfvariables*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmparameters) {
 VectorOfparameters* the_vec = (VectorOfparameters*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmscopes) {
 VectorOfscope* the_vec = (VectorOfscope*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtypespecs) {
 VectorOftypespec* the_vec = (VectorOftypespec*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmproperty_decls) {
 VectorOfproperty_decl* the_vec = (VectorOfproperty_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmsequence_decls) {
 VectorOfsequence_decl* the_vec = (VectorOfsequence_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnamed_events) {
 VectorOfnamed_event* the_vec = (VectorOfnamed_event*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnamed_event_arrays) {
 VectorOfnamed_event_array* the_vec = (VectorOfnamed_event_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvirtual_interface_vars) {
 VectorOfvirtual_interface_var* the_vec = (VectorOfvirtual_interface_var*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmlogic_var) {
 VectorOflogic_var* the_vec = (VectorOflogic_var*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmarray_var) {
 VectorOfarray_var* the_vec = (VectorOfarray_var*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmarray_var_mem) {
 VectorOfarray_var* the_vec = (VectorOfarray_var*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmlet_decls) {
 VectorOflet_decl* the_vec = (VectorOflet_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminstance_items) {
 VectorOfany* the_vec = (VectorOfany*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmstmts) {
 VectorOfstmt* the_vec = (VectorOfstmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmstmts) {
 VectorOfstmt* the_vec = (VectorOfstmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmstmts) {
 VectorOfstmt* the_vec = (VectorOfstmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmstmts) {
 VectorOfstmt* the_vec = (VectorOfstmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmoperands) {
 VectorOfoperand_group* the_vec = (VectorOfoperand_group*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmports) {
 VectorOfports* the_vec = (VectorOfports*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmports) {
 VectorOfports* the_vec = (VectorOfports*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariable_drivers) {
 VectorOfvariable_drivers* the_vec = (VectorOfvariable_drivers*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariable_loads) {
 VectorOfvariable_loads* the_vec = (VectorOfvariable_loads*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmindexes) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprim_terms) {
 VectorOfprim_term* the_vec = (VectorOfprim_term*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariables) {
 VectorOfvariables* the_vec = (VectorOfvariables*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvar_bits) {
 VectorOfvar_bit* the_vec = (VectorOfvar_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvar_bits) {
 VectorOfvar_bit* the_vec = (VectorOfvar_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvar_bits) {
 VectorOfvar_bit* the_vec = (VectorOfvar_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariables) {
 VectorOfvariables* the_vec = (VectorOfvariables*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvar_bits) {
 VectorOfvar_bit* the_vec = (VectorOfvar_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvariables) {
 VectorOfvariables* the_vec = (VectorOfvariables*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmvar_bits) {
 VectorOfvar_bit* the_vec = (VectorOfvar_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmexpr_indexes) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmio_decls) {
 VectorOfio_decl* the_vec = (VectorOfio_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtasks) {
 VectorOftask* the_vec = (VectorOftask*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmfunctions) {
 VectorOffunction* the_vec = (VectorOffunction*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmbits) {
 VectorOfport_bit* the_vec = (VectorOfport_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminstances) {
 VectorOfinstance* the_vec = (VectorOfinstance*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmparam_assigns) {
 VectorOfparam_assign* the_vec = (VectorOfparam_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmparam_assigns) {
 VectorOfparam_assign* the_vec = (VectorOfparam_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprimitives) {
 VectorOfprimitive* the_vec = (VectorOfprimitive*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmports) {
 VectorOfports* the_vec = (VectorOfports*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmdrivers) {
 VectorOfnet_drivers* the_vec = (VectorOfnet_drivers*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmloads) {
 VectorOfnet_loads* the_vec = (VectorOfnet_loads*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmlocal_drivers) {
 VectorOfnet_drivers* the_vec = (VectorOfnet_drivers*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmlocal_loads) {
 VectorOfnet_loads* the_vec = (VectorOfnet_loads*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprim_terms) {
 VectorOfprim_term* the_vec = (VectorOfprim_term*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmpath_term) {
 VectorOfpath_term* the_vec = (VectorOfpath_term*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtchk_term) {
 VectorOftchk_term* the_vec = (VectorOftchk_term*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmexpr) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnet_bits) {
 VectorOfnet_bit* the_vec = (VectorOfnet_bit*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnets) {
 VectorOfnets* the_vec = (VectorOfnets*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmexpr) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmexpr) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnets) {
 VectorOfnet* the_vec = (VectorOfnet*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmrange) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmexpr) {
 VectorOfexpr* the_vec = (VectorOfexpr*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmranges) {
 VectorOfrange* the_vec = (VectorOfrange*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmelements) {
 VectorOfany* the_vec = (VectorOfany*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtask_func) {
 VectorOftask_func* the_vec = (VectorOftask_func*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnet) {
 VectorOfnet* the_vec = (VectorOfnet*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmarray_net) {
 VectorOfarray_net* the_vec = (VectorOfarray_net*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmassertion) {
 VectorOfassertion* the_vec = (VectorOfassertion*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmclass_defn) {
 VectorOfclass_defn* the_vec = (VectorOfclass_defn*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprograms) {
 VectorOfprogram* the_vec = (VectorOfprogram*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprogram_arrays) {
 VectorOfprogram* the_vec = (VectorOfprogram*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnamed_event) {
 VectorOfnamed_event* the_vec = (VectorOfnamed_event*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmnamed_event_array) {
 VectorOfnamed_event* the_vec = (VectorOfnamed_event*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmspec_param) {
 VectorOfspec_param* the_vec = (VectorOfspec_param*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_tf_decls) {
 VectorOfinterface_tf_decl* the_vec = (VectorOfinterface_tf_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodports) {
 VectorOfmodport* the_vec = (VectorOfmodport*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmod_paths) {
 VectorOfmod_path* the_vec = (VectorOfmod_path*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmclocking_blocks) {
 VectorOfclocking_block* the_vec = (VectorOfclocking_block*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprimitives) {
 VectorOfprimitive* the_vec = (VectorOfprimitive*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprimitive_arrays) {
 VectorOfprimitive_array* the_vec = (VectorOfprimitive_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmports) {
 VectorOfport* the_vec = (VectorOfport*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodule_arrays) {
 VectorOfmodule_array* the_vec = (VectorOfmodule_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmod_paths) {
 VectorOfmod_path* the_vec = (VectorOfmod_path*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtchks) {
 VectorOftchk* the_vec = (VectorOftchk*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmdef_params) {
 VectorOfdef_param* the_vec = (VectorOfdef_param*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmio_decls) {
 VectorOfio_decl* the_vec = (VectorOfio_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmalias_stmts) {
 VectorOfalias_stmt* the_vec = (VectorOfalias_stmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmclocking_blocks) {
 VectorOfclocking_block* the_vec = (VectorOfclocking_block*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallModules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtopModules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallPrograms) {
 VectorOfprogram* the_vec = (VectorOfprogram*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallPackages) {
 VectorOfpackage* the_vec = (VectorOfpackage*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(((BaseClass*)the_vec->at(handle->index))->getUhdmType(), the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }
  return 0;
}

PLI_INT32 vpi_free_object (vpiHandle object) {
  return vpi_release_handle(object);
}

PLI_INT32 vpi_release_handle (vpiHandle object) {
  delete (uhdm_handle*) object;
  return 0;
}

/* for processing properties */

PLI_INT32 vpi_get (PLI_INT32   property,
                   vpiHandle   object) {
  if (!object) {
      std::cout << "VPI ERROR: Bad usage of vpi_get" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiLineNo) {
       return ((process*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprocess) {
     if (property == vpiType) {
       return ((process*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmproperty_decl) {
     if (property == vpiLineNo) {
       return ((property_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmproperty_decl) {
     if (property == vpiType) {
       return ((property_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmsequence_decl) {
     if (property == vpiLineNo) {
       return ((sequence_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmsequence_decl) {
     if (property == vpiType) {
       return ((sequence_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (property == vpiLineNo) {
       return ((virtual_interface_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (property == vpiType) {
       return ((virtual_interface_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlet_decl) {
     if (property == vpiLineNo) {
       return ((let_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlet_decl) {
     if (property == vpiType) {
       return ((let_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiLineNo) {
       return ((begin*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiType) {
       return ((begin*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiLineNo) {
       return ((named_begin*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiType) {
       return ((named_begin*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiLineNo) {
       return ((named_fork*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiJoinType) {
       return ((named_fork*)(obj))->get_vpiJoinType();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiType) {
       return ((named_fork*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiLineNo) {
       return ((fork_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiType) {
       return ((fork_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiJoinType) {
       return ((fork_stmt*)(obj))->get_vpiJoinType();
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiLineNo) {
       return ((for_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiType) {
       return ((for_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiLineNo) {
       return ((foreach_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiType) {
       return ((foreach_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiLineNo) {
       return ((gen_scope*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiType) {
       return ((gen_scope*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmexpr) {
     if (property == vpiSize) {
       return ((expr*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmdistribution) {
     if (property == vpiLineNo) {
       return ((distribution*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdistribution) {
     if (property == vpiType) {
       return ((distribution*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiLineNo) {
       return ((operation*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiOpType) {
       return ((operation*)(obj))->get_vpiOpType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiType) {
       return ((operation*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiSize) {
       return ((operation*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpart_select) {
     if (property == vpiLineNo) {
       return ((part_select*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpart_select) {
     if (property == vpiType) {
       return ((part_select*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiLineNo) {
       return ((ref_obj*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiGeneric) {
       return ((ref_obj*)(obj))->get_vpiGeneric();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiType) {
       return ((ref_obj*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvar_select) {
     if (property == vpiLineNo) {
       return ((var_select*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvar_select) {
     if (property == vpiType) {
       return ((var_select*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiArrayMember) {
       return ((variables*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiSigned) {
       return ((variables*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiSize) {
       return ((variables*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiAutomatic) {
       return ((variables*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiAllocScheme) {
       return ((variables*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiConstantVariable) {
       return ((variables*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiIsRandomized) {
       return ((variables*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiRandType) {
       return ((variables*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiStructUnionMember) {
       return ((variables*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiScalar) {
       return ((variables*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiVisibility) {
       return ((variables*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiVector) {
       return ((variables*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiLineNo) {
       return ((short_real_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiType) {
       return ((short_real_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiArrayMember) {
       return ((short_real_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiSigned) {
       return ((short_real_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiSize) {
       return ((short_real_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiAutomatic) {
       return ((short_real_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiAllocScheme) {
       return ((short_real_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiConstantVariable) {
       return ((short_real_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiIsRandomized) {
       return ((short_real_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiRandType) {
       return ((short_real_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiStructUnionMember) {
       return ((short_real_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiScalar) {
       return ((short_real_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiVisibility) {
       return ((short_real_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiVector) {
       return ((short_real_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiLineNo) {
       return ((real_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiType) {
       return ((real_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiArrayMember) {
       return ((real_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiSigned) {
       return ((real_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiSize) {
       return ((real_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiAutomatic) {
       return ((real_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiAllocScheme) {
       return ((real_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiConstantVariable) {
       return ((real_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiIsRandomized) {
       return ((real_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiRandType) {
       return ((real_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiStructUnionMember) {
       return ((real_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiScalar) {
       return ((real_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiVisibility) {
       return ((real_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiVector) {
       return ((real_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiLineNo) {
       return ((byte_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiType) {
       return ((byte_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiArrayMember) {
       return ((byte_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiSigned) {
       return ((byte_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiSize) {
       return ((byte_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiAutomatic) {
       return ((byte_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiAllocScheme) {
       return ((byte_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiConstantVariable) {
       return ((byte_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiIsRandomized) {
       return ((byte_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiRandType) {
       return ((byte_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiStructUnionMember) {
       return ((byte_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiScalar) {
       return ((byte_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiVisibility) {
       return ((byte_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiVector) {
       return ((byte_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiLineNo) {
       return ((short_int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiType) {
       return ((short_int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiArrayMember) {
       return ((short_int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiSigned) {
       return ((short_int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiSize) {
       return ((short_int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiAutomatic) {
       return ((short_int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiAllocScheme) {
       return ((short_int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiConstantVariable) {
       return ((short_int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiIsRandomized) {
       return ((short_int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiRandType) {
       return ((short_int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiStructUnionMember) {
       return ((short_int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiScalar) {
       return ((short_int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiVisibility) {
       return ((short_int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiVector) {
       return ((short_int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiLineNo) {
       return ((int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiType) {
       return ((int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiArrayMember) {
       return ((int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiSigned) {
       return ((int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiSize) {
       return ((int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiAutomatic) {
       return ((int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiAllocScheme) {
       return ((int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiConstantVariable) {
       return ((int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiIsRandomized) {
       return ((int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiRandType) {
       return ((int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiStructUnionMember) {
       return ((int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiScalar) {
       return ((int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiVisibility) {
       return ((int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiVector) {
       return ((int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiLineNo) {
       return ((long_int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiType) {
       return ((long_int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiArrayMember) {
       return ((long_int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiSigned) {
       return ((long_int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiSize) {
       return ((long_int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiAutomatic) {
       return ((long_int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiAllocScheme) {
       return ((long_int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiConstantVariable) {
       return ((long_int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiIsRandomized) {
       return ((long_int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiRandType) {
       return ((long_int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiStructUnionMember) {
       return ((long_int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiScalar) {
       return ((long_int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiVisibility) {
       return ((long_int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiVector) {
       return ((long_int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiLineNo) {
       return ((integer_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiType) {
       return ((integer_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiArrayMember) {
       return ((integer_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiSigned) {
       return ((integer_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiSize) {
       return ((integer_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiAutomatic) {
       return ((integer_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiAllocScheme) {
       return ((integer_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiConstantVariable) {
       return ((integer_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiIsRandomized) {
       return ((integer_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiRandType) {
       return ((integer_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiStructUnionMember) {
       return ((integer_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiScalar) {
       return ((integer_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiVisibility) {
       return ((integer_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiVector) {
       return ((integer_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiLineNo) {
       return ((time_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiType) {
       return ((time_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiArrayMember) {
       return ((time_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiSigned) {
       return ((time_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiSize) {
       return ((time_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiAutomatic) {
       return ((time_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiAllocScheme) {
       return ((time_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiConstantVariable) {
       return ((time_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiIsRandomized) {
       return ((time_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiRandType) {
       return ((time_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiStructUnionMember) {
       return ((time_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiScalar) {
       return ((time_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiVisibility) {
       return ((time_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiVector) {
       return ((time_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiLineNo) {
       return ((array_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiArrayType) {
       return ((array_var*)(obj))->get_vpiArrayType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiType) {
       return ((array_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiArrayMember) {
       return ((array_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiSigned) {
       return ((array_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiSize) {
       return ((array_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiAutomatic) {
       return ((array_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiAllocScheme) {
       return ((array_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiConstantVariable) {
       return ((array_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiIsRandomized) {
       return ((array_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiRandType) {
       return ((array_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiStructUnionMember) {
       return ((array_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiScalar) {
       return ((array_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiVisibility) {
       return ((array_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiVector) {
       return ((array_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiLineNo) {
       return ((packed_array_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiType) {
       return ((packed_array_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiArrayMember) {
       return ((packed_array_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiSigned) {
       return ((packed_array_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiSize) {
       return ((packed_array_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiAutomatic) {
       return ((packed_array_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiAllocScheme) {
       return ((packed_array_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiConstantVariable) {
       return ((packed_array_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiIsRandomized) {
       return ((packed_array_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiRandType) {
       return ((packed_array_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiStructUnionMember) {
       return ((packed_array_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiScalar) {
       return ((packed_array_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiVisibility) {
       return ((packed_array_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiVector) {
       return ((packed_array_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiLineNo) {
       return ((bit_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiType) {
       return ((bit_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiArrayMember) {
       return ((bit_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiSigned) {
       return ((bit_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiSize) {
       return ((bit_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiAutomatic) {
       return ((bit_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiAllocScheme) {
       return ((bit_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiConstantVariable) {
       return ((bit_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiIsRandomized) {
       return ((bit_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiRandType) {
       return ((bit_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiStructUnionMember) {
       return ((bit_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiScalar) {
       return ((bit_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiVisibility) {
       return ((bit_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiVector) {
       return ((bit_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiLineNo) {
       return ((logic_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiType) {
       return ((logic_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiArrayMember) {
       return ((logic_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiSigned) {
       return ((logic_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiSize) {
       return ((logic_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiAutomatic) {
       return ((logic_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiAllocScheme) {
       return ((logic_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiConstantVariable) {
       return ((logic_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiIsRandomized) {
       return ((logic_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiRandType) {
       return ((logic_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiStructUnionMember) {
       return ((logic_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiScalar) {
       return ((logic_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiVisibility) {
       return ((logic_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiVector) {
       return ((logic_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiLineNo) {
       return ((struct_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiType) {
       return ((struct_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiArrayMember) {
       return ((struct_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiSigned) {
       return ((struct_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiSize) {
       return ((struct_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiAutomatic) {
       return ((struct_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiAllocScheme) {
       return ((struct_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiConstantVariable) {
       return ((struct_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiIsRandomized) {
       return ((struct_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiRandType) {
       return ((struct_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiStructUnionMember) {
       return ((struct_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiScalar) {
       return ((struct_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiVisibility) {
       return ((struct_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiVector) {
       return ((struct_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiLineNo) {
       return ((union_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiType) {
       return ((union_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiArrayMember) {
       return ((union_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiSigned) {
       return ((union_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiSize) {
       return ((union_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiAutomatic) {
       return ((union_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiAllocScheme) {
       return ((union_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiConstantVariable) {
       return ((union_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiIsRandomized) {
       return ((union_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiRandType) {
       return ((union_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiStructUnionMember) {
       return ((union_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiScalar) {
       return ((union_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiVisibility) {
       return ((union_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiVector) {
       return ((union_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiLineNo) {
       return ((enum_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiType) {
       return ((enum_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiArrayMember) {
       return ((enum_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiSigned) {
       return ((enum_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiSize) {
       return ((enum_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiAutomatic) {
       return ((enum_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiAllocScheme) {
       return ((enum_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiConstantVariable) {
       return ((enum_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiIsRandomized) {
       return ((enum_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiRandType) {
       return ((enum_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiStructUnionMember) {
       return ((enum_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiScalar) {
       return ((enum_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiVisibility) {
       return ((enum_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiVector) {
       return ((enum_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiLineNo) {
       return ((string_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiType) {
       return ((string_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiArrayMember) {
       return ((string_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiSigned) {
       return ((string_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiSize) {
       return ((string_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiAutomatic) {
       return ((string_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiAllocScheme) {
       return ((string_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiConstantVariable) {
       return ((string_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiIsRandomized) {
       return ((string_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiRandType) {
       return ((string_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiStructUnionMember) {
       return ((string_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiScalar) {
       return ((string_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiVisibility) {
       return ((string_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiVector) {
       return ((string_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiLineNo) {
       return ((chandle_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiType) {
       return ((chandle_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiArrayMember) {
       return ((chandle_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiSigned) {
       return ((chandle_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiSize) {
       return ((chandle_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiAutomatic) {
       return ((chandle_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiAllocScheme) {
       return ((chandle_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiConstantVariable) {
       return ((chandle_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiIsRandomized) {
       return ((chandle_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiRandType) {
       return ((chandle_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiStructUnionMember) {
       return ((chandle_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiScalar) {
       return ((chandle_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiVisibility) {
       return ((chandle_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiVector) {
       return ((chandle_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiLineNo) {
       return ((class_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiType) {
       return ((class_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiArrayMember) {
       return ((class_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiSigned) {
       return ((class_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiSize) {
       return ((class_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiAutomatic) {
       return ((class_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiAllocScheme) {
       return ((class_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiConstantVariable) {
       return ((class_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiIsRandomized) {
       return ((class_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiRandType) {
       return ((class_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiStructUnionMember) {
       return ((class_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiScalar) {
       return ((class_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiVisibility) {
       return ((class_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiVector) {
       return ((class_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiLineNo) {
       return ((var_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiConstantSelect) {
       return ((var_bit*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiType) {
       return ((var_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiArrayMember) {
       return ((var_bit*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiSigned) {
       return ((var_bit*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiSize) {
       return ((var_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiAutomatic) {
       return ((var_bit*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiAllocScheme) {
       return ((var_bit*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiConstantVariable) {
       return ((var_bit*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiIsRandomized) {
       return ((var_bit*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiRandType) {
       return ((var_bit*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiStructUnionMember) {
       return ((var_bit*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiScalar) {
       return ((var_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiVisibility) {
       return ((var_bit*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiVector) {
       return ((var_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiMethod) {
       return ((task_func*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiAccessType) {
       return ((task_func*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiVisibility) {
       return ((task_func*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiVirtual) {
       return ((task_func*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiAutomatic) {
       return ((task_func*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiDPIContext) {
       return ((task_func*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiDPICStr) {
       return ((task_func*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiLineNo) {
       return ((task*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiType) {
       return ((task*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiMethod) {
       return ((task*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiAccessType) {
       return ((task*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiVisibility) {
       return ((task*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiVirtual) {
       return ((task*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiAutomatic) {
       return ((task*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiDPIContext) {
       return ((task*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiDPICStr) {
       return ((task*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiLineNo) {
       return ((function*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiSigned) {
       return ((function*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiSize) {
       return ((function*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiFuncType) {
       return ((function*)(obj))->get_vpiFuncType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiType) {
       return ((function*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiMethod) {
       return ((function*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiAccessType) {
       return ((function*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiVisibility) {
       return ((function*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiVirtual) {
       return ((function*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiAutomatic) {
       return ((function*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiDPIContext) {
       return ((function*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiDPICStr) {
       return ((function*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiLineNo) {
       return ((modport*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiType) {
       return ((modport*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiLineNo) {
       return ((interface_tf_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiAccessType) {
       return ((interface_tf_decl*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiType) {
       return ((interface_tf_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiLineNo) {
       return ((cont_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiType) {
       return ((cont_assign*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiPortIndex) {
       return ((ports*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiPortType) {
       return ((ports*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiScalar) {
       return ((ports*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiVector) {
       return ((ports*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiConnByName) {
       return ((ports*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiDirection) {
       return ((ports*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiSize) {
       return ((ports*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiLineNo) {
       return ((port*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiType) {
       return ((port*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiPortIndex) {
       return ((port*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiPortType) {
       return ((port*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiScalar) {
       return ((port*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiVector) {
       return ((port*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiConnByName) {
       return ((port*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiDirection) {
       return ((port*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiSize) {
       return ((port*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiLineNo) {
       return ((port_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiType) {
       return ((port_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiPortIndex) {
       return ((port_bit*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiPortType) {
       return ((port_bit*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiScalar) {
       return ((port_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiVector) {
       return ((port_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiConnByName) {
       return ((port_bit*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiDirection) {
       return ((port_bit*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiSize) {
       return ((port_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiLineNo) {
       return ((primitive*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiType) {
       return ((primitive*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiLineNo) {
       return ((mod_path*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiType) {
       return ((mod_path*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiLineNo) {
       return ((tchk*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiType) {
       return ((tchk*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiLineNo) {
       return ((def_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiType) {
       return ((def_param*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmrange) {
     if (property == vpiLineNo) {
       return ((range*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmrange) {
     if (property == vpiType) {
       return ((range*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmudp_defn) {
     if (property == vpiLineNo) {
       return ((udp_defn*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmudp_defn) {
     if (property == vpiType) {
       return ((udp_defn*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiLineNo) {
       return ((io_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiType) {
       return ((io_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiDirection) {
       return ((io_decl*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiScalar) {
       return ((io_decl*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiSigned) {
       return ((io_decl*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiSize) {
       return ((io_decl*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiVector) {
       return ((io_decl*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiLineNo) {
       return ((alias_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiType) {
       return ((alias_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiLineNo) {
       return ((clocking_block*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiType) {
       return ((clocking_block*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmparam_assign) {
     if (property == vpiLineNo) {
       return ((param_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmparam_assign) {
     if (property == vpiType) {
       return ((param_assign*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiSize) {
       return ((instance_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiLineNo) {
       return ((interface_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiType) {
       return ((interface_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiSize) {
       return ((interface_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiLineNo) {
       return ((program_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiType) {
       return ((program_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiSize) {
       return ((program_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiLineNo) {
       return ((module_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiType) {
       return ((module_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiSize) {
       return ((module_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiSize) {
       return ((primitive_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiLineNo) {
       return ((gate_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiType) {
       return ((gate_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiSize) {
       return ((gate_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiLineNo) {
       return ((switch_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiType) {
       return ((switch_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiSize) {
       return ((switch_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiLineNo) {
       return ((udp_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiType) {
       return ((udp_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiSize) {
       return ((udp_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprim_term) {
     if (property == vpiLineNo) {
       return ((prim_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprim_term) {
     if (property == vpiType) {
       return ((prim_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpath_term) {
     if (property == vpiLineNo) {
       return ((path_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpath_term) {
     if (property == vpiType) {
       return ((path_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtchk_term) {
     if (property == vpiLineNo) {
       return ((tchk_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk_term) {
     if (property == vpiType) {
       return ((tchk_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiArrayMember) {
       return ((nets*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiConstantSelect) {
       return ((nets*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExpanded) {
       return ((nets*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiImplicitDecl) {
       return ((nets*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiNetDeclAssign) {
       return ((nets*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiNetType) {
       return ((nets*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiResolvedNetType) {
       return ((nets*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiScalar) {
       return ((nets*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExplicitScalared) {
       return ((nets*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiSigned) {
       return ((nets*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiSize) {
       return ((nets*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStrength0) {
       return ((nets*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStrength1) {
       return ((nets*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiChargeStrength) {
       return ((nets*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiVector) {
       return ((nets*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExplicitVectored) {
       return ((nets*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStructUnionMember) {
       return ((nets*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiLineNo) {
       return ((net_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiType) {
       return ((net_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiArrayMember) {
       return ((net_bit*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiConstantSelect) {
       return ((net_bit*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExpanded) {
       return ((net_bit*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiImplicitDecl) {
       return ((net_bit*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiNetDeclAssign) {
       return ((net_bit*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiNetType) {
       return ((net_bit*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiResolvedNetType) {
       return ((net_bit*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiScalar) {
       return ((net_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExplicitScalared) {
       return ((net_bit*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiSigned) {
       return ((net_bit*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiSize) {
       return ((net_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStrength0) {
       return ((net_bit*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStrength1) {
       return ((net_bit*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiChargeStrength) {
       return ((net_bit*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiVector) {
       return ((net_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExplicitVectored) {
       return ((net_bit*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStructUnionMember) {
       return ((net_bit*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiArrayMember) {
       return ((net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiConstantSelect) {
       return ((net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExpanded) {
       return ((net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiImplicitDecl) {
       return ((net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiNetDeclAssign) {
       return ((net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiNetType) {
       return ((net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiResolvedNetType) {
       return ((net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiScalar) {
       return ((net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExplicitScalared) {
       return ((net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiSigned) {
       return ((net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiSize) {
       return ((net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStrength0) {
       return ((net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStrength1) {
       return ((net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiChargeStrength) {
       return ((net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiVector) {
       return ((net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExplicitVectored) {
       return ((net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStructUnionMember) {
       return ((net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiLineNo) {
       return ((struct_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiPackedArrayMember) {
       return ((struct_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiType) {
       return ((struct_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiArrayMember) {
       return ((struct_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiConstantSelect) {
       return ((struct_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExpanded) {
       return ((struct_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiImplicitDecl) {
       return ((struct_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiNetDeclAssign) {
       return ((struct_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiNetType) {
       return ((struct_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiResolvedNetType) {
       return ((struct_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiScalar) {
       return ((struct_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExplicitScalared) {
       return ((struct_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiSigned) {
       return ((struct_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiSize) {
       return ((struct_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStrength0) {
       return ((struct_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStrength1) {
       return ((struct_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiChargeStrength) {
       return ((struct_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiVector) {
       return ((struct_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExplicitVectored) {
       return ((struct_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStructUnionMember) {
       return ((struct_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiLineNo) {
       return ((enum_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiPackedArrayMember) {
       return ((enum_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiType) {
       return ((enum_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiArrayMember) {
       return ((enum_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiConstantSelect) {
       return ((enum_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExpanded) {
       return ((enum_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiImplicitDecl) {
       return ((enum_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiNetDeclAssign) {
       return ((enum_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiNetType) {
       return ((enum_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiResolvedNetType) {
       return ((enum_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiScalar) {
       return ((enum_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExplicitScalared) {
       return ((enum_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiSigned) {
       return ((enum_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiSize) {
       return ((enum_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStrength0) {
       return ((enum_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStrength1) {
       return ((enum_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiChargeStrength) {
       return ((enum_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiVector) {
       return ((enum_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExplicitVectored) {
       return ((enum_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStructUnionMember) {
       return ((enum_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiLineNo) {
       return ((integer_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiType) {
       return ((integer_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiArrayMember) {
       return ((integer_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiConstantSelect) {
       return ((integer_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExpanded) {
       return ((integer_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiImplicitDecl) {
       return ((integer_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiNetDeclAssign) {
       return ((integer_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiNetType) {
       return ((integer_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiResolvedNetType) {
       return ((integer_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiScalar) {
       return ((integer_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExplicitScalared) {
       return ((integer_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiSigned) {
       return ((integer_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiSize) {
       return ((integer_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStrength0) {
       return ((integer_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStrength1) {
       return ((integer_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiChargeStrength) {
       return ((integer_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiVector) {
       return ((integer_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExplicitVectored) {
       return ((integer_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStructUnionMember) {
       return ((integer_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiLineNo) {
       return ((time_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiType) {
       return ((time_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiArrayMember) {
       return ((time_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiConstantSelect) {
       return ((time_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExpanded) {
       return ((time_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiImplicitDecl) {
       return ((time_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiNetDeclAssign) {
       return ((time_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiNetType) {
       return ((time_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiResolvedNetType) {
       return ((time_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiScalar) {
       return ((time_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExplicitScalared) {
       return ((time_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiSigned) {
       return ((time_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiSize) {
       return ((time_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStrength0) {
       return ((time_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStrength1) {
       return ((time_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiChargeStrength) {
       return ((time_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiVector) {
       return ((time_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExplicitVectored) {
       return ((time_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStructUnionMember) {
       return ((time_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiLineNo) {
       return ((logic_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiType) {
       return ((logic_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiArrayMember) {
       return ((logic_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiConstantSelect) {
       return ((logic_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExpanded) {
       return ((logic_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiImplicitDecl) {
       return ((logic_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiNetDeclAssign) {
       return ((logic_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiNetType) {
       return ((logic_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiResolvedNetType) {
       return ((logic_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiScalar) {
       return ((logic_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExplicitScalared) {
       return ((logic_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiSigned) {
       return ((logic_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiSize) {
       return ((logic_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStrength0) {
       return ((logic_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStrength1) {
       return ((logic_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiChargeStrength) {
       return ((logic_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiVector) {
       return ((logic_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExplicitVectored) {
       return ((logic_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStructUnionMember) {
       return ((logic_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiLineNo) {
       return ((array_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiType) {
       return ((array_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiArrayMember) {
       return ((array_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiConstantSelect) {
       return ((array_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExpanded) {
       return ((array_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiImplicitDecl) {
       return ((array_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiNetDeclAssign) {
       return ((array_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiNetType) {
       return ((array_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiResolvedNetType) {
       return ((array_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiScalar) {
       return ((array_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExplicitScalared) {
       return ((array_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiSigned) {
       return ((array_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiSize) {
       return ((array_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStrength0) {
       return ((array_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStrength1) {
       return ((array_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiChargeStrength) {
       return ((array_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiVector) {
       return ((array_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExplicitVectored) {
       return ((array_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStructUnionMember) {
       return ((array_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiLineNo) {
       return ((packed_array_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiPackedArrayMember) {
       return ((packed_array_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiType) {
       return ((packed_array_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiArrayMember) {
       return ((packed_array_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiConstantSelect) {
       return ((packed_array_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExpanded) {
       return ((packed_array_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiImplicitDecl) {
       return ((packed_array_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiNetDeclAssign) {
       return ((packed_array_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiNetType) {
       return ((packed_array_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiResolvedNetType) {
       return ((packed_array_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiScalar) {
       return ((packed_array_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExplicitScalared) {
       return ((packed_array_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiSigned) {
       return ((packed_array_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiSize) {
       return ((packed_array_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStrength0) {
       return ((packed_array_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStrength1) {
       return ((packed_array_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiChargeStrength) {
       return ((packed_array_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiVector) {
       return ((packed_array_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExplicitVectored) {
       return ((packed_array_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStructUnionMember) {
       return ((packed_array_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnamed_event) {
     if (property == vpiLineNo) {
       return ((named_event*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_event) {
     if (property == vpiType) {
       return ((named_event*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (property == vpiLineNo) {
       return ((named_event_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (property == vpiType) {
       return ((named_event_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmspec_param) {
     if (property == vpiLineNo) {
       return ((spec_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmspec_param) {
     if (property == vpiType) {
       return ((spec_param*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiLineNo) {
       return ((class_defn*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiType) {
       return ((class_defn*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiLineNo) {
       return ((class_typespec*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiType) {
       return ((class_typespec*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiLineNo) {
       return ((class_obj*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiType) {
       return ((class_obj*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiArrayMember) {
       return ((instance*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCellInstance) {
       return ((instance*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefNetType) {
       return ((instance*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefDelayMode) {
       return ((instance*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiProtected) {
       return ((instance*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimePrecision) {
       return ((instance*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimeUnit) {
       return ((instance*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiUnconnDrive) {
       return ((instance*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiAutomatic) {
       return ((instance*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTop) {
       return ((instance*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiLineNo) {
       return ((interface*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiIndex) {
       return ((interface*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiType) {
       return ((interface*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiArrayMember) {
       return ((interface*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiCellInstance) {
       return ((interface*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefNetType) {
       return ((interface*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefDelayMode) {
       return ((interface*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiProtected) {
       return ((interface*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTimePrecision) {
       return ((interface*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTimeUnit) {
       return ((interface*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiUnconnDrive) {
       return ((interface*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiAutomatic) {
       return ((interface*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTop) {
       return ((interface*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiLineNo) {
       return ((program*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiIndex) {
       return ((program*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiType) {
       return ((program*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiArrayMember) {
       return ((program*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiCellInstance) {
       return ((program*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefNetType) {
       return ((program*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefDelayMode) {
       return ((program*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiProtected) {
       return ((program*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTimePrecision) {
       return ((program*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTimeUnit) {
       return ((program*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiUnconnDrive) {
       return ((program*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiAutomatic) {
       return ((program*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTop) {
       return ((program*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLineNo) {
       return ((package*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiType) {
       return ((package*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnit) {
       return ((package*)(obj))->get_vpiUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiArrayMember) {
       return ((package*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCellInstance) {
       return ((package*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefNetType) {
       return ((package*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefDelayMode) {
       return ((package*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiProtected) {
       return ((package*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimePrecision) {
       return ((package*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimeUnit) {
       return ((package*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnconnDrive) {
       return ((package*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiAutomatic) {
       return ((package*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTop) {
       return ((package*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiLineNo) {
       return ((module*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiIndex) {
       return ((module*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiType) {
       return ((module*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTopModule) {
       return ((module*)(obj))->get_vpiTopModule();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDecayTime) {
       return ((module*)(obj))->get_vpiDefDecayTime();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiArrayMember) {
       return ((module*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiCellInstance) {
       return ((module*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefNetType) {
       return ((module*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDelayMode) {
       return ((module*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiProtected) {
       return ((module*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTimePrecision) {
       return ((module*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTimeUnit) {
       return ((module*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiUnconnDrive) {
       return ((module*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiAutomatic) {
       return ((module*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTop) {
       return ((module*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiLineNo) {
       return ((design*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == uhdmdesign) {
       return ((design*)(obj))->get_uhdmdesign();
     } 
}

  return 0;
}

PLI_INT64 vpi_get64 (PLI_INT32 property,
                     vpiHandle   object) {
  if (!object) {
      std::cout << "VPI ERROR: Bad usage of vpi_get64" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiLineNo) {
       return ((process*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprocess) {
     if (property == vpiType) {
       return ((process*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmproperty_decl) {
     if (property == vpiLineNo) {
       return ((property_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmproperty_decl) {
     if (property == vpiType) {
       return ((property_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmsequence_decl) {
     if (property == vpiLineNo) {
       return ((sequence_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmsequence_decl) {
     if (property == vpiType) {
       return ((sequence_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (property == vpiLineNo) {
       return ((virtual_interface_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (property == vpiType) {
       return ((virtual_interface_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlet_decl) {
     if (property == vpiLineNo) {
       return ((let_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlet_decl) {
     if (property == vpiType) {
       return ((let_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiLineNo) {
       return ((begin*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiType) {
       return ((begin*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiLineNo) {
       return ((named_begin*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiType) {
       return ((named_begin*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiLineNo) {
       return ((named_fork*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiJoinType) {
       return ((named_fork*)(obj))->get_vpiJoinType();
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiType) {
       return ((named_fork*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiLineNo) {
       return ((fork_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiType) {
       return ((fork_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiJoinType) {
       return ((fork_stmt*)(obj))->get_vpiJoinType();
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiLineNo) {
       return ((for_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiType) {
       return ((for_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiLineNo) {
       return ((foreach_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiType) {
       return ((foreach_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiLineNo) {
       return ((gen_scope*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiType) {
       return ((gen_scope*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmexpr) {
     if (property == vpiSize) {
       return ((expr*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmdistribution) {
     if (property == vpiLineNo) {
       return ((distribution*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdistribution) {
     if (property == vpiType) {
       return ((distribution*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiLineNo) {
       return ((operation*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiOpType) {
       return ((operation*)(obj))->get_vpiOpType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiType) {
       return ((operation*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiSize) {
       return ((operation*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpart_select) {
     if (property == vpiLineNo) {
       return ((part_select*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpart_select) {
     if (property == vpiType) {
       return ((part_select*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiLineNo) {
       return ((ref_obj*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiGeneric) {
       return ((ref_obj*)(obj))->get_vpiGeneric();
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiType) {
       return ((ref_obj*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvar_select) {
     if (property == vpiLineNo) {
       return ((var_select*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvar_select) {
     if (property == vpiType) {
       return ((var_select*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiArrayMember) {
       return ((variables*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiSigned) {
       return ((variables*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiSize) {
       return ((variables*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiAutomatic) {
       return ((variables*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiAllocScheme) {
       return ((variables*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiConstantVariable) {
       return ((variables*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiIsRandomized) {
       return ((variables*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiRandType) {
       return ((variables*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiStructUnionMember) {
       return ((variables*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiScalar) {
       return ((variables*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiVisibility) {
       return ((variables*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiVector) {
       return ((variables*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiLineNo) {
       return ((short_real_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiType) {
       return ((short_real_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiArrayMember) {
       return ((short_real_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiSigned) {
       return ((short_real_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiSize) {
       return ((short_real_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiAutomatic) {
       return ((short_real_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiAllocScheme) {
       return ((short_real_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiConstantVariable) {
       return ((short_real_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiIsRandomized) {
       return ((short_real_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiRandType) {
       return ((short_real_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiStructUnionMember) {
       return ((short_real_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiScalar) {
       return ((short_real_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiVisibility) {
       return ((short_real_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiVector) {
       return ((short_real_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiLineNo) {
       return ((real_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiType) {
       return ((real_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiArrayMember) {
       return ((real_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiSigned) {
       return ((real_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiSize) {
       return ((real_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiAutomatic) {
       return ((real_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiAllocScheme) {
       return ((real_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiConstantVariable) {
       return ((real_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiIsRandomized) {
       return ((real_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiRandType) {
       return ((real_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiStructUnionMember) {
       return ((real_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiScalar) {
       return ((real_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiVisibility) {
       return ((real_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiVector) {
       return ((real_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiLineNo) {
       return ((byte_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiType) {
       return ((byte_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiArrayMember) {
       return ((byte_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiSigned) {
       return ((byte_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiSize) {
       return ((byte_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiAutomatic) {
       return ((byte_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiAllocScheme) {
       return ((byte_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiConstantVariable) {
       return ((byte_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiIsRandomized) {
       return ((byte_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiRandType) {
       return ((byte_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiStructUnionMember) {
       return ((byte_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiScalar) {
       return ((byte_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiVisibility) {
       return ((byte_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiVector) {
       return ((byte_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiLineNo) {
       return ((short_int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiType) {
       return ((short_int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiArrayMember) {
       return ((short_int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiSigned) {
       return ((short_int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiSize) {
       return ((short_int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiAutomatic) {
       return ((short_int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiAllocScheme) {
       return ((short_int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiConstantVariable) {
       return ((short_int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiIsRandomized) {
       return ((short_int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiRandType) {
       return ((short_int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiStructUnionMember) {
       return ((short_int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiScalar) {
       return ((short_int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiVisibility) {
       return ((short_int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiVector) {
       return ((short_int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiLineNo) {
       return ((int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiType) {
       return ((int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiArrayMember) {
       return ((int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiSigned) {
       return ((int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiSize) {
       return ((int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiAutomatic) {
       return ((int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiAllocScheme) {
       return ((int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiConstantVariable) {
       return ((int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiIsRandomized) {
       return ((int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiRandType) {
       return ((int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiStructUnionMember) {
       return ((int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiScalar) {
       return ((int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiVisibility) {
       return ((int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiVector) {
       return ((int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiLineNo) {
       return ((long_int_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiType) {
       return ((long_int_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiArrayMember) {
       return ((long_int_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiSigned) {
       return ((long_int_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiSize) {
       return ((long_int_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiAutomatic) {
       return ((long_int_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiAllocScheme) {
       return ((long_int_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiConstantVariable) {
       return ((long_int_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiIsRandomized) {
       return ((long_int_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiRandType) {
       return ((long_int_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiStructUnionMember) {
       return ((long_int_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiScalar) {
       return ((long_int_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiVisibility) {
       return ((long_int_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiVector) {
       return ((long_int_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiLineNo) {
       return ((integer_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiType) {
       return ((integer_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiArrayMember) {
       return ((integer_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiSigned) {
       return ((integer_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiSize) {
       return ((integer_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiAutomatic) {
       return ((integer_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiAllocScheme) {
       return ((integer_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiConstantVariable) {
       return ((integer_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiIsRandomized) {
       return ((integer_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiRandType) {
       return ((integer_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiStructUnionMember) {
       return ((integer_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiScalar) {
       return ((integer_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiVisibility) {
       return ((integer_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiVector) {
       return ((integer_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiLineNo) {
       return ((time_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiType) {
       return ((time_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiArrayMember) {
       return ((time_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiSigned) {
       return ((time_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiSize) {
       return ((time_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiAutomatic) {
       return ((time_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiAllocScheme) {
       return ((time_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiConstantVariable) {
       return ((time_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiIsRandomized) {
       return ((time_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiRandType) {
       return ((time_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiStructUnionMember) {
       return ((time_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiScalar) {
       return ((time_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiVisibility) {
       return ((time_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiVector) {
       return ((time_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiLineNo) {
       return ((array_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiArrayType) {
       return ((array_var*)(obj))->get_vpiArrayType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiType) {
       return ((array_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiArrayMember) {
       return ((array_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiSigned) {
       return ((array_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiSize) {
       return ((array_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiAutomatic) {
       return ((array_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiAllocScheme) {
       return ((array_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiConstantVariable) {
       return ((array_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiIsRandomized) {
       return ((array_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiRandType) {
       return ((array_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiStructUnionMember) {
       return ((array_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiScalar) {
       return ((array_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiVisibility) {
       return ((array_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiVector) {
       return ((array_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiLineNo) {
       return ((packed_array_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiType) {
       return ((packed_array_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiArrayMember) {
       return ((packed_array_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiSigned) {
       return ((packed_array_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiSize) {
       return ((packed_array_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiAutomatic) {
       return ((packed_array_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiAllocScheme) {
       return ((packed_array_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiConstantVariable) {
       return ((packed_array_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiIsRandomized) {
       return ((packed_array_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiRandType) {
       return ((packed_array_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiStructUnionMember) {
       return ((packed_array_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiScalar) {
       return ((packed_array_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiVisibility) {
       return ((packed_array_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiVector) {
       return ((packed_array_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiLineNo) {
       return ((bit_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiType) {
       return ((bit_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiArrayMember) {
       return ((bit_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiSigned) {
       return ((bit_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiSize) {
       return ((bit_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiAutomatic) {
       return ((bit_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiAllocScheme) {
       return ((bit_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiConstantVariable) {
       return ((bit_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiIsRandomized) {
       return ((bit_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiRandType) {
       return ((bit_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiStructUnionMember) {
       return ((bit_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiScalar) {
       return ((bit_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiVisibility) {
       return ((bit_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiVector) {
       return ((bit_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiLineNo) {
       return ((logic_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiType) {
       return ((logic_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiArrayMember) {
       return ((logic_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiSigned) {
       return ((logic_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiSize) {
       return ((logic_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiAutomatic) {
       return ((logic_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiAllocScheme) {
       return ((logic_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiConstantVariable) {
       return ((logic_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiIsRandomized) {
       return ((logic_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiRandType) {
       return ((logic_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiStructUnionMember) {
       return ((logic_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiScalar) {
       return ((logic_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiVisibility) {
       return ((logic_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiVector) {
       return ((logic_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiLineNo) {
       return ((struct_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiType) {
       return ((struct_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiArrayMember) {
       return ((struct_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiSigned) {
       return ((struct_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiSize) {
       return ((struct_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiAutomatic) {
       return ((struct_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiAllocScheme) {
       return ((struct_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiConstantVariable) {
       return ((struct_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiIsRandomized) {
       return ((struct_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiRandType) {
       return ((struct_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiStructUnionMember) {
       return ((struct_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiScalar) {
       return ((struct_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiVisibility) {
       return ((struct_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiVector) {
       return ((struct_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiLineNo) {
       return ((union_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiType) {
       return ((union_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiArrayMember) {
       return ((union_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiSigned) {
       return ((union_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiSize) {
       return ((union_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiAutomatic) {
       return ((union_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiAllocScheme) {
       return ((union_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiConstantVariable) {
       return ((union_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiIsRandomized) {
       return ((union_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiRandType) {
       return ((union_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiStructUnionMember) {
       return ((union_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiScalar) {
       return ((union_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiVisibility) {
       return ((union_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiVector) {
       return ((union_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiLineNo) {
       return ((enum_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiType) {
       return ((enum_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiArrayMember) {
       return ((enum_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiSigned) {
       return ((enum_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiSize) {
       return ((enum_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiAutomatic) {
       return ((enum_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiAllocScheme) {
       return ((enum_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiConstantVariable) {
       return ((enum_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiIsRandomized) {
       return ((enum_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiRandType) {
       return ((enum_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiStructUnionMember) {
       return ((enum_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiScalar) {
       return ((enum_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiVisibility) {
       return ((enum_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiVector) {
       return ((enum_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiLineNo) {
       return ((string_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiType) {
       return ((string_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiArrayMember) {
       return ((string_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiSigned) {
       return ((string_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiSize) {
       return ((string_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiAutomatic) {
       return ((string_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiAllocScheme) {
       return ((string_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiConstantVariable) {
       return ((string_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiIsRandomized) {
       return ((string_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiRandType) {
       return ((string_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiStructUnionMember) {
       return ((string_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiScalar) {
       return ((string_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiVisibility) {
       return ((string_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiVector) {
       return ((string_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiLineNo) {
       return ((chandle_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiType) {
       return ((chandle_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiArrayMember) {
       return ((chandle_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiSigned) {
       return ((chandle_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiSize) {
       return ((chandle_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiAutomatic) {
       return ((chandle_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiAllocScheme) {
       return ((chandle_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiConstantVariable) {
       return ((chandle_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiIsRandomized) {
       return ((chandle_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiRandType) {
       return ((chandle_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiStructUnionMember) {
       return ((chandle_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiScalar) {
       return ((chandle_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiVisibility) {
       return ((chandle_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiVector) {
       return ((chandle_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiLineNo) {
       return ((class_var*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiType) {
       return ((class_var*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiArrayMember) {
       return ((class_var*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiSigned) {
       return ((class_var*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiSize) {
       return ((class_var*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiAutomatic) {
       return ((class_var*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiAllocScheme) {
       return ((class_var*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiConstantVariable) {
       return ((class_var*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiIsRandomized) {
       return ((class_var*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiRandType) {
       return ((class_var*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiStructUnionMember) {
       return ((class_var*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiScalar) {
       return ((class_var*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiVisibility) {
       return ((class_var*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiVector) {
       return ((class_var*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiLineNo) {
       return ((var_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiConstantSelect) {
       return ((var_bit*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiType) {
       return ((var_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiArrayMember) {
       return ((var_bit*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiSigned) {
       return ((var_bit*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiSize) {
       return ((var_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiAutomatic) {
       return ((var_bit*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiAllocScheme) {
       return ((var_bit*)(obj))->get_vpiAllocScheme();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiConstantVariable) {
       return ((var_bit*)(obj))->get_vpiConstantVariable();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiIsRandomized) {
       return ((var_bit*)(obj))->get_vpiIsRandomized();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiRandType) {
       return ((var_bit*)(obj))->get_vpiRandType();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiStructUnionMember) {
       return ((var_bit*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiScalar) {
       return ((var_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiVisibility) {
       return ((var_bit*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiVector) {
       return ((var_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiMethod) {
       return ((task_func*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiAccessType) {
       return ((task_func*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiVisibility) {
       return ((task_func*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiVirtual) {
       return ((task_func*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiAutomatic) {
       return ((task_func*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiDPIContext) {
       return ((task_func*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiDPICStr) {
       return ((task_func*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiLineNo) {
       return ((task*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiType) {
       return ((task*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiMethod) {
       return ((task*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiAccessType) {
       return ((task*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiVisibility) {
       return ((task*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiVirtual) {
       return ((task*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiAutomatic) {
       return ((task*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiDPIContext) {
       return ((task*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiDPICStr) {
       return ((task*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiLineNo) {
       return ((function*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiSigned) {
       return ((function*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiSize) {
       return ((function*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiFuncType) {
       return ((function*)(obj))->get_vpiFuncType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiType) {
       return ((function*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiMethod) {
       return ((function*)(obj))->get_vpiMethod();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiAccessType) {
       return ((function*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiVisibility) {
       return ((function*)(obj))->get_vpiVisibility();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiVirtual) {
       return ((function*)(obj))->get_vpiVirtual();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiAutomatic) {
       return ((function*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiDPIContext) {
       return ((function*)(obj))->get_vpiDPIContext();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiDPICStr) {
       return ((function*)(obj))->get_vpiDPICStr();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiLineNo) {
       return ((modport*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiType) {
       return ((modport*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiLineNo) {
       return ((interface_tf_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiAccessType) {
       return ((interface_tf_decl*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiType) {
       return ((interface_tf_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiLineNo) {
       return ((cont_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiType) {
       return ((cont_assign*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiPortIndex) {
       return ((ports*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiPortType) {
       return ((ports*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiScalar) {
       return ((ports*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiVector) {
       return ((ports*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiConnByName) {
       return ((ports*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiDirection) {
       return ((ports*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiSize) {
       return ((ports*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiLineNo) {
       return ((port*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiType) {
       return ((port*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiPortIndex) {
       return ((port*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiPortType) {
       return ((port*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiScalar) {
       return ((port*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiVector) {
       return ((port*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiConnByName) {
       return ((port*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiDirection) {
       return ((port*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiSize) {
       return ((port*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiLineNo) {
       return ((port_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiType) {
       return ((port_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiPortIndex) {
       return ((port_bit*)(obj))->get_vpiPortIndex();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiPortType) {
       return ((port_bit*)(obj))->get_vpiPortType();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiScalar) {
       return ((port_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiVector) {
       return ((port_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiConnByName) {
       return ((port_bit*)(obj))->get_vpiConnByName();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiDirection) {
       return ((port_bit*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiSize) {
       return ((port_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiLineNo) {
       return ((primitive*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiType) {
       return ((primitive*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiLineNo) {
       return ((mod_path*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiType) {
       return ((mod_path*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiLineNo) {
       return ((tchk*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiType) {
       return ((tchk*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiLineNo) {
       return ((def_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiType) {
       return ((def_param*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmrange) {
     if (property == vpiLineNo) {
       return ((range*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmrange) {
     if (property == vpiType) {
       return ((range*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmudp_defn) {
     if (property == vpiLineNo) {
       return ((udp_defn*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmudp_defn) {
     if (property == vpiType) {
       return ((udp_defn*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiLineNo) {
       return ((io_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiType) {
       return ((io_decl*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiDirection) {
       return ((io_decl*)(obj))->get_vpiDirection();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiScalar) {
       return ((io_decl*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiSigned) {
       return ((io_decl*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiSize) {
       return ((io_decl*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiVector) {
       return ((io_decl*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiLineNo) {
       return ((alias_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiType) {
       return ((alias_stmt*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiLineNo) {
       return ((clocking_block*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiType) {
       return ((clocking_block*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmparam_assign) {
     if (property == vpiLineNo) {
       return ((param_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmparam_assign) {
     if (property == vpiType) {
       return ((param_assign*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiSize) {
       return ((instance_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiLineNo) {
       return ((interface_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiType) {
       return ((interface_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiSize) {
       return ((interface_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiLineNo) {
       return ((program_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiType) {
       return ((program_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiSize) {
       return ((program_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiLineNo) {
       return ((module_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiType) {
       return ((module_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiSize) {
       return ((module_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiSize) {
       return ((primitive_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiLineNo) {
       return ((gate_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiType) {
       return ((gate_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiSize) {
       return ((gate_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiLineNo) {
       return ((switch_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiType) {
       return ((switch_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiSize) {
       return ((switch_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiLineNo) {
       return ((udp_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiType) {
       return ((udp_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiSize) {
       return ((udp_array*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmprim_term) {
     if (property == vpiLineNo) {
       return ((prim_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprim_term) {
     if (property == vpiType) {
       return ((prim_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpath_term) {
     if (property == vpiLineNo) {
       return ((path_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpath_term) {
     if (property == vpiType) {
       return ((path_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtchk_term) {
     if (property == vpiLineNo) {
       return ((tchk_term*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk_term) {
     if (property == vpiType) {
       return ((tchk_term*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiArrayMember) {
       return ((nets*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiConstantSelect) {
       return ((nets*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExpanded) {
       return ((nets*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiImplicitDecl) {
       return ((nets*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiNetDeclAssign) {
       return ((nets*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiNetType) {
       return ((nets*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiResolvedNetType) {
       return ((nets*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiScalar) {
       return ((nets*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExplicitScalared) {
       return ((nets*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiSigned) {
       return ((nets*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiSize) {
       return ((nets*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStrength0) {
       return ((nets*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStrength1) {
       return ((nets*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiChargeStrength) {
       return ((nets*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiVector) {
       return ((nets*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiExplicitVectored) {
       return ((nets*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiStructUnionMember) {
       return ((nets*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiLineNo) {
       return ((net_bit*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiType) {
       return ((net_bit*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiArrayMember) {
       return ((net_bit*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiConstantSelect) {
       return ((net_bit*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExpanded) {
       return ((net_bit*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiImplicitDecl) {
       return ((net_bit*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiNetDeclAssign) {
       return ((net_bit*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiNetType) {
       return ((net_bit*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiResolvedNetType) {
       return ((net_bit*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiScalar) {
       return ((net_bit*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExplicitScalared) {
       return ((net_bit*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiSigned) {
       return ((net_bit*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiSize) {
       return ((net_bit*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStrength0) {
       return ((net_bit*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStrength1) {
       return ((net_bit*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiChargeStrength) {
       return ((net_bit*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiVector) {
       return ((net_bit*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiExplicitVectored) {
       return ((net_bit*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiStructUnionMember) {
       return ((net_bit*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiArrayMember) {
       return ((net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiConstantSelect) {
       return ((net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExpanded) {
       return ((net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiImplicitDecl) {
       return ((net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiNetDeclAssign) {
       return ((net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiNetType) {
       return ((net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiResolvedNetType) {
       return ((net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiScalar) {
       return ((net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExplicitScalared) {
       return ((net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiSigned) {
       return ((net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiSize) {
       return ((net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStrength0) {
       return ((net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStrength1) {
       return ((net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiChargeStrength) {
       return ((net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiVector) {
       return ((net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiExplicitVectored) {
       return ((net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiStructUnionMember) {
       return ((net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiLineNo) {
       return ((struct_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiPackedArrayMember) {
       return ((struct_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiType) {
       return ((struct_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiArrayMember) {
       return ((struct_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiConstantSelect) {
       return ((struct_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExpanded) {
       return ((struct_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiImplicitDecl) {
       return ((struct_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiNetDeclAssign) {
       return ((struct_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiNetType) {
       return ((struct_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiResolvedNetType) {
       return ((struct_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiScalar) {
       return ((struct_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExplicitScalared) {
       return ((struct_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiSigned) {
       return ((struct_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiSize) {
       return ((struct_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStrength0) {
       return ((struct_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStrength1) {
       return ((struct_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiChargeStrength) {
       return ((struct_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiVector) {
       return ((struct_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiExplicitVectored) {
       return ((struct_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiStructUnionMember) {
       return ((struct_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiLineNo) {
       return ((enum_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiPackedArrayMember) {
       return ((enum_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiType) {
       return ((enum_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiArrayMember) {
       return ((enum_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiConstantSelect) {
       return ((enum_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExpanded) {
       return ((enum_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiImplicitDecl) {
       return ((enum_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiNetDeclAssign) {
       return ((enum_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiNetType) {
       return ((enum_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiResolvedNetType) {
       return ((enum_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiScalar) {
       return ((enum_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExplicitScalared) {
       return ((enum_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiSigned) {
       return ((enum_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiSize) {
       return ((enum_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStrength0) {
       return ((enum_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStrength1) {
       return ((enum_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiChargeStrength) {
       return ((enum_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiVector) {
       return ((enum_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiExplicitVectored) {
       return ((enum_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiStructUnionMember) {
       return ((enum_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiLineNo) {
       return ((integer_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiType) {
       return ((integer_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiArrayMember) {
       return ((integer_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiConstantSelect) {
       return ((integer_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExpanded) {
       return ((integer_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiImplicitDecl) {
       return ((integer_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiNetDeclAssign) {
       return ((integer_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiNetType) {
       return ((integer_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiResolvedNetType) {
       return ((integer_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiScalar) {
       return ((integer_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExplicitScalared) {
       return ((integer_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiSigned) {
       return ((integer_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiSize) {
       return ((integer_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStrength0) {
       return ((integer_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStrength1) {
       return ((integer_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiChargeStrength) {
       return ((integer_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiVector) {
       return ((integer_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiExplicitVectored) {
       return ((integer_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiStructUnionMember) {
       return ((integer_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiLineNo) {
       return ((time_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiType) {
       return ((time_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiArrayMember) {
       return ((time_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiConstantSelect) {
       return ((time_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExpanded) {
       return ((time_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiImplicitDecl) {
       return ((time_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiNetDeclAssign) {
       return ((time_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiNetType) {
       return ((time_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiResolvedNetType) {
       return ((time_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiScalar) {
       return ((time_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExplicitScalared) {
       return ((time_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiSigned) {
       return ((time_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiSize) {
       return ((time_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStrength0) {
       return ((time_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStrength1) {
       return ((time_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiChargeStrength) {
       return ((time_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiVector) {
       return ((time_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiExplicitVectored) {
       return ((time_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiStructUnionMember) {
       return ((time_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiLineNo) {
       return ((logic_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiType) {
       return ((logic_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiArrayMember) {
       return ((logic_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiConstantSelect) {
       return ((logic_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExpanded) {
       return ((logic_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiImplicitDecl) {
       return ((logic_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiNetDeclAssign) {
       return ((logic_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiNetType) {
       return ((logic_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiResolvedNetType) {
       return ((logic_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiScalar) {
       return ((logic_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExplicitScalared) {
       return ((logic_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiSigned) {
       return ((logic_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiSize) {
       return ((logic_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStrength0) {
       return ((logic_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStrength1) {
       return ((logic_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiChargeStrength) {
       return ((logic_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiVector) {
       return ((logic_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiExplicitVectored) {
       return ((logic_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiStructUnionMember) {
       return ((logic_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiLineNo) {
       return ((array_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiType) {
       return ((array_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiArrayMember) {
       return ((array_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiConstantSelect) {
       return ((array_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExpanded) {
       return ((array_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiImplicitDecl) {
       return ((array_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiNetDeclAssign) {
       return ((array_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiNetType) {
       return ((array_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiResolvedNetType) {
       return ((array_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiScalar) {
       return ((array_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExplicitScalared) {
       return ((array_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiSigned) {
       return ((array_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiSize) {
       return ((array_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStrength0) {
       return ((array_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStrength1) {
       return ((array_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiChargeStrength) {
       return ((array_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiVector) {
       return ((array_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiExplicitVectored) {
       return ((array_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiStructUnionMember) {
       return ((array_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiLineNo) {
       return ((packed_array_net*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiPackedArrayMember) {
       return ((packed_array_net*)(obj))->get_vpiPackedArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiType) {
       return ((packed_array_net*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiArrayMember) {
       return ((packed_array_net*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiConstantSelect) {
       return ((packed_array_net*)(obj))->get_vpiConstantSelect();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExpanded) {
       return ((packed_array_net*)(obj))->get_vpiExpanded();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiImplicitDecl) {
       return ((packed_array_net*)(obj))->get_vpiImplicitDecl();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiNetDeclAssign) {
       return ((packed_array_net*)(obj))->get_vpiNetDeclAssign();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiNetType) {
       return ((packed_array_net*)(obj))->get_vpiNetType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiResolvedNetType) {
       return ((packed_array_net*)(obj))->get_vpiResolvedNetType();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiScalar) {
       return ((packed_array_net*)(obj))->get_vpiScalar();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExplicitScalared) {
       return ((packed_array_net*)(obj))->get_vpiExplicitScalared();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiSigned) {
       return ((packed_array_net*)(obj))->get_vpiSigned();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiSize) {
       return ((packed_array_net*)(obj))->get_vpiSize();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStrength0) {
       return ((packed_array_net*)(obj))->get_vpiStrength0();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStrength1) {
       return ((packed_array_net*)(obj))->get_vpiStrength1();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiChargeStrength) {
       return ((packed_array_net*)(obj))->get_vpiChargeStrength();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiVector) {
       return ((packed_array_net*)(obj))->get_vpiVector();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiExplicitVectored) {
       return ((packed_array_net*)(obj))->get_vpiExplicitVectored();
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiStructUnionMember) {
       return ((packed_array_net*)(obj))->get_vpiStructUnionMember();
     } 
}

 if (handle->type == uhdmnamed_event) {
     if (property == vpiLineNo) {
       return ((named_event*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_event) {
     if (property == vpiType) {
       return ((named_event*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (property == vpiLineNo) {
       return ((named_event_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (property == vpiType) {
       return ((named_event_array*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmspec_param) {
     if (property == vpiLineNo) {
       return ((spec_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmspec_param) {
     if (property == vpiType) {
       return ((spec_param*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiLineNo) {
       return ((class_defn*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiType) {
       return ((class_defn*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiLineNo) {
       return ((class_typespec*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiType) {
       return ((class_typespec*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiLineNo) {
       return ((class_obj*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiType) {
       return ((class_obj*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiArrayMember) {
       return ((instance*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCellInstance) {
       return ((instance*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefNetType) {
       return ((instance*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefDelayMode) {
       return ((instance*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiProtected) {
       return ((instance*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimePrecision) {
       return ((instance*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimeUnit) {
       return ((instance*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiUnconnDrive) {
       return ((instance*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiAutomatic) {
       return ((instance*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTop) {
       return ((instance*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiLineNo) {
       return ((interface*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiIndex) {
       return ((interface*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiType) {
       return ((interface*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiArrayMember) {
       return ((interface*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiCellInstance) {
       return ((interface*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefNetType) {
       return ((interface*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefDelayMode) {
       return ((interface*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiProtected) {
       return ((interface*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTimePrecision) {
       return ((interface*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTimeUnit) {
       return ((interface*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiUnconnDrive) {
       return ((interface*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiAutomatic) {
       return ((interface*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiTop) {
       return ((interface*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiLineNo) {
       return ((program*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiIndex) {
       return ((program*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiType) {
       return ((program*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiArrayMember) {
       return ((program*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiCellInstance) {
       return ((program*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefNetType) {
       return ((program*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefDelayMode) {
       return ((program*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiProtected) {
       return ((program*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTimePrecision) {
       return ((program*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTimeUnit) {
       return ((program*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiUnconnDrive) {
       return ((program*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiAutomatic) {
       return ((program*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiTop) {
       return ((program*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLineNo) {
       return ((package*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiType) {
       return ((package*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnit) {
       return ((package*)(obj))->get_vpiUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiArrayMember) {
       return ((package*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCellInstance) {
       return ((package*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefNetType) {
       return ((package*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefDelayMode) {
       return ((package*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiProtected) {
       return ((package*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimePrecision) {
       return ((package*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimeUnit) {
       return ((package*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnconnDrive) {
       return ((package*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiAutomatic) {
       return ((package*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTop) {
       return ((package*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiLineNo) {
       return ((module*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiIndex) {
       return ((module*)(obj))->get_vpiIndex();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiType) {
       return ((module*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTopModule) {
       return ((module*)(obj))->get_vpiTopModule();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDecayTime) {
       return ((module*)(obj))->get_vpiDefDecayTime();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiArrayMember) {
       return ((module*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiCellInstance) {
       return ((module*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefNetType) {
       return ((module*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDelayMode) {
       return ((module*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiProtected) {
       return ((module*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTimePrecision) {
       return ((module*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTimeUnit) {
       return ((module*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiUnconnDrive) {
       return ((module*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiAutomatic) {
       return ((module*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTop) {
       return ((module*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiLineNo) {
       return ((design*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == uhdmdesign) {
       return ((design*)(obj))->get_uhdmdesign();
     } 
}

  return 0;
}

PLI_BYTE8 *vpi_get_str (PLI_INT32 property,
                        vpiHandle   object) {
  if (!object) {
    std::cout << "VPI ERROR: Bad usage of vpi_get_str" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((process*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmproperty_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((property_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmsequence_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((sequence_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmvirtual_interface_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((virtual_interface_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmlet_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((let_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmscope) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((scope*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmscope) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((scope*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((begin*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((begin*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmbegin) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((begin*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((named_begin*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((named_begin*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmnamed_begin) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((named_begin*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((named_fork*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((named_fork*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmnamed_fork) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((named_fork*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((fork_stmt*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((fork_stmt*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmfork_stmt) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((fork_stmt*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((for_stmt*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((for_stmt*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmfor_stmt) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((for_stmt*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((foreach_stmt*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((foreach_stmt*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmforeach_stmt) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((foreach_stmt*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((gen_scope*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((gen_scope*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmgen_scope) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((gen_scope*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmexpr) {
     if (property == vpiDecompile) {
       return (PLI_BYTE8*) strdup(((expr*)(obj))->get_vpiDecompile().c_str());
     } 
}

 if (handle->type == uhdmdistribution) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((distribution*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((operation*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmoperation) {
     if (property == vpiDecompile) {
       return (PLI_BYTE8*) strdup(((operation*)(obj))->get_vpiDecompile().c_str());
     } 
}

 if (handle->type == uhdmpart_select) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((part_select*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((ref_obj*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((ref_obj*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((ref_obj*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmref_obj) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((ref_obj*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdmvar_select) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((var_select*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((variables*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmvariables) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((variables*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((short_real_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((short_real_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmshort_real_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((short_real_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((real_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((real_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmreal_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((real_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((byte_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((byte_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmbyte_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((byte_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((short_int_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((short_int_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmshort_int_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((short_int_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((int_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((int_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmint_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((int_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((long_int_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((long_int_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmlong_int_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((long_int_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((integer_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((integer_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminteger_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((integer_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((time_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((time_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmtime_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((time_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((array_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((array_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmarray_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((array_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((packed_array_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((packed_array_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((packed_array_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((bit_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((bit_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmbit_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((bit_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((logic_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((logic_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmlogic_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((logic_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((struct_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((struct_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmstruct_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((struct_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((union_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((union_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmunion_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((union_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((enum_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((enum_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmenum_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((enum_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((string_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((string_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmstring_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((string_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((chandle_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((chandle_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmchandle_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((chandle_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((class_var*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((class_var*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmclass_var) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((class_var*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((var_bit*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((var_bit*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmvar_bit) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((var_bit*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiDPICIdentifier) {
       return (PLI_BYTE8*) strdup(((task_func*)(obj))->get_vpiDPICIdentifier().c_str());
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((task_func*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmtask_func) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((task_func*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((task*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiDPICIdentifier) {
       return (PLI_BYTE8*) strdup(((task*)(obj))->get_vpiDPICIdentifier().c_str());
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((task*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((task*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((function*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiDPICIdentifier) {
       return (PLI_BYTE8*) strdup(((function*)(obj))->get_vpiDPICIdentifier().c_str());
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((function*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((function*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((modport*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((modport*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface_tf_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((cont_assign*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((ports*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmports) {
     if (property == vpiExplicitName) {
       return (PLI_BYTE8*) strdup(((ports*)(obj))->get_vpiExplicitName().c_str());
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((port*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((port*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiExplicitName) {
       return (PLI_BYTE8*) strdup(((port*)(obj))->get_vpiExplicitName().c_str());
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((port_bit*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((port_bit*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmport_bit) {
     if (property == vpiExplicitName) {
       return (PLI_BYTE8*) strdup(((port_bit*)(obj))->get_vpiExplicitName().c_str());
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((primitive*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((mod_path*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((tchk*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((def_param*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmrange) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((range*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmudp_defn) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((udp_defn*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((io_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((io_decl*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((alias_stmt*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((clocking_block*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((clocking_block*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((clocking_block*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmparam_assign) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((param_assign*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((instance_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((instance_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((interface_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((interface_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((program_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((program_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmprogram_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((program_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((module_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((module_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((module_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((primitive_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((primitive_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((gate_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((gate_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmgate_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((gate_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((switch_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((switch_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmswitch_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((switch_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((udp_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((udp_array*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmudp_array) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((udp_array*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmprim_term) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((prim_term*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmpath_term) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((path_term*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtchk_term) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((tchk_term*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((nets*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmnets) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((nets*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((net_bit*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((net_bit*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmnet_bit) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((net_bit*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmnet) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((struct_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((struct_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmstruct_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((struct_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((enum_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((enum_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmenum_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((enum_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((integer_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((integer_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminteger_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((integer_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((time_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((time_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmtime_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((time_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((logic_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((logic_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmlogic_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((logic_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((array_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((array_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmarray_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((array_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((packed_array_net*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((packed_array_net*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmpacked_array_net) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((packed_array_net*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmnamed_event) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((named_event*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmnamed_event_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((named_event_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmspec_param) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((spec_param*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((class_defn*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((class_defn*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmclass_defn) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((class_defn*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((class_typespec*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((class_typespec*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmclass_typespec) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((class_typespec*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((class_obj*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((class_obj*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmclass_obj) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((class_obj*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((design*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((design*)(obj))->get_vpiName().c_str());
     } 
}

  return 0;
}


/* delay processing */

void vpi_get_delays (vpiHandle object,
                     p_vpi_delay delay_p) {
}

void vpi_put_delays (vpiHandle object,
                     p_vpi_delay delay_p) {
}

/* value processing */

void vpi_get_value (vpiHandle expr,
                    p_vpi_value value_p) {
}

vpiHandle vpi_put_value (vpiHandle object,
                         p_vpi_value value_p,
                         p_vpi_time time_p,
                         PLI_INT32 flags) {
  return 0;
}

void vpi_get_value_array (vpiHandle object,
                          p_vpi_arrayvalue arrayvalue_p,
                          PLI_INT32 *index_p,
                          PLI_UINT32 num) {
}

void vpi_put_value_array (vpiHandle object,
                          p_vpi_arrayvalue arrayvalue_p,
                          PLI_INT32 *index_p,
                          PLI_UINT32 num) {
}

/* time processing */

void vpi_get_time(vpiHandle object,
                  p_vpi_time time_p) {
}


PLI_INT32 vpi_get_data (PLI_INT32 id,
                        PLI_BYTE8 *dataLoc,
			PLI_INT32 numOfBytes) {
  return 0;
}

PLI_INT32 vpi_put_data (PLI_INT32 id,
                        PLI_BYTE8 *dataLoc,
			PLI_INT32 numOfBytes) {
  return 0;
}

void *vpi_get_userdata (vpiHandle obj) {
  return 0;
}

PLI_INT32 vpi_put_userdata (vpiHandle obj,
                            void *userdata) {
  return 0;
}

vpiHandle vpi_handle_by_multi_index (vpiHandle obj,
                                     PLI_INT32 num_index,
                                     PLI_INT32 *index_array) {
  return 0;
}

