// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: UHDM.capnp

#ifndef CAPNP_INCLUDED_fff7299129556877_
#define CAPNP_INCLUDED_fff7299129556877_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b66216fa2045535b);
CAPNP_DECLARE_SCHEMA(b2bce98887da19bc);
CAPNP_DECLARE_SCHEMA(c4de5d61fdda1fc2);
CAPNP_DECLARE_SCHEMA(a96500bf50de815c);
CAPNP_DECLARE_SCHEMA(a4c84ac8ec368d0d);
CAPNP_DECLARE_SCHEMA(f57d5f50009467b5);
CAPNP_DECLARE_SCHEMA(ab5b03f8c71793f1);
CAPNP_DECLARE_SCHEMA(e4d908a186cb8c2b);
CAPNP_DECLARE_SCHEMA(b61d98ea52110eb2);
CAPNP_DECLARE_SCHEMA(ad9368ac08dc00e8);
CAPNP_DECLARE_SCHEMA(f701a1c7bc57f1d0);
CAPNP_DECLARE_SCHEMA(de0b57cfcd659c53);
CAPNP_DECLARE_SCHEMA(fa8dc6cb525b350d);
CAPNP_DECLARE_SCHEMA(8bbb58bf58277e5f);
CAPNP_DECLARE_SCHEMA(86086f8cd3c871da);
CAPNP_DECLARE_SCHEMA(b8f78b9bbf575136);
CAPNP_DECLARE_SCHEMA(98c57e00750476bc);
CAPNP_DECLARE_SCHEMA(9a56f7b93f159d0f);
CAPNP_DECLARE_SCHEMA(88e90ea0d244024c);
CAPNP_DECLARE_SCHEMA(9b8d55ddb3b5c214);
CAPNP_DECLARE_SCHEMA(f62f0e3c174a4e2d);
CAPNP_DECLARE_SCHEMA(fef49a928fa851ae);
CAPNP_DECLARE_SCHEMA(e1515ab6840a5ff9);
CAPNP_DECLARE_SCHEMA(8feaedaa957bb024);
CAPNP_DECLARE_SCHEMA(e1aa8c31614c905d);
CAPNP_DECLARE_SCHEMA(b90b3571647c7208);
CAPNP_DECLARE_SCHEMA(898f42e70d8b6003);
CAPNP_DECLARE_SCHEMA(bff7f934572426f6);
CAPNP_DECLARE_SCHEMA(d6e2f6656a44b1c6);
CAPNP_DECLARE_SCHEMA(c4b3054c3aebb532);
CAPNP_DECLARE_SCHEMA(cbf93d1c1593b642);
CAPNP_DECLARE_SCHEMA(a52a1bfd03b57463);
CAPNP_DECLARE_SCHEMA(fe66ff5c2b1c4ded);
CAPNP_DECLARE_SCHEMA(d066ccd0e762bb93);
CAPNP_DECLARE_SCHEMA(b93be17ea929890d);
CAPNP_DECLARE_SCHEMA(cd00a616888dace8);
CAPNP_DECLARE_SCHEMA(c88a3249d02bb59c);
CAPNP_DECLARE_SCHEMA(c0dbf31c4fe84a9f);
CAPNP_DECLARE_SCHEMA(9f591135f29e5892);
CAPNP_DECLARE_SCHEMA(d0a8f41c104ebf1c);
CAPNP_DECLARE_SCHEMA(b4eea6df5a3cb40c);
CAPNP_DECLARE_SCHEMA(a1c6ed39e4545f74);
CAPNP_DECLARE_SCHEMA(9227d3f15c9cc33f);
CAPNP_DECLARE_SCHEMA(f71f31bc84a287dc);
CAPNP_DECLARE_SCHEMA(b7ecef5e3bbfcb63);
CAPNP_DECLARE_SCHEMA(ca2c53a62aa79635);
CAPNP_DECLARE_SCHEMA(b0574b7e87c89580);
CAPNP_DECLARE_SCHEMA(f4c7c9090f7f65ff);
CAPNP_DECLARE_SCHEMA(fadf6fefcc8670a1);
CAPNP_DECLARE_SCHEMA(dec7ca006033920c);
CAPNP_DECLARE_SCHEMA(d006bdb99f22bf6a);
CAPNP_DECLARE_SCHEMA(838f7452c487badf);
CAPNP_DECLARE_SCHEMA(f171f28f75e452e6);
CAPNP_DECLARE_SCHEMA(cfa270b7ddc80a04);
CAPNP_DECLARE_SCHEMA(ba539a52fdf9f899);
CAPNP_DECLARE_SCHEMA(a0c61698af16b048);
CAPNP_DECLARE_SCHEMA(86cab2b3c72285d7);
CAPNP_DECLARE_SCHEMA(e5223805a4f89b66);
CAPNP_DECLARE_SCHEMA(b0c8c9d578e9c276);
CAPNP_DECLARE_SCHEMA(ef2cfce5497fccde);
CAPNP_DECLARE_SCHEMA(9aa2ba2db6cf5907);
CAPNP_DECLARE_SCHEMA(ec0e30176f5c8354);
CAPNP_DECLARE_SCHEMA(d599315921611cd1);
CAPNP_DECLARE_SCHEMA(ce960fe951191a58);
CAPNP_DECLARE_SCHEMA(9ec6980efda11513);
CAPNP_DECLARE_SCHEMA(9ad82b4dfaa96b95);
CAPNP_DECLARE_SCHEMA(eafba402a7fa6ef8);
CAPNP_DECLARE_SCHEMA(9bb658d5d80e9b6a);
CAPNP_DECLARE_SCHEMA(8ba4951f126c7680);
CAPNP_DECLARE_SCHEMA(aa15b00d449af215);
CAPNP_DECLARE_SCHEMA(a991beecec5a8d2a);
CAPNP_DECLARE_SCHEMA(bc1f7cc00d53f7ff);
CAPNP_DECLARE_SCHEMA(91c045e5ff30dd47);
CAPNP_DECLARE_SCHEMA(8f1c0a47c6ecb7dd);
CAPNP_DECLARE_SCHEMA(9f755d38de26a019);
CAPNP_DECLARE_SCHEMA(ba336cb57cb68222);
CAPNP_DECLARE_SCHEMA(bb8c12feb2e2fb5b);
CAPNP_DECLARE_SCHEMA(c12feda1e7935b61);
CAPNP_DECLARE_SCHEMA(f204710c1a739934);
CAPNP_DECLARE_SCHEMA(b8a08b2787e1997f);
CAPNP_DECLARE_SCHEMA(dfd588e26996d1a6);
CAPNP_DECLARE_SCHEMA(ff343c185370b513);
CAPNP_DECLARE_SCHEMA(bcba8efb52090304);

}  // namespace schemas
}  // namespace capnp


struct ObjIndexType {
  ObjIndexType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b66216fa2045535b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UhdmRoot {
  UhdmRoot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2bce98887da19bc, 0, 83)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4de5d61fdda1fc2, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Propertydecl {
  Propertydecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a96500bf50de815c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sequencedecl {
  Sequencedecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4c84ac8ec368d0d, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Virtualinterfacevar {
  Virtualinterfacevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f57d5f50009467b5, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Letdecl {
  Letdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab5b03f8c71793f1, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Begin {
  Begin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4d908a186cb8c2b, 6, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedbegin {
  Namedbegin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b61d98ea52110eb2, 6, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedfork {
  Namedfork() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad9368ac08dc00e8, 7, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Forkstmt {
  Forkstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f701a1c7bc57f1d0, 7, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Forstmt {
  Forstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de0b57cfcd659c53, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Foreachstmt {
  Foreachstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa8dc6cb525b350d, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Genscope {
  Genscope() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bbb58bf58277e5f, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Distribution {
  Distribution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86086f8cd3c871da, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Operation {
  Operation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8f78b9bbf575136, 7, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Partselect {
  Partselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98c57e00750476bc, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Refobj {
  Refobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a56f7b93f159d0f, 7, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Varselect {
  Varselect() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88e90ea0d244024c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortrealvar {
  Shortrealvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b8d55ddb3b5c214, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Realvar {
  Realvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f62f0e3c174a4e2d, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bytevar {
  Bytevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fef49a928fa851ae, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Shortintvar {
  Shortintvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1515ab6840a5ff9, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Intvar {
  Intvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8feaedaa957bb024, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Longintvar {
  Longintvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1aa8c31614c905d, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Integervar {
  Integervar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b90b3571647c7208, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Timevar {
  Timevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(898f42e70d8b6003, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arrayvar {
  Arrayvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bff7f934572426f6, 15, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packedarrayvar {
  Packedarrayvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6e2f6656a44b1c6, 13, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bitvar {
  Bitvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4b3054c3aebb532, 13, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Logicvar {
  Logicvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbf93d1c1593b642, 13, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structvar {
  Structvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a52a1bfd03b57463, 13, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Unionvar {
  Unionvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe66ff5c2b1c4ded, 13, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumvar {
  Enumvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d066ccd0e762bb93, 13, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Stringvar {
  Stringvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b93be17ea929890d, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Chandlevar {
  Chandlevar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd00a616888dace8, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classvar {
  Classvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c88a3249d02bb59c, 13, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Varbit {
  Varbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0dbf31c4fe84a9f, 13, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Task {
  Task() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f591135f29e5892, 13, 18)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Function {
  Function() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0a8f41c104ebf1c, 15, 18)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modport {
  Modport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4eea6df5a3cb40c, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfacetfdecl {
  Interfacetfdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1c6ed39e4545f74, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Contassign {
  Contassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9227d3f15c9cc33f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Port {
  Port() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f71f31bc84a287dc, 11, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Portbit {
  Portbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7ecef5e3bbfcb63, 11, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Primitive {
  Primitive() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca2c53a62aa79635, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modpath {
  Modpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0574b7e87c89580, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tchk {
  Tchk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4c7c9090f7f65ff, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Defparam {
  Defparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fadf6fefcc8670a1, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Range {
  Range() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dec7ca006033920c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Udpdefn {
  Udpdefn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d006bdb99f22bf6a, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Iodecl {
  Iodecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(838f7452c487badf, 9, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Aliasstmt {
  Aliasstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f171f28f75e452e6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clockingblock {
  Clockingblock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa270b7ddc80a04, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Paramassign {
  Paramassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba539a52fdf9f899, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interfacearray {
  Interfacearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0c61698af16b048, 7, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Programarray {
  Programarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86cab2b3c72285d7, 7, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Modulearray {
  Modulearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5223805a4f89b66, 7, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gatearray {
  Gatearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0c8c9d578e9c276, 7, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Switcharray {
  Switcharray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef2cfce5497fccde, 7, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Udparray {
  Udparray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa2ba2db6cf5907, 7, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Primterm {
  Primterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec0e30176f5c8354, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Pathterm {
  Pathterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d599315921611cd1, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tchkterm {
  Tchkterm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce960fe951191a58, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Netbit {
  Netbit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ec6980efda11513, 13, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Structnet {
  Structnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ad82b4dfaa96b95, 13, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Enumnet {
  Enumnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eafba402a7fa6ef8, 13, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Integernet {
  Integernet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bb658d5d80e9b6a, 13, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Timenet {
  Timenet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ba4951f126c7680, 13, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Logicnet {
  Logicnet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa15b00d449af215, 13, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arraynet {
  Arraynet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a991beecec5a8d2a, 13, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packedarraynet {
  Packedarraynet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc1f7cc00d53f7ff, 13, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedevent {
  Namedevent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91c045e5ff30dd47, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Namedeventarray {
  Namedeventarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f1c0a47c6ecb7dd, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Specparam {
  Specparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f755d38de26a019, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classdefn {
  Classdefn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba336cb57cb68222, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classtypespec {
  Classtypespec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb8c12feb2e2fb5b, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Classobj {
  Classobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c12feda1e7935b61, 6, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Interface {
  Interface() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f204710c1a739934, 20, 35)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Program {
  Program() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8a08b2787e1997f, 19, 33)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Package {
  Package() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfd588e26996d1a6, 17, 26)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Module {
  Module() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff343c185370b513, 22, 43)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Design {
  Design() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcba8efb52090304, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ObjIndexType::Reader {
public:
  typedef ObjIndexType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjIndexType::Builder {
public:
  typedef ObjIndexType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjIndexType::Pipeline {
public:
  typedef ObjIndexType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UhdmRoot::Reader {
public:
  typedef UhdmRoot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDesigns() const;
  inline  ::capnp::List< ::Design>::Reader getDesigns() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getSymbols() const;

  inline bool hasFactoryProcess() const;
  inline  ::capnp::List< ::Process>::Reader getFactoryProcess() const;

  inline bool hasFactoryPropertydecl() const;
  inline  ::capnp::List< ::Propertydecl>::Reader getFactoryPropertydecl() const;

  inline bool hasFactorySequencedecl() const;
  inline  ::capnp::List< ::Sequencedecl>::Reader getFactorySequencedecl() const;

  inline bool hasFactoryVirtualinterfacevar() const;
  inline  ::capnp::List< ::Virtualinterfacevar>::Reader getFactoryVirtualinterfacevar() const;

  inline bool hasFactoryLetdecl() const;
  inline  ::capnp::List< ::Letdecl>::Reader getFactoryLetdecl() const;

  inline bool hasFactoryBegin() const;
  inline  ::capnp::List< ::Begin>::Reader getFactoryBegin() const;

  inline bool hasFactoryNamedbegin() const;
  inline  ::capnp::List< ::Namedbegin>::Reader getFactoryNamedbegin() const;

  inline bool hasFactoryNamedfork() const;
  inline  ::capnp::List< ::Namedfork>::Reader getFactoryNamedfork() const;

  inline bool hasFactoryForkstmt() const;
  inline  ::capnp::List< ::Forkstmt>::Reader getFactoryForkstmt() const;

  inline bool hasFactoryForstmt() const;
  inline  ::capnp::List< ::Forstmt>::Reader getFactoryForstmt() const;

  inline bool hasFactoryForeachstmt() const;
  inline  ::capnp::List< ::Foreachstmt>::Reader getFactoryForeachstmt() const;

  inline bool hasFactoryGenscope() const;
  inline  ::capnp::List< ::Genscope>::Reader getFactoryGenscope() const;

  inline bool hasFactoryDistribution() const;
  inline  ::capnp::List< ::Distribution>::Reader getFactoryDistribution() const;

  inline bool hasFactoryOperation() const;
  inline  ::capnp::List< ::Operation>::Reader getFactoryOperation() const;

  inline bool hasFactoryPartselect() const;
  inline  ::capnp::List< ::Partselect>::Reader getFactoryPartselect() const;

  inline bool hasFactoryRefobj() const;
  inline  ::capnp::List< ::Refobj>::Reader getFactoryRefobj() const;

  inline bool hasFactoryVarselect() const;
  inline  ::capnp::List< ::Varselect>::Reader getFactoryVarselect() const;

  inline bool hasFactoryShortrealvar() const;
  inline  ::capnp::List< ::Shortrealvar>::Reader getFactoryShortrealvar() const;

  inline bool hasFactoryRealvar() const;
  inline  ::capnp::List< ::Realvar>::Reader getFactoryRealvar() const;

  inline bool hasFactoryBytevar() const;
  inline  ::capnp::List< ::Bytevar>::Reader getFactoryBytevar() const;

  inline bool hasFactoryShortintvar() const;
  inline  ::capnp::List< ::Shortintvar>::Reader getFactoryShortintvar() const;

  inline bool hasFactoryIntvar() const;
  inline  ::capnp::List< ::Intvar>::Reader getFactoryIntvar() const;

  inline bool hasFactoryLongintvar() const;
  inline  ::capnp::List< ::Longintvar>::Reader getFactoryLongintvar() const;

  inline bool hasFactoryIntegervar() const;
  inline  ::capnp::List< ::Integervar>::Reader getFactoryIntegervar() const;

  inline bool hasFactoryTimevar() const;
  inline  ::capnp::List< ::Timevar>::Reader getFactoryTimevar() const;

  inline bool hasFactoryArrayvar() const;
  inline  ::capnp::List< ::Arrayvar>::Reader getFactoryArrayvar() const;

  inline bool hasFactoryPackedarrayvar() const;
  inline  ::capnp::List< ::Packedarrayvar>::Reader getFactoryPackedarrayvar() const;

  inline bool hasFactoryBitvar() const;
  inline  ::capnp::List< ::Bitvar>::Reader getFactoryBitvar() const;

  inline bool hasFactoryLogicvar() const;
  inline  ::capnp::List< ::Logicvar>::Reader getFactoryLogicvar() const;

  inline bool hasFactoryStructvar() const;
  inline  ::capnp::List< ::Structvar>::Reader getFactoryStructvar() const;

  inline bool hasFactoryUnionvar() const;
  inline  ::capnp::List< ::Unionvar>::Reader getFactoryUnionvar() const;

  inline bool hasFactoryEnumvar() const;
  inline  ::capnp::List< ::Enumvar>::Reader getFactoryEnumvar() const;

  inline bool hasFactoryStringvar() const;
  inline  ::capnp::List< ::Stringvar>::Reader getFactoryStringvar() const;

  inline bool hasFactoryChandlevar() const;
  inline  ::capnp::List< ::Chandlevar>::Reader getFactoryChandlevar() const;

  inline bool hasFactoryClassvar() const;
  inline  ::capnp::List< ::Classvar>::Reader getFactoryClassvar() const;

  inline bool hasFactoryVarbit() const;
  inline  ::capnp::List< ::Varbit>::Reader getFactoryVarbit() const;

  inline bool hasFactoryTask() const;
  inline  ::capnp::List< ::Task>::Reader getFactoryTask() const;

  inline bool hasFactoryFunction() const;
  inline  ::capnp::List< ::Function>::Reader getFactoryFunction() const;

  inline bool hasFactoryModport() const;
  inline  ::capnp::List< ::Modport>::Reader getFactoryModport() const;

  inline bool hasFactoryInterfacetfdecl() const;
  inline  ::capnp::List< ::Interfacetfdecl>::Reader getFactoryInterfacetfdecl() const;

  inline bool hasFactoryContassign() const;
  inline  ::capnp::List< ::Contassign>::Reader getFactoryContassign() const;

  inline bool hasFactoryPort() const;
  inline  ::capnp::List< ::Port>::Reader getFactoryPort() const;

  inline bool hasFactoryPortbit() const;
  inline  ::capnp::List< ::Portbit>::Reader getFactoryPortbit() const;

  inline bool hasFactoryPrimitive() const;
  inline  ::capnp::List< ::Primitive>::Reader getFactoryPrimitive() const;

  inline bool hasFactoryModpath() const;
  inline  ::capnp::List< ::Modpath>::Reader getFactoryModpath() const;

  inline bool hasFactoryTchk() const;
  inline  ::capnp::List< ::Tchk>::Reader getFactoryTchk() const;

  inline bool hasFactoryDefparam() const;
  inline  ::capnp::List< ::Defparam>::Reader getFactoryDefparam() const;

  inline bool hasFactoryRange() const;
  inline  ::capnp::List< ::Range>::Reader getFactoryRange() const;

  inline bool hasFactoryUdpdefn() const;
  inline  ::capnp::List< ::Udpdefn>::Reader getFactoryUdpdefn() const;

  inline bool hasFactoryIodecl() const;
  inline  ::capnp::List< ::Iodecl>::Reader getFactoryIodecl() const;

  inline bool hasFactoryAliasstmt() const;
  inline  ::capnp::List< ::Aliasstmt>::Reader getFactoryAliasstmt() const;

  inline bool hasFactoryClockingblock() const;
  inline  ::capnp::List< ::Clockingblock>::Reader getFactoryClockingblock() const;

  inline bool hasFactoryParamassign() const;
  inline  ::capnp::List< ::Paramassign>::Reader getFactoryParamassign() const;

  inline bool hasFactoryInterfacearray() const;
  inline  ::capnp::List< ::Interfacearray>::Reader getFactoryInterfacearray() const;

  inline bool hasFactoryProgramarray() const;
  inline  ::capnp::List< ::Programarray>::Reader getFactoryProgramarray() const;

  inline bool hasFactoryModulearray() const;
  inline  ::capnp::List< ::Modulearray>::Reader getFactoryModulearray() const;

  inline bool hasFactoryGatearray() const;
  inline  ::capnp::List< ::Gatearray>::Reader getFactoryGatearray() const;

  inline bool hasFactorySwitcharray() const;
  inline  ::capnp::List< ::Switcharray>::Reader getFactorySwitcharray() const;

  inline bool hasFactoryUdparray() const;
  inline  ::capnp::List< ::Udparray>::Reader getFactoryUdparray() const;

  inline bool hasFactoryPrimterm() const;
  inline  ::capnp::List< ::Primterm>::Reader getFactoryPrimterm() const;

  inline bool hasFactoryPathterm() const;
  inline  ::capnp::List< ::Pathterm>::Reader getFactoryPathterm() const;

  inline bool hasFactoryTchkterm() const;
  inline  ::capnp::List< ::Tchkterm>::Reader getFactoryTchkterm() const;

  inline bool hasFactoryNetbit() const;
  inline  ::capnp::List< ::Netbit>::Reader getFactoryNetbit() const;

  inline bool hasFactoryStructnet() const;
  inline  ::capnp::List< ::Structnet>::Reader getFactoryStructnet() const;

  inline bool hasFactoryEnumnet() const;
  inline  ::capnp::List< ::Enumnet>::Reader getFactoryEnumnet() const;

  inline bool hasFactoryIntegernet() const;
  inline  ::capnp::List< ::Integernet>::Reader getFactoryIntegernet() const;

  inline bool hasFactoryTimenet() const;
  inline  ::capnp::List< ::Timenet>::Reader getFactoryTimenet() const;

  inline bool hasFactoryLogicnet() const;
  inline  ::capnp::List< ::Logicnet>::Reader getFactoryLogicnet() const;

  inline bool hasFactoryArraynet() const;
  inline  ::capnp::List< ::Arraynet>::Reader getFactoryArraynet() const;

  inline bool hasFactoryPackedarraynet() const;
  inline  ::capnp::List< ::Packedarraynet>::Reader getFactoryPackedarraynet() const;

  inline bool hasFactoryNamedevent() const;
  inline  ::capnp::List< ::Namedevent>::Reader getFactoryNamedevent() const;

  inline bool hasFactoryNamedeventarray() const;
  inline  ::capnp::List< ::Namedeventarray>::Reader getFactoryNamedeventarray() const;

  inline bool hasFactorySpecparam() const;
  inline  ::capnp::List< ::Specparam>::Reader getFactorySpecparam() const;

  inline bool hasFactoryClassdefn() const;
  inline  ::capnp::List< ::Classdefn>::Reader getFactoryClassdefn() const;

  inline bool hasFactoryClasstypespec() const;
  inline  ::capnp::List< ::Classtypespec>::Reader getFactoryClasstypespec() const;

  inline bool hasFactoryClassobj() const;
  inline  ::capnp::List< ::Classobj>::Reader getFactoryClassobj() const;

  inline bool hasFactoryInterface() const;
  inline  ::capnp::List< ::Interface>::Reader getFactoryInterface() const;

  inline bool hasFactoryProgram() const;
  inline  ::capnp::List< ::Program>::Reader getFactoryProgram() const;

  inline bool hasFactoryPackage() const;
  inline  ::capnp::List< ::Package>::Reader getFactoryPackage() const;

  inline bool hasFactoryModule() const;
  inline  ::capnp::List< ::Module>::Reader getFactoryModule() const;

  inline bool hasFactoryDesign() const;
  inline  ::capnp::List< ::Design>::Reader getFactoryDesign() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UhdmRoot::Builder {
public:
  typedef UhdmRoot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDesigns();
  inline  ::capnp::List< ::Design>::Builder getDesigns();
  inline void setDesigns( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initDesigns(unsigned int size);
  inline void adoptDesigns(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownDesigns();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownSymbols();

  inline bool hasFactoryProcess();
  inline  ::capnp::List< ::Process>::Builder getFactoryProcess();
  inline void setFactoryProcess( ::capnp::List< ::Process>::Reader value);
  inline  ::capnp::List< ::Process>::Builder initFactoryProcess(unsigned int size);
  inline void adoptFactoryProcess(::capnp::Orphan< ::capnp::List< ::Process>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Process>> disownFactoryProcess();

  inline bool hasFactoryPropertydecl();
  inline  ::capnp::List< ::Propertydecl>::Builder getFactoryPropertydecl();
  inline void setFactoryPropertydecl( ::capnp::List< ::Propertydecl>::Reader value);
  inline  ::capnp::List< ::Propertydecl>::Builder initFactoryPropertydecl(unsigned int size);
  inline void adoptFactoryPropertydecl(::capnp::Orphan< ::capnp::List< ::Propertydecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Propertydecl>> disownFactoryPropertydecl();

  inline bool hasFactorySequencedecl();
  inline  ::capnp::List< ::Sequencedecl>::Builder getFactorySequencedecl();
  inline void setFactorySequencedecl( ::capnp::List< ::Sequencedecl>::Reader value);
  inline  ::capnp::List< ::Sequencedecl>::Builder initFactorySequencedecl(unsigned int size);
  inline void adoptFactorySequencedecl(::capnp::Orphan< ::capnp::List< ::Sequencedecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Sequencedecl>> disownFactorySequencedecl();

  inline bool hasFactoryVirtualinterfacevar();
  inline  ::capnp::List< ::Virtualinterfacevar>::Builder getFactoryVirtualinterfacevar();
  inline void setFactoryVirtualinterfacevar( ::capnp::List< ::Virtualinterfacevar>::Reader value);
  inline  ::capnp::List< ::Virtualinterfacevar>::Builder initFactoryVirtualinterfacevar(unsigned int size);
  inline void adoptFactoryVirtualinterfacevar(::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar>> disownFactoryVirtualinterfacevar();

  inline bool hasFactoryLetdecl();
  inline  ::capnp::List< ::Letdecl>::Builder getFactoryLetdecl();
  inline void setFactoryLetdecl( ::capnp::List< ::Letdecl>::Reader value);
  inline  ::capnp::List< ::Letdecl>::Builder initFactoryLetdecl(unsigned int size);
  inline void adoptFactoryLetdecl(::capnp::Orphan< ::capnp::List< ::Letdecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Letdecl>> disownFactoryLetdecl();

  inline bool hasFactoryBegin();
  inline  ::capnp::List< ::Begin>::Builder getFactoryBegin();
  inline void setFactoryBegin( ::capnp::List< ::Begin>::Reader value);
  inline  ::capnp::List< ::Begin>::Builder initFactoryBegin(unsigned int size);
  inline void adoptFactoryBegin(::capnp::Orphan< ::capnp::List< ::Begin>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Begin>> disownFactoryBegin();

  inline bool hasFactoryNamedbegin();
  inline  ::capnp::List< ::Namedbegin>::Builder getFactoryNamedbegin();
  inline void setFactoryNamedbegin( ::capnp::List< ::Namedbegin>::Reader value);
  inline  ::capnp::List< ::Namedbegin>::Builder initFactoryNamedbegin(unsigned int size);
  inline void adoptFactoryNamedbegin(::capnp::Orphan< ::capnp::List< ::Namedbegin>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedbegin>> disownFactoryNamedbegin();

  inline bool hasFactoryNamedfork();
  inline  ::capnp::List< ::Namedfork>::Builder getFactoryNamedfork();
  inline void setFactoryNamedfork( ::capnp::List< ::Namedfork>::Reader value);
  inline  ::capnp::List< ::Namedfork>::Builder initFactoryNamedfork(unsigned int size);
  inline void adoptFactoryNamedfork(::capnp::Orphan< ::capnp::List< ::Namedfork>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedfork>> disownFactoryNamedfork();

  inline bool hasFactoryForkstmt();
  inline  ::capnp::List< ::Forkstmt>::Builder getFactoryForkstmt();
  inline void setFactoryForkstmt( ::capnp::List< ::Forkstmt>::Reader value);
  inline  ::capnp::List< ::Forkstmt>::Builder initFactoryForkstmt(unsigned int size);
  inline void adoptFactoryForkstmt(::capnp::Orphan< ::capnp::List< ::Forkstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Forkstmt>> disownFactoryForkstmt();

  inline bool hasFactoryForstmt();
  inline  ::capnp::List< ::Forstmt>::Builder getFactoryForstmt();
  inline void setFactoryForstmt( ::capnp::List< ::Forstmt>::Reader value);
  inline  ::capnp::List< ::Forstmt>::Builder initFactoryForstmt(unsigned int size);
  inline void adoptFactoryForstmt(::capnp::Orphan< ::capnp::List< ::Forstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Forstmt>> disownFactoryForstmt();

  inline bool hasFactoryForeachstmt();
  inline  ::capnp::List< ::Foreachstmt>::Builder getFactoryForeachstmt();
  inline void setFactoryForeachstmt( ::capnp::List< ::Foreachstmt>::Reader value);
  inline  ::capnp::List< ::Foreachstmt>::Builder initFactoryForeachstmt(unsigned int size);
  inline void adoptFactoryForeachstmt(::capnp::Orphan< ::capnp::List< ::Foreachstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Foreachstmt>> disownFactoryForeachstmt();

  inline bool hasFactoryGenscope();
  inline  ::capnp::List< ::Genscope>::Builder getFactoryGenscope();
  inline void setFactoryGenscope( ::capnp::List< ::Genscope>::Reader value);
  inline  ::capnp::List< ::Genscope>::Builder initFactoryGenscope(unsigned int size);
  inline void adoptFactoryGenscope(::capnp::Orphan< ::capnp::List< ::Genscope>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Genscope>> disownFactoryGenscope();

  inline bool hasFactoryDistribution();
  inline  ::capnp::List< ::Distribution>::Builder getFactoryDistribution();
  inline void setFactoryDistribution( ::capnp::List< ::Distribution>::Reader value);
  inline  ::capnp::List< ::Distribution>::Builder initFactoryDistribution(unsigned int size);
  inline void adoptFactoryDistribution(::capnp::Orphan< ::capnp::List< ::Distribution>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Distribution>> disownFactoryDistribution();

  inline bool hasFactoryOperation();
  inline  ::capnp::List< ::Operation>::Builder getFactoryOperation();
  inline void setFactoryOperation( ::capnp::List< ::Operation>::Reader value);
  inline  ::capnp::List< ::Operation>::Builder initFactoryOperation(unsigned int size);
  inline void adoptFactoryOperation(::capnp::Orphan< ::capnp::List< ::Operation>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Operation>> disownFactoryOperation();

  inline bool hasFactoryPartselect();
  inline  ::capnp::List< ::Partselect>::Builder getFactoryPartselect();
  inline void setFactoryPartselect( ::capnp::List< ::Partselect>::Reader value);
  inline  ::capnp::List< ::Partselect>::Builder initFactoryPartselect(unsigned int size);
  inline void adoptFactoryPartselect(::capnp::Orphan< ::capnp::List< ::Partselect>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Partselect>> disownFactoryPartselect();

  inline bool hasFactoryRefobj();
  inline  ::capnp::List< ::Refobj>::Builder getFactoryRefobj();
  inline void setFactoryRefobj( ::capnp::List< ::Refobj>::Reader value);
  inline  ::capnp::List< ::Refobj>::Builder initFactoryRefobj(unsigned int size);
  inline void adoptFactoryRefobj(::capnp::Orphan< ::capnp::List< ::Refobj>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Refobj>> disownFactoryRefobj();

  inline bool hasFactoryVarselect();
  inline  ::capnp::List< ::Varselect>::Builder getFactoryVarselect();
  inline void setFactoryVarselect( ::capnp::List< ::Varselect>::Reader value);
  inline  ::capnp::List< ::Varselect>::Builder initFactoryVarselect(unsigned int size);
  inline void adoptFactoryVarselect(::capnp::Orphan< ::capnp::List< ::Varselect>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Varselect>> disownFactoryVarselect();

  inline bool hasFactoryShortrealvar();
  inline  ::capnp::List< ::Shortrealvar>::Builder getFactoryShortrealvar();
  inline void setFactoryShortrealvar( ::capnp::List< ::Shortrealvar>::Reader value);
  inline  ::capnp::List< ::Shortrealvar>::Builder initFactoryShortrealvar(unsigned int size);
  inline void adoptFactoryShortrealvar(::capnp::Orphan< ::capnp::List< ::Shortrealvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortrealvar>> disownFactoryShortrealvar();

  inline bool hasFactoryRealvar();
  inline  ::capnp::List< ::Realvar>::Builder getFactoryRealvar();
  inline void setFactoryRealvar( ::capnp::List< ::Realvar>::Reader value);
  inline  ::capnp::List< ::Realvar>::Builder initFactoryRealvar(unsigned int size);
  inline void adoptFactoryRealvar(::capnp::Orphan< ::capnp::List< ::Realvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Realvar>> disownFactoryRealvar();

  inline bool hasFactoryBytevar();
  inline  ::capnp::List< ::Bytevar>::Builder getFactoryBytevar();
  inline void setFactoryBytevar( ::capnp::List< ::Bytevar>::Reader value);
  inline  ::capnp::List< ::Bytevar>::Builder initFactoryBytevar(unsigned int size);
  inline void adoptFactoryBytevar(::capnp::Orphan< ::capnp::List< ::Bytevar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bytevar>> disownFactoryBytevar();

  inline bool hasFactoryShortintvar();
  inline  ::capnp::List< ::Shortintvar>::Builder getFactoryShortintvar();
  inline void setFactoryShortintvar( ::capnp::List< ::Shortintvar>::Reader value);
  inline  ::capnp::List< ::Shortintvar>::Builder initFactoryShortintvar(unsigned int size);
  inline void adoptFactoryShortintvar(::capnp::Orphan< ::capnp::List< ::Shortintvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Shortintvar>> disownFactoryShortintvar();

  inline bool hasFactoryIntvar();
  inline  ::capnp::List< ::Intvar>::Builder getFactoryIntvar();
  inline void setFactoryIntvar( ::capnp::List< ::Intvar>::Reader value);
  inline  ::capnp::List< ::Intvar>::Builder initFactoryIntvar(unsigned int size);
  inline void adoptFactoryIntvar(::capnp::Orphan< ::capnp::List< ::Intvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Intvar>> disownFactoryIntvar();

  inline bool hasFactoryLongintvar();
  inline  ::capnp::List< ::Longintvar>::Builder getFactoryLongintvar();
  inline void setFactoryLongintvar( ::capnp::List< ::Longintvar>::Reader value);
  inline  ::capnp::List< ::Longintvar>::Builder initFactoryLongintvar(unsigned int size);
  inline void adoptFactoryLongintvar(::capnp::Orphan< ::capnp::List< ::Longintvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Longintvar>> disownFactoryLongintvar();

  inline bool hasFactoryIntegervar();
  inline  ::capnp::List< ::Integervar>::Builder getFactoryIntegervar();
  inline void setFactoryIntegervar( ::capnp::List< ::Integervar>::Reader value);
  inline  ::capnp::List< ::Integervar>::Builder initFactoryIntegervar(unsigned int size);
  inline void adoptFactoryIntegervar(::capnp::Orphan< ::capnp::List< ::Integervar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Integervar>> disownFactoryIntegervar();

  inline bool hasFactoryTimevar();
  inline  ::capnp::List< ::Timevar>::Builder getFactoryTimevar();
  inline void setFactoryTimevar( ::capnp::List< ::Timevar>::Reader value);
  inline  ::capnp::List< ::Timevar>::Builder initFactoryTimevar(unsigned int size);
  inline void adoptFactoryTimevar(::capnp::Orphan< ::capnp::List< ::Timevar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Timevar>> disownFactoryTimevar();

  inline bool hasFactoryArrayvar();
  inline  ::capnp::List< ::Arrayvar>::Builder getFactoryArrayvar();
  inline void setFactoryArrayvar( ::capnp::List< ::Arrayvar>::Reader value);
  inline  ::capnp::List< ::Arrayvar>::Builder initFactoryArrayvar(unsigned int size);
  inline void adoptFactoryArrayvar(::capnp::Orphan< ::capnp::List< ::Arrayvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arrayvar>> disownFactoryArrayvar();

  inline bool hasFactoryPackedarrayvar();
  inline  ::capnp::List< ::Packedarrayvar>::Builder getFactoryPackedarrayvar();
  inline void setFactoryPackedarrayvar( ::capnp::List< ::Packedarrayvar>::Reader value);
  inline  ::capnp::List< ::Packedarrayvar>::Builder initFactoryPackedarrayvar(unsigned int size);
  inline void adoptFactoryPackedarrayvar(::capnp::Orphan< ::capnp::List< ::Packedarrayvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packedarrayvar>> disownFactoryPackedarrayvar();

  inline bool hasFactoryBitvar();
  inline  ::capnp::List< ::Bitvar>::Builder getFactoryBitvar();
  inline void setFactoryBitvar( ::capnp::List< ::Bitvar>::Reader value);
  inline  ::capnp::List< ::Bitvar>::Builder initFactoryBitvar(unsigned int size);
  inline void adoptFactoryBitvar(::capnp::Orphan< ::capnp::List< ::Bitvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Bitvar>> disownFactoryBitvar();

  inline bool hasFactoryLogicvar();
  inline  ::capnp::List< ::Logicvar>::Builder getFactoryLogicvar();
  inline void setFactoryLogicvar( ::capnp::List< ::Logicvar>::Reader value);
  inline  ::capnp::List< ::Logicvar>::Builder initFactoryLogicvar(unsigned int size);
  inline void adoptFactoryLogicvar(::capnp::Orphan< ::capnp::List< ::Logicvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logicvar>> disownFactoryLogicvar();

  inline bool hasFactoryStructvar();
  inline  ::capnp::List< ::Structvar>::Builder getFactoryStructvar();
  inline void setFactoryStructvar( ::capnp::List< ::Structvar>::Reader value);
  inline  ::capnp::List< ::Structvar>::Builder initFactoryStructvar(unsigned int size);
  inline void adoptFactoryStructvar(::capnp::Orphan< ::capnp::List< ::Structvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structvar>> disownFactoryStructvar();

  inline bool hasFactoryUnionvar();
  inline  ::capnp::List< ::Unionvar>::Builder getFactoryUnionvar();
  inline void setFactoryUnionvar( ::capnp::List< ::Unionvar>::Reader value);
  inline  ::capnp::List< ::Unionvar>::Builder initFactoryUnionvar(unsigned int size);
  inline void adoptFactoryUnionvar(::capnp::Orphan< ::capnp::List< ::Unionvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Unionvar>> disownFactoryUnionvar();

  inline bool hasFactoryEnumvar();
  inline  ::capnp::List< ::Enumvar>::Builder getFactoryEnumvar();
  inline void setFactoryEnumvar( ::capnp::List< ::Enumvar>::Reader value);
  inline  ::capnp::List< ::Enumvar>::Builder initFactoryEnumvar(unsigned int size);
  inline void adoptFactoryEnumvar(::capnp::Orphan< ::capnp::List< ::Enumvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumvar>> disownFactoryEnumvar();

  inline bool hasFactoryStringvar();
  inline  ::capnp::List< ::Stringvar>::Builder getFactoryStringvar();
  inline void setFactoryStringvar( ::capnp::List< ::Stringvar>::Reader value);
  inline  ::capnp::List< ::Stringvar>::Builder initFactoryStringvar(unsigned int size);
  inline void adoptFactoryStringvar(::capnp::Orphan< ::capnp::List< ::Stringvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Stringvar>> disownFactoryStringvar();

  inline bool hasFactoryChandlevar();
  inline  ::capnp::List< ::Chandlevar>::Builder getFactoryChandlevar();
  inline void setFactoryChandlevar( ::capnp::List< ::Chandlevar>::Reader value);
  inline  ::capnp::List< ::Chandlevar>::Builder initFactoryChandlevar(unsigned int size);
  inline void adoptFactoryChandlevar(::capnp::Orphan< ::capnp::List< ::Chandlevar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Chandlevar>> disownFactoryChandlevar();

  inline bool hasFactoryClassvar();
  inline  ::capnp::List< ::Classvar>::Builder getFactoryClassvar();
  inline void setFactoryClassvar( ::capnp::List< ::Classvar>::Reader value);
  inline  ::capnp::List< ::Classvar>::Builder initFactoryClassvar(unsigned int size);
  inline void adoptFactoryClassvar(::capnp::Orphan< ::capnp::List< ::Classvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classvar>> disownFactoryClassvar();

  inline bool hasFactoryVarbit();
  inline  ::capnp::List< ::Varbit>::Builder getFactoryVarbit();
  inline void setFactoryVarbit( ::capnp::List< ::Varbit>::Reader value);
  inline  ::capnp::List< ::Varbit>::Builder initFactoryVarbit(unsigned int size);
  inline void adoptFactoryVarbit(::capnp::Orphan< ::capnp::List< ::Varbit>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Varbit>> disownFactoryVarbit();

  inline bool hasFactoryTask();
  inline  ::capnp::List< ::Task>::Builder getFactoryTask();
  inline void setFactoryTask( ::capnp::List< ::Task>::Reader value);
  inline  ::capnp::List< ::Task>::Builder initFactoryTask(unsigned int size);
  inline void adoptFactoryTask(::capnp::Orphan< ::capnp::List< ::Task>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Task>> disownFactoryTask();

  inline bool hasFactoryFunction();
  inline  ::capnp::List< ::Function>::Builder getFactoryFunction();
  inline void setFactoryFunction( ::capnp::List< ::Function>::Reader value);
  inline  ::capnp::List< ::Function>::Builder initFactoryFunction(unsigned int size);
  inline void adoptFactoryFunction(::capnp::Orphan< ::capnp::List< ::Function>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Function>> disownFactoryFunction();

  inline bool hasFactoryModport();
  inline  ::capnp::List< ::Modport>::Builder getFactoryModport();
  inline void setFactoryModport( ::capnp::List< ::Modport>::Reader value);
  inline  ::capnp::List< ::Modport>::Builder initFactoryModport(unsigned int size);
  inline void adoptFactoryModport(::capnp::Orphan< ::capnp::List< ::Modport>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modport>> disownFactoryModport();

  inline bool hasFactoryInterfacetfdecl();
  inline  ::capnp::List< ::Interfacetfdecl>::Builder getFactoryInterfacetfdecl();
  inline void setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value);
  inline  ::capnp::List< ::Interfacetfdecl>::Builder initFactoryInterfacetfdecl(unsigned int size);
  inline void adoptFactoryInterfacetfdecl(::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> disownFactoryInterfacetfdecl();

  inline bool hasFactoryContassign();
  inline  ::capnp::List< ::Contassign>::Builder getFactoryContassign();
  inline void setFactoryContassign( ::capnp::List< ::Contassign>::Reader value);
  inline  ::capnp::List< ::Contassign>::Builder initFactoryContassign(unsigned int size);
  inline void adoptFactoryContassign(::capnp::Orphan< ::capnp::List< ::Contassign>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Contassign>> disownFactoryContassign();

  inline bool hasFactoryPort();
  inline  ::capnp::List< ::Port>::Builder getFactoryPort();
  inline void setFactoryPort( ::capnp::List< ::Port>::Reader value);
  inline  ::capnp::List< ::Port>::Builder initFactoryPort(unsigned int size);
  inline void adoptFactoryPort(::capnp::Orphan< ::capnp::List< ::Port>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Port>> disownFactoryPort();

  inline bool hasFactoryPortbit();
  inline  ::capnp::List< ::Portbit>::Builder getFactoryPortbit();
  inline void setFactoryPortbit( ::capnp::List< ::Portbit>::Reader value);
  inline  ::capnp::List< ::Portbit>::Builder initFactoryPortbit(unsigned int size);
  inline void adoptFactoryPortbit(::capnp::Orphan< ::capnp::List< ::Portbit>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Portbit>> disownFactoryPortbit();

  inline bool hasFactoryPrimitive();
  inline  ::capnp::List< ::Primitive>::Builder getFactoryPrimitive();
  inline void setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value);
  inline  ::capnp::List< ::Primitive>::Builder initFactoryPrimitive(unsigned int size);
  inline void adoptFactoryPrimitive(::capnp::Orphan< ::capnp::List< ::Primitive>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primitive>> disownFactoryPrimitive();

  inline bool hasFactoryModpath();
  inline  ::capnp::List< ::Modpath>::Builder getFactoryModpath();
  inline void setFactoryModpath( ::capnp::List< ::Modpath>::Reader value);
  inline  ::capnp::List< ::Modpath>::Builder initFactoryModpath(unsigned int size);
  inline void adoptFactoryModpath(::capnp::Orphan< ::capnp::List< ::Modpath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modpath>> disownFactoryModpath();

  inline bool hasFactoryTchk();
  inline  ::capnp::List< ::Tchk>::Builder getFactoryTchk();
  inline void setFactoryTchk( ::capnp::List< ::Tchk>::Reader value);
  inline  ::capnp::List< ::Tchk>::Builder initFactoryTchk(unsigned int size);
  inline void adoptFactoryTchk(::capnp::Orphan< ::capnp::List< ::Tchk>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchk>> disownFactoryTchk();

  inline bool hasFactoryDefparam();
  inline  ::capnp::List< ::Defparam>::Builder getFactoryDefparam();
  inline void setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value);
  inline  ::capnp::List< ::Defparam>::Builder initFactoryDefparam(unsigned int size);
  inline void adoptFactoryDefparam(::capnp::Orphan< ::capnp::List< ::Defparam>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Defparam>> disownFactoryDefparam();

  inline bool hasFactoryRange();
  inline  ::capnp::List< ::Range>::Builder getFactoryRange();
  inline void setFactoryRange( ::capnp::List< ::Range>::Reader value);
  inline  ::capnp::List< ::Range>::Builder initFactoryRange(unsigned int size);
  inline void adoptFactoryRange(::capnp::Orphan< ::capnp::List< ::Range>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Range>> disownFactoryRange();

  inline bool hasFactoryUdpdefn();
  inline  ::capnp::List< ::Udpdefn>::Builder getFactoryUdpdefn();
  inline void setFactoryUdpdefn( ::capnp::List< ::Udpdefn>::Reader value);
  inline  ::capnp::List< ::Udpdefn>::Builder initFactoryUdpdefn(unsigned int size);
  inline void adoptFactoryUdpdefn(::capnp::Orphan< ::capnp::List< ::Udpdefn>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udpdefn>> disownFactoryUdpdefn();

  inline bool hasFactoryIodecl();
  inline  ::capnp::List< ::Iodecl>::Builder getFactoryIodecl();
  inline void setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value);
  inline  ::capnp::List< ::Iodecl>::Builder initFactoryIodecl(unsigned int size);
  inline void adoptFactoryIodecl(::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> disownFactoryIodecl();

  inline bool hasFactoryAliasstmt();
  inline  ::capnp::List< ::Aliasstmt>::Builder getFactoryAliasstmt();
  inline void setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value);
  inline  ::capnp::List< ::Aliasstmt>::Builder initFactoryAliasstmt(unsigned int size);
  inline void adoptFactoryAliasstmt(::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> disownFactoryAliasstmt();

  inline bool hasFactoryClockingblock();
  inline  ::capnp::List< ::Clockingblock>::Builder getFactoryClockingblock();
  inline void setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value);
  inline  ::capnp::List< ::Clockingblock>::Builder initFactoryClockingblock(unsigned int size);
  inline void adoptFactoryClockingblock(::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> disownFactoryClockingblock();

  inline bool hasFactoryParamassign();
  inline  ::capnp::List< ::Paramassign>::Builder getFactoryParamassign();
  inline void setFactoryParamassign( ::capnp::List< ::Paramassign>::Reader value);
  inline  ::capnp::List< ::Paramassign>::Builder initFactoryParamassign(unsigned int size);
  inline void adoptFactoryParamassign(::capnp::Orphan< ::capnp::List< ::Paramassign>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Paramassign>> disownFactoryParamassign();

  inline bool hasFactoryInterfacearray();
  inline  ::capnp::List< ::Interfacearray>::Builder getFactoryInterfacearray();
  inline void setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value);
  inline  ::capnp::List< ::Interfacearray>::Builder initFactoryInterfacearray(unsigned int size);
  inline void adoptFactoryInterfacearray(::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> disownFactoryInterfacearray();

  inline bool hasFactoryProgramarray();
  inline  ::capnp::List< ::Programarray>::Builder getFactoryProgramarray();
  inline void setFactoryProgramarray( ::capnp::List< ::Programarray>::Reader value);
  inline  ::capnp::List< ::Programarray>::Builder initFactoryProgramarray(unsigned int size);
  inline void adoptFactoryProgramarray(::capnp::Orphan< ::capnp::List< ::Programarray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Programarray>> disownFactoryProgramarray();

  inline bool hasFactoryModulearray();
  inline  ::capnp::List< ::Modulearray>::Builder getFactoryModulearray();
  inline void setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value);
  inline  ::capnp::List< ::Modulearray>::Builder initFactoryModulearray(unsigned int size);
  inline void adoptFactoryModulearray(::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> disownFactoryModulearray();

  inline bool hasFactoryGatearray();
  inline  ::capnp::List< ::Gatearray>::Builder getFactoryGatearray();
  inline void setFactoryGatearray( ::capnp::List< ::Gatearray>::Reader value);
  inline  ::capnp::List< ::Gatearray>::Builder initFactoryGatearray(unsigned int size);
  inline void adoptFactoryGatearray(::capnp::Orphan< ::capnp::List< ::Gatearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Gatearray>> disownFactoryGatearray();

  inline bool hasFactorySwitcharray();
  inline  ::capnp::List< ::Switcharray>::Builder getFactorySwitcharray();
  inline void setFactorySwitcharray( ::capnp::List< ::Switcharray>::Reader value);
  inline  ::capnp::List< ::Switcharray>::Builder initFactorySwitcharray(unsigned int size);
  inline void adoptFactorySwitcharray(::capnp::Orphan< ::capnp::List< ::Switcharray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Switcharray>> disownFactorySwitcharray();

  inline bool hasFactoryUdparray();
  inline  ::capnp::List< ::Udparray>::Builder getFactoryUdparray();
  inline void setFactoryUdparray( ::capnp::List< ::Udparray>::Reader value);
  inline  ::capnp::List< ::Udparray>::Builder initFactoryUdparray(unsigned int size);
  inline void adoptFactoryUdparray(::capnp::Orphan< ::capnp::List< ::Udparray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udparray>> disownFactoryUdparray();

  inline bool hasFactoryPrimterm();
  inline  ::capnp::List< ::Primterm>::Builder getFactoryPrimterm();
  inline void setFactoryPrimterm( ::capnp::List< ::Primterm>::Reader value);
  inline  ::capnp::List< ::Primterm>::Builder initFactoryPrimterm(unsigned int size);
  inline void adoptFactoryPrimterm(::capnp::Orphan< ::capnp::List< ::Primterm>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primterm>> disownFactoryPrimterm();

  inline bool hasFactoryPathterm();
  inline  ::capnp::List< ::Pathterm>::Builder getFactoryPathterm();
  inline void setFactoryPathterm( ::capnp::List< ::Pathterm>::Reader value);
  inline  ::capnp::List< ::Pathterm>::Builder initFactoryPathterm(unsigned int size);
  inline void adoptFactoryPathterm(::capnp::Orphan< ::capnp::List< ::Pathterm>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Pathterm>> disownFactoryPathterm();

  inline bool hasFactoryTchkterm();
  inline  ::capnp::List< ::Tchkterm>::Builder getFactoryTchkterm();
  inline void setFactoryTchkterm( ::capnp::List< ::Tchkterm>::Reader value);
  inline  ::capnp::List< ::Tchkterm>::Builder initFactoryTchkterm(unsigned int size);
  inline void adoptFactoryTchkterm(::capnp::Orphan< ::capnp::List< ::Tchkterm>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchkterm>> disownFactoryTchkterm();

  inline bool hasFactoryNetbit();
  inline  ::capnp::List< ::Netbit>::Builder getFactoryNetbit();
  inline void setFactoryNetbit( ::capnp::List< ::Netbit>::Reader value);
  inline  ::capnp::List< ::Netbit>::Builder initFactoryNetbit(unsigned int size);
  inline void adoptFactoryNetbit(::capnp::Orphan< ::capnp::List< ::Netbit>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Netbit>> disownFactoryNetbit();

  inline bool hasFactoryStructnet();
  inline  ::capnp::List< ::Structnet>::Builder getFactoryStructnet();
  inline void setFactoryStructnet( ::capnp::List< ::Structnet>::Reader value);
  inline  ::capnp::List< ::Structnet>::Builder initFactoryStructnet(unsigned int size);
  inline void adoptFactoryStructnet(::capnp::Orphan< ::capnp::List< ::Structnet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Structnet>> disownFactoryStructnet();

  inline bool hasFactoryEnumnet();
  inline  ::capnp::List< ::Enumnet>::Builder getFactoryEnumnet();
  inline void setFactoryEnumnet( ::capnp::List< ::Enumnet>::Reader value);
  inline  ::capnp::List< ::Enumnet>::Builder initFactoryEnumnet(unsigned int size);
  inline void adoptFactoryEnumnet(::capnp::Orphan< ::capnp::List< ::Enumnet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Enumnet>> disownFactoryEnumnet();

  inline bool hasFactoryIntegernet();
  inline  ::capnp::List< ::Integernet>::Builder getFactoryIntegernet();
  inline void setFactoryIntegernet( ::capnp::List< ::Integernet>::Reader value);
  inline  ::capnp::List< ::Integernet>::Builder initFactoryIntegernet(unsigned int size);
  inline void adoptFactoryIntegernet(::capnp::Orphan< ::capnp::List< ::Integernet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Integernet>> disownFactoryIntegernet();

  inline bool hasFactoryTimenet();
  inline  ::capnp::List< ::Timenet>::Builder getFactoryTimenet();
  inline void setFactoryTimenet( ::capnp::List< ::Timenet>::Reader value);
  inline  ::capnp::List< ::Timenet>::Builder initFactoryTimenet(unsigned int size);
  inline void adoptFactoryTimenet(::capnp::Orphan< ::capnp::List< ::Timenet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Timenet>> disownFactoryTimenet();

  inline bool hasFactoryLogicnet();
  inline  ::capnp::List< ::Logicnet>::Builder getFactoryLogicnet();
  inline void setFactoryLogicnet( ::capnp::List< ::Logicnet>::Reader value);
  inline  ::capnp::List< ::Logicnet>::Builder initFactoryLogicnet(unsigned int size);
  inline void adoptFactoryLogicnet(::capnp::Orphan< ::capnp::List< ::Logicnet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logicnet>> disownFactoryLogicnet();

  inline bool hasFactoryArraynet();
  inline  ::capnp::List< ::Arraynet>::Builder getFactoryArraynet();
  inline void setFactoryArraynet( ::capnp::List< ::Arraynet>::Reader value);
  inline  ::capnp::List< ::Arraynet>::Builder initFactoryArraynet(unsigned int size);
  inline void adoptFactoryArraynet(::capnp::Orphan< ::capnp::List< ::Arraynet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arraynet>> disownFactoryArraynet();

  inline bool hasFactoryPackedarraynet();
  inline  ::capnp::List< ::Packedarraynet>::Builder getFactoryPackedarraynet();
  inline void setFactoryPackedarraynet( ::capnp::List< ::Packedarraynet>::Reader value);
  inline  ::capnp::List< ::Packedarraynet>::Builder initFactoryPackedarraynet(unsigned int size);
  inline void adoptFactoryPackedarraynet(::capnp::Orphan< ::capnp::List< ::Packedarraynet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packedarraynet>> disownFactoryPackedarraynet();

  inline bool hasFactoryNamedevent();
  inline  ::capnp::List< ::Namedevent>::Builder getFactoryNamedevent();
  inline void setFactoryNamedevent( ::capnp::List< ::Namedevent>::Reader value);
  inline  ::capnp::List< ::Namedevent>::Builder initFactoryNamedevent(unsigned int size);
  inline void adoptFactoryNamedevent(::capnp::Orphan< ::capnp::List< ::Namedevent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedevent>> disownFactoryNamedevent();

  inline bool hasFactoryNamedeventarray();
  inline  ::capnp::List< ::Namedeventarray>::Builder getFactoryNamedeventarray();
  inline void setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray>::Reader value);
  inline  ::capnp::List< ::Namedeventarray>::Builder initFactoryNamedeventarray(unsigned int size);
  inline void adoptFactoryNamedeventarray(::capnp::Orphan< ::capnp::List< ::Namedeventarray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray>> disownFactoryNamedeventarray();

  inline bool hasFactorySpecparam();
  inline  ::capnp::List< ::Specparam>::Builder getFactorySpecparam();
  inline void setFactorySpecparam( ::capnp::List< ::Specparam>::Reader value);
  inline  ::capnp::List< ::Specparam>::Builder initFactorySpecparam(unsigned int size);
  inline void adoptFactorySpecparam(::capnp::Orphan< ::capnp::List< ::Specparam>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Specparam>> disownFactorySpecparam();

  inline bool hasFactoryClassdefn();
  inline  ::capnp::List< ::Classdefn>::Builder getFactoryClassdefn();
  inline void setFactoryClassdefn( ::capnp::List< ::Classdefn>::Reader value);
  inline  ::capnp::List< ::Classdefn>::Builder initFactoryClassdefn(unsigned int size);
  inline void adoptFactoryClassdefn(::capnp::Orphan< ::capnp::List< ::Classdefn>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classdefn>> disownFactoryClassdefn();

  inline bool hasFactoryClasstypespec();
  inline  ::capnp::List< ::Classtypespec>::Builder getFactoryClasstypespec();
  inline void setFactoryClasstypespec( ::capnp::List< ::Classtypespec>::Reader value);
  inline  ::capnp::List< ::Classtypespec>::Builder initFactoryClasstypespec(unsigned int size);
  inline void adoptFactoryClasstypespec(::capnp::Orphan< ::capnp::List< ::Classtypespec>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classtypespec>> disownFactoryClasstypespec();

  inline bool hasFactoryClassobj();
  inline  ::capnp::List< ::Classobj>::Builder getFactoryClassobj();
  inline void setFactoryClassobj( ::capnp::List< ::Classobj>::Reader value);
  inline  ::capnp::List< ::Classobj>::Builder initFactoryClassobj(unsigned int size);
  inline void adoptFactoryClassobj(::capnp::Orphan< ::capnp::List< ::Classobj>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classobj>> disownFactoryClassobj();

  inline bool hasFactoryInterface();
  inline  ::capnp::List< ::Interface>::Builder getFactoryInterface();
  inline void setFactoryInterface( ::capnp::List< ::Interface>::Reader value);
  inline  ::capnp::List< ::Interface>::Builder initFactoryInterface(unsigned int size);
  inline void adoptFactoryInterface(::capnp::Orphan< ::capnp::List< ::Interface>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interface>> disownFactoryInterface();

  inline bool hasFactoryProgram();
  inline  ::capnp::List< ::Program>::Builder getFactoryProgram();
  inline void setFactoryProgram( ::capnp::List< ::Program>::Reader value);
  inline  ::capnp::List< ::Program>::Builder initFactoryProgram(unsigned int size);
  inline void adoptFactoryProgram(::capnp::Orphan< ::capnp::List< ::Program>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Program>> disownFactoryProgram();

  inline bool hasFactoryPackage();
  inline  ::capnp::List< ::Package>::Builder getFactoryPackage();
  inline void setFactoryPackage( ::capnp::List< ::Package>::Reader value);
  inline  ::capnp::List< ::Package>::Builder initFactoryPackage(unsigned int size);
  inline void adoptFactoryPackage(::capnp::Orphan< ::capnp::List< ::Package>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Package>> disownFactoryPackage();

  inline bool hasFactoryModule();
  inline  ::capnp::List< ::Module>::Builder getFactoryModule();
  inline void setFactoryModule( ::capnp::List< ::Module>::Reader value);
  inline  ::capnp::List< ::Module>::Builder initFactoryModule(unsigned int size);
  inline void adoptFactoryModule(::capnp::Orphan< ::capnp::List< ::Module>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Module>> disownFactoryModule();

  inline bool hasFactoryDesign();
  inline  ::capnp::List< ::Design>::Builder getFactoryDesign();
  inline void setFactoryDesign( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initFactoryDesign(unsigned int size);
  inline void adoptFactoryDesign(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownFactoryDesign();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UhdmRoot::Pipeline {
public:
  typedef UhdmRoot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Propertydecl::Reader {
public:
  typedef Propertydecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Propertydecl::Builder {
public:
  typedef Propertydecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Propertydecl::Pipeline {
public:
  typedef Propertydecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sequencedecl::Reader {
public:
  typedef Sequencedecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sequencedecl::Builder {
public:
  typedef Sequencedecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sequencedecl::Pipeline {
public:
  typedef Sequencedecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Virtualinterfacevar::Reader {
public:
  typedef Virtualinterfacevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Virtualinterfacevar::Builder {
public:
  typedef Virtualinterfacevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Virtualinterfacevar::Pipeline {
public:
  typedef Virtualinterfacevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Letdecl::Reader {
public:
  typedef Letdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Letdecl::Builder {
public:
  typedef Letdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Letdecl::Pipeline {
public:
  typedef Letdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Begin::Reader {
public:
  typedef Begin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getStmts() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Begin::Builder {
public:
  typedef Begin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownStmts();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Begin::Pipeline {
public:
  typedef Begin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedbegin::Reader {
public:
  typedef Namedbegin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getStmts() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedbegin::Builder {
public:
  typedef Namedbegin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownStmts();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedbegin::Pipeline {
public:
  typedef Namedbegin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedfork::Reader {
public:
  typedef Namedfork Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiJoinType() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getStmts() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedfork::Builder {
public:
  typedef Namedfork Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiJoinType();
  inline void setVpiJoinType( ::int64_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownStmts();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedfork::Pipeline {
public:
  typedef Namedfork Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Forkstmt::Reader {
public:
  typedef Forkstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiJoinType() const;

  inline bool hasStmts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getStmts() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Forkstmt::Builder {
public:
  typedef Forkstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiJoinType();
  inline void setVpiJoinType( ::int64_t value);

  inline bool hasStmts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getStmts();
  inline void setStmts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initStmts(unsigned int size);
  inline void adoptStmts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownStmts();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Forkstmt::Pipeline {
public:
  typedef Forkstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Forstmt::Reader {
public:
  typedef Forstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Forstmt::Builder {
public:
  typedef Forstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Forstmt::Pipeline {
public:
  typedef Forstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Foreachstmt::Reader {
public:
  typedef Foreachstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Foreachstmt::Builder {
public:
  typedef Foreachstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Foreachstmt::Pipeline {
public:
  typedef Foreachstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Genscope::Reader {
public:
  typedef Genscope Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Genscope::Builder {
public:
  typedef Genscope Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Genscope::Pipeline {
public:
  typedef Genscope Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Distribution::Reader {
public:
  typedef Distribution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Distribution::Builder {
public:
  typedef Distribution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Distribution::Pipeline {
public:
  typedef Distribution Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Operation::Reader {
public:
  typedef Operation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiOpType() const;

  inline bool hasOperands() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getOperands() const;

  inline  ::uint64_t getVpiDecompile() const;

  inline  ::int64_t getVpiSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Operation::Builder {
public:
  typedef Operation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiOpType();
  inline void setVpiOpType( ::int64_t value);

  inline bool hasOperands();
  inline  ::capnp::List< ::ObjIndexType>::Builder getOperands();
  inline void setOperands( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initOperands(unsigned int size);
  inline void adoptOperands(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownOperands();

  inline  ::uint64_t getVpiDecompile();
  inline void setVpiDecompile( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Operation::Pipeline {
public:
  typedef Operation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Partselect::Reader {
public:
  typedef Partselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Partselect::Builder {
public:
  typedef Partselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Partselect::Pipeline {
public:
  typedef Partselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Refobj::Reader {
public:
  typedef Refobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiGeneric() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasTaskfunc() const;
  inline  ::ObjIndexType::Reader getTaskfunc() const;

  inline bool hasActualgroup() const;
  inline  ::ObjIndexType::Reader getActualgroup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Refobj::Builder {
public:
  typedef Refobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiGeneric();
  inline void setVpiGeneric(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasTaskfunc();
  inline  ::ObjIndexType::Builder getTaskfunc();
  inline void setTaskfunc( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTaskfunc();
  inline void adoptTaskfunc(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTaskfunc();

  inline bool hasActualgroup();
  inline  ::ObjIndexType::Builder getActualgroup();
  inline void setActualgroup( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initActualgroup();
  inline void adoptActualgroup(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownActualgroup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Refobj::Pipeline {
public:
  typedef Refobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getTaskfunc();
  inline  ::ObjIndexType::Pipeline getActualgroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Varselect::Reader {
public:
  typedef Varselect Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Varselect::Builder {
public:
  typedef Varselect Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Varselect::Pipeline {
public:
  typedef Varselect Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortrealvar::Reader {
public:
  typedef Shortrealvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortrealvar::Builder {
public:
  typedef Shortrealvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortrealvar::Pipeline {
public:
  typedef Shortrealvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Realvar::Reader {
public:
  typedef Realvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Realvar::Builder {
public:
  typedef Realvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Realvar::Pipeline {
public:
  typedef Realvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bytevar::Reader {
public:
  typedef Bytevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bytevar::Builder {
public:
  typedef Bytevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bytevar::Pipeline {
public:
  typedef Bytevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Shortintvar::Reader {
public:
  typedef Shortintvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Shortintvar::Builder {
public:
  typedef Shortintvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Shortintvar::Pipeline {
public:
  typedef Shortintvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Intvar::Reader {
public:
  typedef Intvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Intvar::Builder {
public:
  typedef Intvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Intvar::Pipeline {
public:
  typedef Intvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Longintvar::Reader {
public:
  typedef Longintvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Longintvar::Builder {
public:
  typedef Longintvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Longintvar::Pipeline {
public:
  typedef Longintvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Integervar::Reader {
public:
  typedef Integervar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Integervar::Builder {
public:
  typedef Integervar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Integervar::Pipeline {
public:
  typedef Integervar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Timevar::Reader {
public:
  typedef Timevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Timevar::Builder {
public:
  typedef Timevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Timevar::Pipeline {
public:
  typedef Timevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arrayvar::Reader {
public:
  typedef Arrayvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiArrayType() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline  ::uint64_t getVarselects() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arrayvar::Builder {
public:
  typedef Arrayvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiArrayType();
  inline void setVpiArrayType( ::int64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline  ::uint64_t getVarselects();
  inline void setVarselects( ::uint64_t value);

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arrayvar::Pipeline {
public:
  typedef Arrayvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packedarrayvar::Reader {
public:
  typedef Packedarrayvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiPacked() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVarbits() const;

  inline bool hasElements() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getElements() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packedarrayvar::Builder {
public:
  typedef Packedarrayvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiPacked();
  inline void setVpiPacked(bool value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVarbits();

  inline bool hasElements();
  inline  ::capnp::List< ::ObjIndexType>::Builder getElements();
  inline void setElements( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initElements(unsigned int size);
  inline void adoptElements(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownElements();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packedarrayvar::Pipeline {
public:
  typedef Packedarrayvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getExprindex();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bitvar::Reader {
public:
  typedef Bitvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVarbits() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bitvar::Builder {
public:
  typedef Bitvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVarbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bitvar::Pipeline {
public:
  typedef Bitvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logicvar::Reader {
public:
  typedef Logicvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVarbits() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logicvar::Builder {
public:
  typedef Logicvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVarbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logicvar::Pipeline {
public:
  typedef Logicvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structvar::Reader {
public:
  typedef Structvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVarbits() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structvar::Builder {
public:
  typedef Structvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVarbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structvar::Pipeline {
public:
  typedef Structvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprindex();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Unionvar::Reader {
public:
  typedef Unionvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool hasVarbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVarbits() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Unionvar::Builder {
public:
  typedef Unionvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool hasVarbits();
  inline  ::capnp::List< ::uint64_t>::Builder getVarbits();
  inline void setVarbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVarbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVarbits(unsigned int size);
  inline void adoptVarbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVarbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Unionvar::Pipeline {
public:
  typedef Unionvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprindex();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumvar::Reader {
public:
  typedef Enumvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumvar::Builder {
public:
  typedef Enumvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumvar::Pipeline {
public:
  typedef Enumvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprindex();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Stringvar::Reader {
public:
  typedef Stringvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Stringvar::Builder {
public:
  typedef Stringvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Stringvar::Pipeline {
public:
  typedef Stringvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Chandlevar::Reader {
public:
  typedef Chandlevar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Chandlevar::Builder {
public:
  typedef Chandlevar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Chandlevar::Pipeline {
public:
  typedef Chandlevar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classvar::Reader {
public:
  typedef Classvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classvar::Builder {
public:
  typedef Classvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classvar::Pipeline {
public:
  typedef Classvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Varbit::Reader {
public:
  typedef Varbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiConstantSelect() const;

  inline bool hasExprindex() const;
  inline  ::ObjIndexType::Reader getExprindex() const;

  inline bool hasExprindexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getExprindexes() const;

  inline bool getVpiArrayMember() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiAutomatic() const;

  inline  ::int64_t getVpiAllocScheme() const;

  inline bool getVpiConstantVariable() const;

  inline bool getVpiIsRandomized() const;

  inline  ::int64_t getVpiRandType() const;

  inline bool getVpiStructUnionMember() const;

  inline bool getVpiScalar() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVector() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasVariabledrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariabledrivers() const;

  inline bool hasVariableloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariableloads() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasScope() const;
  inline  ::ObjIndexType::Reader getScope() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasIndexes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getIndexes() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline  ::uint64_t getPathterm() const;

  inline  ::uint64_t getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Varbit::Builder {
public:
  typedef Varbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool hasExprindex();
  inline  ::ObjIndexType::Builder getExprindex();
  inline void setExprindex( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprindex();
  inline void adoptExprindex(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprindex();

  inline bool hasExprindexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getExprindexes();
  inline void setExprindexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initExprindexes(unsigned int size);
  inline void adoptExprindexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownExprindexes();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline  ::int64_t getVpiAllocScheme();
  inline void setVpiAllocScheme( ::int64_t value);

  inline bool getVpiConstantVariable();
  inline void setVpiConstantVariable(bool value);

  inline bool getVpiIsRandomized();
  inline void setVpiIsRandomized(bool value);

  inline  ::int64_t getVpiRandType();
  inline void setVpiRandType( ::int64_t value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasVariabledrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariabledrivers();
  inline void setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariabledrivers(unsigned int size);
  inline void adoptVariabledrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariabledrivers();

  inline bool hasVariableloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariableloads();
  inline void setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariableloads(unsigned int size);
  inline void adoptVariableloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariableloads();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasScope();
  inline  ::ObjIndexType::Builder getScope();
  inline void setScope( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initScope();
  inline void adoptScope(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownScope();

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasIndexes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getIndexes();
  inline void setIndexes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initIndexes(unsigned int size);
  inline void adoptIndexes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownIndexes();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline  ::uint64_t getPathterm();
  inline void setPathterm( ::uint64_t value);

  inline  ::uint64_t getTchkterm();
  inline void setTchkterm( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Varbit::Pipeline {
public:
  typedef Varbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprindex();
  inline  ::ObjIndexType::Pipeline getTypespec();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getScope();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::Reader {
public:
  typedef Task Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiMethod() const;

  inline  ::int64_t getVpiAccessType() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiDPIContext() const;

  inline  ::int64_t getVpiDPICStr() const;

  inline  ::uint64_t getVpiDPICIdentifier() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline  ::uint64_t getClassdefn() const;

  inline  ::uint64_t getRefobj() const;

  inline  ::uint64_t getIodecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::Builder {
public:
  typedef Task Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiMethod();
  inline void setVpiMethod(bool value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiDPIContext();
  inline void setVpiDPIContext(bool value);

  inline  ::int64_t getVpiDPICStr();
  inline void setVpiDPICStr( ::int64_t value);

  inline  ::uint64_t getVpiDPICIdentifier();
  inline void setVpiDPICIdentifier( ::uint64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

  inline  ::uint64_t getRefobj();
  inline void setRefobj( ::uint64_t value);

  inline  ::uint64_t getIodecl();
  inline void setIodecl( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::Pipeline {
public:
  typedef Task Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Function::Reader {
public:
  typedef Function Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiFuncType() const;

  inline bool getVpiMethod() const;

  inline  ::int64_t getVpiAccessType() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiDPIContext() const;

  inline  ::int64_t getVpiDPICStr() const;

  inline  ::uint64_t getVpiDPICIdentifier() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasStmt() const;
  inline  ::ObjIndexType::Reader getStmt() const;

  inline  ::uint64_t getClassdefn() const;

  inline  ::uint64_t getRefobj() const;

  inline  ::uint64_t getIodecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Function::Builder {
public:
  typedef Function Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiFuncType();
  inline void setVpiFuncType( ::int64_t value);

  inline bool getVpiMethod();
  inline void setVpiMethod(bool value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiDPIContext();
  inline void setVpiDPIContext(bool value);

  inline  ::int64_t getVpiDPICStr();
  inline void setVpiDPICStr( ::int64_t value);

  inline  ::uint64_t getVpiDPICIdentifier();
  inline void setVpiDPICIdentifier( ::uint64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasStmt();
  inline  ::ObjIndexType::Builder getStmt();
  inline void setStmt( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initStmt();
  inline void adoptStmt(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownStmt();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

  inline  ::uint64_t getRefobj();
  inline void setRefobj( ::uint64_t value);

  inline  ::uint64_t getIodecl();
  inline void setIodecl( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Function::Pipeline {
public:
  typedef Function Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getStmt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modport::Reader {
public:
  typedef Modport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline  ::uint64_t getInterface() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modport::Builder {
public:
  typedef Modport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline  ::uint64_t getInterface();
  inline void setInterface( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modport::Pipeline {
public:
  typedef Modport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacetfdecl::Reader {
public:
  typedef Interfacetfdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiAccessType() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTasks() const;

  inline bool hasFunctions() const;
  inline  ::capnp::List< ::uint64_t>::Reader getFunctions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacetfdecl::Builder {
public:
  typedef Interfacetfdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiAccessType();
  inline void setVpiAccessType( ::uint64_t value);

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTasks();

  inline bool hasFunctions();
  inline  ::capnp::List< ::uint64_t>::Builder getFunctions();
  inline void setFunctions( ::capnp::List< ::uint64_t>::Reader value);
  inline void setFunctions(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initFunctions(unsigned int size);
  inline void adoptFunctions(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownFunctions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacetfdecl::Pipeline {
public:
  typedef Interfacetfdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Contassign::Reader {
public:
  typedef Contassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Contassign::Builder {
public:
  typedef Contassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Contassign::Pipeline {
public:
  typedef Contassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Port::Reader {
public:
  typedef Port Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasBits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getBits() const;

  inline  ::uint64_t getVpiPortIndex() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiPortType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiVector() const;

  inline bool getVpiConnByName() const;

  inline  ::uint64_t getVpiDirection() const;

  inline  ::uint64_t getVpiSize() const;

  inline  ::uint64_t getVpiExplicitName() const;

  inline bool hasTypespecs() const;
  inline  ::ObjIndexType::Reader getTypespecs() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline  ::uint64_t getModule() const;

  inline bool hasHighconn() const;
  inline  ::ObjIndexType::Reader getHighconn() const;

  inline bool hasLowconn() const;
  inline  ::ObjIndexType::Reader getLowconn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Port::Builder {
public:
  typedef Port Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasBits();
  inline  ::capnp::List< ::uint64_t>::Builder getBits();
  inline void setBits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setBits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initBits(unsigned int size);
  inline void adoptBits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownBits();

  inline  ::uint64_t getVpiPortIndex();
  inline void setVpiPortIndex( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiPortType();
  inline void setVpiPortType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiConnByName();
  inline void setVpiConnByName(bool value);

  inline  ::uint64_t getVpiDirection();
  inline void setVpiDirection( ::uint64_t value);

  inline  ::uint64_t getVpiSize();
  inline void setVpiSize( ::uint64_t value);

  inline  ::uint64_t getVpiExplicitName();
  inline void setVpiExplicitName( ::uint64_t value);

  inline bool hasTypespecs();
  inline  ::ObjIndexType::Builder getTypespecs();
  inline void setTypespecs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespecs();
  inline void adoptTypespecs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespecs();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline bool hasHighconn();
  inline  ::ObjIndexType::Builder getHighconn();
  inline void setHighconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initHighconn();
  inline void adoptHighconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownHighconn();

  inline bool hasLowconn();
  inline  ::ObjIndexType::Builder getLowconn();
  inline void setLowconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLowconn();
  inline void adoptLowconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLowconn();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Port::Pipeline {
public:
  typedef Port Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespecs();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getHighconn();
  inline  ::ObjIndexType::Pipeline getLowconn();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Portbit::Reader {
public:
  typedef Portbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiPortIndex() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiPortType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiVector() const;

  inline bool getVpiConnByName() const;

  inline  ::uint64_t getVpiDirection() const;

  inline  ::uint64_t getVpiSize() const;

  inline  ::uint64_t getVpiExplicitName() const;

  inline bool hasTypespecs() const;
  inline  ::ObjIndexType::Reader getTypespecs() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline  ::uint64_t getModule() const;

  inline bool hasHighconn() const;
  inline  ::ObjIndexType::Reader getHighconn() const;

  inline bool hasLowconn() const;
  inline  ::ObjIndexType::Reader getLowconn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Portbit::Builder {
public:
  typedef Portbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiPortIndex();
  inline void setVpiPortIndex( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiPortType();
  inline void setVpiPortType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiConnByName();
  inline void setVpiConnByName(bool value);

  inline  ::uint64_t getVpiDirection();
  inline void setVpiDirection( ::uint64_t value);

  inline  ::uint64_t getVpiSize();
  inline void setVpiSize( ::uint64_t value);

  inline  ::uint64_t getVpiExplicitName();
  inline void setVpiExplicitName( ::uint64_t value);

  inline bool hasTypespecs();
  inline  ::ObjIndexType::Builder getTypespecs();
  inline void setTypespecs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespecs();
  inline void adoptTypespecs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespecs();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline bool hasHighconn();
  inline  ::ObjIndexType::Builder getHighconn();
  inline void setHighconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initHighconn();
  inline void adoptHighconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownHighconn();

  inline bool hasLowconn();
  inline  ::ObjIndexType::Builder getLowconn();
  inline void setLowconn( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLowconn();
  inline void adoptLowconn(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLowconn();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Portbit::Pipeline {
public:
  typedef Portbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getTypespecs();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getHighconn();
  inline  ::ObjIndexType::Pipeline getLowconn();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitive::Reader {
public:
  typedef Primitive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitive::Builder {
public:
  typedef Primitive Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitive::Pipeline {
public:
  typedef Primitive Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modpath::Reader {
public:
  typedef Modpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modpath::Builder {
public:
  typedef Modpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modpath::Pipeline {
public:
  typedef Modpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchk::Reader {
public:
  typedef Tchk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchk::Builder {
public:
  typedef Tchk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchk::Pipeline {
public:
  typedef Tchk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Defparam::Reader {
public:
  typedef Defparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Defparam::Builder {
public:
  typedef Defparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Defparam::Pipeline {
public:
  typedef Defparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Range::Reader {
public:
  typedef Range Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Range::Builder {
public:
  typedef Range Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Range::Pipeline {
public:
  typedef Range Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udpdefn::Reader {
public:
  typedef Udpdefn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udpdefn::Builder {
public:
  typedef Udpdefn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udpdefn::Pipeline {
public:
  typedef Udpdefn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Iodecl::Reader {
public:
  typedef Iodecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiDirection() const;

  inline  ::uint64_t getVpiName() const;

  inline bool getVpiScalar() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline bool getVpiVector() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasTypespecs() const;
  inline  ::ObjIndexType::Reader getTypespecs() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasTaskfunc() const;
  inline  ::ObjIndexType::Reader getTaskfunc() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline  ::uint64_t getUdpdefn() const;

  inline  ::uint64_t getModule() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Iodecl::Builder {
public:
  typedef Iodecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiDirection();
  inline void setVpiDirection( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasTypespecs();
  inline  ::ObjIndexType::Builder getTypespecs();
  inline void setTypespecs( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespecs();
  inline void adoptTypespecs(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespecs();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasTaskfunc();
  inline  ::ObjIndexType::Builder getTaskfunc();
  inline void setTaskfunc( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTaskfunc();
  inline void adoptTaskfunc(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTaskfunc();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline  ::uint64_t getUdpdefn();
  inline void setUdpdefn( ::uint64_t value);

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Iodecl::Pipeline {
public:
  typedef Iodecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getTypespecs();
  inline  ::ObjIndexType::Pipeline getInstance();
  inline  ::ObjIndexType::Pipeline getTaskfunc();
  inline  ::ObjIndexType::Pipeline getExpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Aliasstmt::Reader {
public:
  typedef Aliasstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Aliasstmt::Builder {
public:
  typedef Aliasstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Aliasstmt::Pipeline {
public:
  typedef Aliasstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockingblock::Reader {
public:
  typedef Clockingblock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockingblock::Builder {
public:
  typedef Clockingblock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockingblock::Pipeline {
public:
  typedef Clockingblock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Paramassign::Reader {
public:
  typedef Paramassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Paramassign::Builder {
public:
  typedef Paramassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Paramassign::Pipeline {
public:
  typedef Paramassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacearray::Reader {
public:
  typedef Interfacearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getParamassigns() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacearray::Builder {
public:
  typedef Interfacearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownParamassigns();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacearray::Pipeline {
public:
  typedef Interfacearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Programarray::Reader {
public:
  typedef Programarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Programarray::Builder {
public:
  typedef Programarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Programarray::Pipeline {
public:
  typedef Programarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modulearray::Reader {
public:
  typedef Modulearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getParamassigns() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modulearray::Builder {
public:
  typedef Modulearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownParamassigns();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modulearray::Pipeline {
public:
  typedef Modulearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gatearray::Reader {
public:
  typedef Gatearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gatearray::Builder {
public:
  typedef Gatearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gatearray::Pipeline {
public:
  typedef Gatearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Switcharray::Reader {
public:
  typedef Switcharray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Switcharray::Builder {
public:
  typedef Switcharray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Switcharray::Pipeline {
public:
  typedef Switcharray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udparray::Reader {
public:
  typedef Udparray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udparray::Builder {
public:
  typedef Udparray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udparray::Pipeline {
public:
  typedef Udparray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primterm::Reader {
public:
  typedef Primterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primterm::Builder {
public:
  typedef Primterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primterm::Pipeline {
public:
  typedef Primterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Pathterm::Reader {
public:
  typedef Pathterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pathterm::Builder {
public:
  typedef Pathterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pathterm::Pipeline {
public:
  typedef Pathterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchkterm::Reader {
public:
  typedef Tchkterm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchkterm::Builder {
public:
  typedef Tchkterm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchkterm::Pipeline {
public:
  typedef Tchkterm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Netbit::Reader {
public:
  typedef Netbit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasExpr() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getExpr() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Netbit::Builder {
public:
  typedef Netbit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasExpr();
  inline  ::capnp::List< ::ObjIndexType>::Builder getExpr();
  inline void setExpr( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initExpr(unsigned int size);
  inline void adoptExpr(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownExpr();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Netbit::Pipeline {
public:
  typedef Netbit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Structnet::Reader {
public:
  typedef Structnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNets() const;

  inline bool hasExpr() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getExpr() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Structnet::Builder {
public:
  typedef Structnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNets();

  inline bool hasExpr();
  inline  ::capnp::List< ::ObjIndexType>::Builder getExpr();
  inline void setExpr( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initExpr(unsigned int size);
  inline void adoptExpr(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownExpr();

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Structnet::Pipeline {
public:
  typedef Structnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumnet::Reader {
public:
  typedef Enumnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool hasExpr() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getExpr() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumnet::Builder {
public:
  typedef Enumnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool hasExpr();
  inline  ::capnp::List< ::ObjIndexType>::Builder getExpr();
  inline void setExpr( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initExpr(unsigned int size);
  inline void adoptExpr(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownExpr();

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumnet::Pipeline {
public:
  typedef Enumnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Integernet::Reader {
public:
  typedef Integernet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Integernet::Builder {
public:
  typedef Integernet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Integernet::Pipeline {
public:
  typedef Integernet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Timenet::Reader {
public:
  typedef Timenet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Timenet::Builder {
public:
  typedef Timenet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Timenet::Pipeline {
public:
  typedef Timenet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logicnet::Reader {
public:
  typedef Logicnet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logicnet::Builder {
public:
  typedef Logicnet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logicnet::Pipeline {
public:
  typedef Logicnet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arraynet::Reader {
public:
  typedef Arraynet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasNets() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNets() const;

  inline bool hasRange() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRange() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arraynet::Builder {
public:
  typedef Arraynet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasNets();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNets();
  inline void setNets( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNets(unsigned int size);
  inline void adoptNets(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNets();

  inline bool hasRange();
  inline  ::capnp::List< ::uint64_t>::Builder getRange();
  inline void setRange( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRange(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRange(unsigned int size);
  inline void adoptRange(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRange();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arraynet::Pipeline {
public:
  typedef Arraynet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packedarraynet::Reader {
public:
  typedef Packedarraynet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiPackedArrayMember() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasExpr() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getExpr() const;

  inline bool hasRanges() const;
  inline  ::capnp::List< ::uint64_t>::Reader getRanges() const;

  inline bool hasElements() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getElements() const;

  inline bool hasNetbits() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNetbits() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiConstantSelect() const;

  inline bool getVpiExpanded() const;

  inline bool getVpiImplicitDecl() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiNetDeclAssign() const;

  inline  ::uint64_t getVpiNetType() const;

  inline  ::uint64_t getVpiResolvedNetType() const;

  inline bool getVpiScalar() const;

  inline bool getVpiExplicitScalared() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiStrength0() const;

  inline  ::int64_t getVpiStrength1() const;

  inline  ::int64_t getVpiChargeStrength() const;

  inline bool getVpiVector() const;

  inline bool getVpiExplicitVectored() const;

  inline bool getVpiStructUnionMember() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPorts() const;

  inline bool hasDrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getDrivers() const;

  inline bool hasLoads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLoads() const;

  inline bool hasLocaldrivers() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocaldrivers() const;

  inline bool hasLocalloads() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getLocalloads() const;

  inline bool hasSimnets() const;
  inline  ::ObjIndexType::Reader getSimnets() const;

  inline bool hasTypespec() const;
  inline  ::ObjIndexType::Reader getTypespec() const;

  inline bool hasPrimterms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimterms() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasPathterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPathterm() const;

  inline bool hasTchkterm() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchkterm() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packedarraynet::Builder {
public:
  typedef Packedarraynet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiPackedArrayMember();
  inline void setVpiPackedArrayMember(bool value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasExpr();
  inline  ::capnp::List< ::ObjIndexType>::Builder getExpr();
  inline void setExpr( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initExpr(unsigned int size);
  inline void adoptExpr(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownExpr();

  inline bool hasRanges();
  inline  ::capnp::List< ::uint64_t>::Builder getRanges();
  inline void setRanges( ::capnp::List< ::uint64_t>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownRanges();

  inline bool hasElements();
  inline  ::capnp::List< ::ObjIndexType>::Builder getElements();
  inline void setElements( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initElements(unsigned int size);
  inline void adoptElements(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownElements();

  inline bool hasNetbits();
  inline  ::capnp::List< ::uint64_t>::Builder getNetbits();
  inline void setNetbits( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNetbits(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNetbits(unsigned int size);
  inline void adoptNetbits(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNetbits();

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiConstantSelect();
  inline void setVpiConstantSelect(bool value);

  inline bool getVpiExpanded();
  inline void setVpiExpanded(bool value);

  inline bool getVpiImplicitDecl();
  inline void setVpiImplicitDecl(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiNetDeclAssign();
  inline void setVpiNetDeclAssign(bool value);

  inline  ::uint64_t getVpiNetType();
  inline void setVpiNetType( ::uint64_t value);

  inline  ::uint64_t getVpiResolvedNetType();
  inline void setVpiResolvedNetType( ::uint64_t value);

  inline bool getVpiScalar();
  inline void setVpiScalar(bool value);

  inline bool getVpiExplicitScalared();
  inline void setVpiExplicitScalared(bool value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiStrength0();
  inline void setVpiStrength0( ::int64_t value);

  inline  ::int64_t getVpiStrength1();
  inline void setVpiStrength1( ::int64_t value);

  inline  ::int64_t getVpiChargeStrength();
  inline void setVpiChargeStrength( ::int64_t value);

  inline bool getVpiVector();
  inline void setVpiVector(bool value);

  inline bool getVpiExplicitVectored();
  inline void setVpiExplicitVectored(bool value);

  inline bool getVpiStructUnionMember();
  inline void setVpiStructUnionMember(bool value);

  inline bool hasPorts();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPorts();

  inline bool hasDrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getDrivers();
  inline void setDrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initDrivers(unsigned int size);
  inline void adoptDrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownDrivers();

  inline bool hasLoads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLoads();
  inline void setLoads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLoads(unsigned int size);
  inline void adoptLoads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLoads();

  inline bool hasLocaldrivers();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocaldrivers();
  inline void setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocaldrivers(unsigned int size);
  inline void adoptLocaldrivers(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocaldrivers();

  inline bool hasLocalloads();
  inline  ::capnp::List< ::ObjIndexType>::Builder getLocalloads();
  inline void setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initLocalloads(unsigned int size);
  inline void adoptLocalloads(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownLocalloads();

  inline bool hasSimnets();
  inline  ::ObjIndexType::Builder getSimnets();
  inline void setSimnets( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initSimnets();
  inline void adoptSimnets(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownSimnets();

  inline bool hasTypespec();
  inline  ::ObjIndexType::Builder getTypespec();
  inline void setTypespec( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initTypespec();
  inline void adoptTypespec(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownTypespec();

  inline bool hasPrimterms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimterms();
  inline void setPrimterms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimterms(unsigned int size);
  inline void adoptPrimterms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimterms();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasPathterm();
  inline  ::capnp::List< ::uint64_t>::Builder getPathterm();
  inline void setPathterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPathterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPathterm(unsigned int size);
  inline void adoptPathterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPathterm();

  inline bool hasTchkterm();
  inline  ::capnp::List< ::uint64_t>::Builder getTchkterm();
  inline void setTchkterm( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchkterm(unsigned int size);
  inline void adoptTchkterm(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchkterm();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packedarraynet::Pipeline {
public:
  typedef Packedarraynet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getSimnets();
  inline  ::ObjIndexType::Pipeline getTypespec();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedevent::Reader {
public:
  typedef Namedevent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedevent::Builder {
public:
  typedef Namedevent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedevent::Pipeline {
public:
  typedef Namedevent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedeventarray::Reader {
public:
  typedef Namedeventarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedeventarray::Builder {
public:
  typedef Namedeventarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedeventarray::Pipeline {
public:
  typedef Namedeventarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Specparam::Reader {
public:
  typedef Specparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Specparam::Builder {
public:
  typedef Specparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Specparam::Pipeline {
public:
  typedef Specparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classdefn::Reader {
public:
  typedef Classdefn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classdefn::Builder {
public:
  typedef Classdefn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classdefn::Pipeline {
public:
  typedef Classdefn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classtypespec::Reader {
public:
  typedef Classtypespec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classtypespec::Builder {
public:
  typedef Classtypespec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classtypespec::Pipeline {
public:
  typedef Classtypespec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classobj::Reader {
public:
  typedef Classobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classobj::Builder {
public:
  typedef Classobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classobj::Pipeline {
public:
  typedef Classobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interface::Reader {
public:
  typedef Interface Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline bool hasInterfacetfdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacetfdecls() const;

  inline bool hasModports() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModports() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interface::Builder {
public:
  typedef Interface Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline bool hasInterfacetfdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacetfdecls();
  inline void setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacetfdecls(unsigned int size);
  inline void adoptInterfacetfdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacetfdecls();

  inline bool hasModports();
  inline  ::capnp::List< ::uint64_t>::Builder getModports();
  inline void setModports( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModports(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModports(unsigned int size);
  inline void adoptModports(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModports();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interface::Pipeline {
public:
  typedef Interface Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Program::Reader {
public:
  typedef Program Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Program::Builder {
public:
  typedef Program Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Program::Pipeline {
public:
  typedef Program Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Package::Reader {
public:
  typedef Package Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiUnit() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Package::Builder {
public:
  typedef Package Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiUnit();
  inline void setVpiUnit(bool value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Package::Pipeline {
public:
  typedef Package Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Module::Reader {
public:
  typedef Module Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool getVpiTopModule() const;

  inline  ::int64_t getVpiDefDecayTime() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline bool hasPrimitivearrays() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitivearrays() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline  ::uint64_t getModulearray() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPorts() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

  inline bool hasModulearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModulearrays() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasTchks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchks() const;

  inline bool hasDefparams() const;
  inline  ::capnp::List< ::uint64_t>::Reader getDefparams() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline bool hasAliasstmts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAliasstmts() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool hasConcurrentassertions() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getConcurrentassertions() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasScopes() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScopes() const;

  inline bool hasTypespecs() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespecs() const;

  inline bool hasPropertydecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPropertydecls() const;

  inline bool hasSequencedecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSequencedecls() const;

  inline bool hasNamedevents() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevents() const;

  inline bool hasNamedeventarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarrays() const;

  inline bool hasVirtualinterfacevars() const;
  inline  ::capnp::List< ::uint64_t>::Reader getVirtualinterfacevars() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasLetdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLetdecls() const;

  inline bool hasInstanceitems() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstanceitems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Module::Builder {
public:
  typedef Module Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool getVpiTopModule();
  inline void setVpiTopModule(bool value);

  inline  ::int64_t getVpiDefDecayTime();
  inline void setVpiDefDecayTime( ::int64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline bool hasPrimitivearrays();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitivearrays();
  inline void setPrimitivearrays( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitivearrays(unsigned int size);
  inline void adoptPrimitivearrays(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitivearrays();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline  ::uint64_t getModulearray();
  inline void setModulearray( ::uint64_t value);

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPorts();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

  inline bool hasModulearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getModulearrays();
  inline void setModulearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModulearrays(unsigned int size);
  inline void adoptModulearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModulearrays();

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasTchks();
  inline  ::capnp::List< ::uint64_t>::Builder getTchks();
  inline void setTchks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchks(unsigned int size);
  inline void adoptTchks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchks();

  inline bool hasDefparams();
  inline  ::capnp::List< ::uint64_t>::Builder getDefparams();
  inline void setDefparams( ::capnp::List< ::uint64_t>::Reader value);
  inline void setDefparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initDefparams(unsigned int size);
  inline void adoptDefparams(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownDefparams();

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline bool hasAliasstmts();
  inline  ::capnp::List< ::uint64_t>::Builder getAliasstmts();
  inline void setAliasstmts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAliasstmts(unsigned int size);
  inline void adoptAliasstmts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAliasstmts();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool hasConcurrentassertions();
  inline  ::capnp::List< ::ObjIndexType>::Builder getConcurrentassertions();
  inline void setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initConcurrentassertions(unsigned int size);
  inline void adoptConcurrentassertions(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownConcurrentassertions();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasScopes();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScopes();
  inline void setScopes( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScopes(unsigned int size);
  inline void adoptScopes(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScopes();

  inline bool hasTypespecs();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespecs();
  inline void setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespecs(unsigned int size);
  inline void adoptTypespecs(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespecs();

  inline bool hasPropertydecls();
  inline  ::capnp::List< ::uint64_t>::Builder getPropertydecls();
  inline void setPropertydecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPropertydecls(unsigned int size);
  inline void adoptPropertydecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPropertydecls();

  inline bool hasSequencedecls();
  inline  ::capnp::List< ::uint64_t>::Builder getSequencedecls();
  inline void setSequencedecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSequencedecls(unsigned int size);
  inline void adoptSequencedecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSequencedecls();

  inline bool hasNamedevents();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevents();
  inline void setNamedevents( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevents(unsigned int size);
  inline void adoptNamedevents(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevents();

  inline bool hasNamedeventarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarrays();
  inline void setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarrays(unsigned int size);
  inline void adoptNamedeventarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarrays();

  inline bool hasVirtualinterfacevars();
  inline  ::capnp::List< ::uint64_t>::Builder getVirtualinterfacevars();
  inline void setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value);
  inline void setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initVirtualinterfacevars(unsigned int size);
  inline void adoptVirtualinterfacevars(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownVirtualinterfacevars();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasLetdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getLetdecls();
  inline void setLetdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLetdecls(unsigned int size);
  inline void adoptLetdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLetdecls();

  inline bool hasInstanceitems();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstanceitems();
  inline void setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstanceitems(unsigned int size);
  inline void adoptInstanceitems(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstanceitems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Module::Pipeline {
public:
  typedef Module Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Design::Reader {
public:
  typedef Design Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasAllModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllModules() const;

  inline bool hasTopModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTopModules() const;

  inline bool hasAllPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllPrograms() const;

  inline bool hasAllPackages() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllPackages() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Design::Builder {
public:
  typedef Design Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasAllModules();
  inline  ::capnp::List< ::uint64_t>::Builder getAllModules();
  inline void setAllModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllModules(unsigned int size);
  inline void adoptAllModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllModules();

  inline bool hasTopModules();
  inline  ::capnp::List< ::uint64_t>::Builder getTopModules();
  inline void setTopModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTopModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTopModules(unsigned int size);
  inline void adoptTopModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTopModules();

  inline bool hasAllPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getAllPrograms();
  inline void setAllPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllPrograms(unsigned int size);
  inline void adoptAllPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllPrograms();

  inline bool hasAllPackages();
  inline  ::capnp::List< ::uint64_t>::Builder getAllPackages();
  inline void setAllPackages( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllPackages(unsigned int size);
  inline void adoptAllPackages(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllPackages();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Design::Pipeline {
public:
  typedef Design Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t ObjIndexType::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ObjIndexType::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ObjIndexType::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ObjIndexType::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UhdmRoot::Reader::hasDesigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasDesigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getDesigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setDesigns( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initDesigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptDesigns(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasSymbols() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasSymbols() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader UhdmRoot::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setSymbols( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UhdmRoot::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> UhdmRoot::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Process>::Reader UhdmRoot::Reader::getFactoryProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::getFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProcess( ::capnp::List< ::Process>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::initFactoryProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProcess(
    ::capnp::Orphan< ::capnp::List< ::Process>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Process>> UhdmRoot::Builder::disownFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPropertydecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPropertydecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Propertydecl>::Reader UhdmRoot::Reader::getFactoryPropertydecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Propertydecl>::Builder UhdmRoot::Builder::getFactoryPropertydecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPropertydecl( ::capnp::List< ::Propertydecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Propertydecl>::Builder UhdmRoot::Builder::initFactoryPropertydecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPropertydecl(
    ::capnp::Orphan< ::capnp::List< ::Propertydecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Propertydecl>> UhdmRoot::Builder::disownFactoryPropertydecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Propertydecl>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySequencedecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySequencedecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Sequencedecl>::Reader UhdmRoot::Reader::getFactorySequencedecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Sequencedecl>::Builder UhdmRoot::Builder::getFactorySequencedecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySequencedecl( ::capnp::List< ::Sequencedecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Sequencedecl>::Builder UhdmRoot::Builder::initFactorySequencedecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySequencedecl(
    ::capnp::Orphan< ::capnp::List< ::Sequencedecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Sequencedecl>> UhdmRoot::Builder::disownFactorySequencedecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Sequencedecl>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVirtualinterfacevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVirtualinterfacevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Virtualinterfacevar>::Reader UhdmRoot::Reader::getFactoryVirtualinterfacevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Virtualinterfacevar>::Builder UhdmRoot::Builder::getFactoryVirtualinterfacevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVirtualinterfacevar( ::capnp::List< ::Virtualinterfacevar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Virtualinterfacevar>::Builder UhdmRoot::Builder::initFactoryVirtualinterfacevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVirtualinterfacevar(
    ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Virtualinterfacevar>> UhdmRoot::Builder::disownFactoryVirtualinterfacevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Virtualinterfacevar>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLetdecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLetdecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Letdecl>::Reader UhdmRoot::Reader::getFactoryLetdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Letdecl>::Builder UhdmRoot::Builder::getFactoryLetdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLetdecl( ::capnp::List< ::Letdecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Letdecl>::Builder UhdmRoot::Builder::initFactoryLetdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLetdecl(
    ::capnp::Orphan< ::capnp::List< ::Letdecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Letdecl>> UhdmRoot::Builder::disownFactoryLetdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Letdecl>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBegin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBegin() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Begin>::Reader UhdmRoot::Reader::getFactoryBegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Begin>::Builder UhdmRoot::Builder::getFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBegin( ::capnp::List< ::Begin>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Begin>::Builder UhdmRoot::Builder::initFactoryBegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBegin(
    ::capnp::Orphan< ::capnp::List< ::Begin>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Begin>> UhdmRoot::Builder::disownFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedbegin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedbegin() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedbegin>::Reader UhdmRoot::Reader::getFactoryNamedbegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedbegin>::Builder UhdmRoot::Builder::getFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedbegin( ::capnp::List< ::Namedbegin>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedbegin>::Builder UhdmRoot::Builder::initFactoryNamedbegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedbegin(
    ::capnp::Orphan< ::capnp::List< ::Namedbegin>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedbegin>> UhdmRoot::Builder::disownFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedfork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedfork() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedfork>::Reader UhdmRoot::Reader::getFactoryNamedfork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedfork>::Builder UhdmRoot::Builder::getFactoryNamedfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedfork( ::capnp::List< ::Namedfork>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedfork>::Builder UhdmRoot::Builder::initFactoryNamedfork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedfork(
    ::capnp::Orphan< ::capnp::List< ::Namedfork>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedfork>> UhdmRoot::Builder::disownFactoryNamedfork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedfork>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForkstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForkstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Forkstmt>::Reader UhdmRoot::Reader::getFactoryForkstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Forkstmt>::Builder UhdmRoot::Builder::getFactoryForkstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForkstmt( ::capnp::List< ::Forkstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Forkstmt>::Builder UhdmRoot::Builder::initFactoryForkstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForkstmt(
    ::capnp::Orphan< ::capnp::List< ::Forkstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Forkstmt>> UhdmRoot::Builder::disownFactoryForkstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forkstmt>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Forstmt>::Reader UhdmRoot::Reader::getFactoryForstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Forstmt>::Builder UhdmRoot::Builder::getFactoryForstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForstmt( ::capnp::List< ::Forstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Forstmt>::Builder UhdmRoot::Builder::initFactoryForstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForstmt(
    ::capnp::Orphan< ::capnp::List< ::Forstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Forstmt>> UhdmRoot::Builder::disownFactoryForstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Forstmt>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryForeachstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryForeachstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Foreachstmt>::Reader UhdmRoot::Reader::getFactoryForeachstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Foreachstmt>::Builder UhdmRoot::Builder::getFactoryForeachstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryForeachstmt( ::capnp::List< ::Foreachstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Foreachstmt>::Builder UhdmRoot::Builder::initFactoryForeachstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryForeachstmt(
    ::capnp::Orphan< ::capnp::List< ::Foreachstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Foreachstmt>> UhdmRoot::Builder::disownFactoryForeachstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Foreachstmt>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGenscope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGenscope() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Genscope>::Reader UhdmRoot::Reader::getFactoryGenscope() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Genscope>::Builder UhdmRoot::Builder::getFactoryGenscope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGenscope( ::capnp::List< ::Genscope>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Genscope>::Builder UhdmRoot::Builder::initFactoryGenscope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGenscope(
    ::capnp::Orphan< ::capnp::List< ::Genscope>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Genscope>> UhdmRoot::Builder::disownFactoryGenscope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Genscope>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDistribution() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDistribution() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Distribution>::Reader UhdmRoot::Reader::getFactoryDistribution() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Distribution>::Builder UhdmRoot::Builder::getFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDistribution( ::capnp::List< ::Distribution>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Distribution>::Builder UhdmRoot::Builder::initFactoryDistribution(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDistribution(
    ::capnp::Orphan< ::capnp::List< ::Distribution>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Distribution>> UhdmRoot::Builder::disownFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryOperation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryOperation() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Operation>::Reader UhdmRoot::Reader::getFactoryOperation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Operation>::Builder UhdmRoot::Builder::getFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryOperation( ::capnp::List< ::Operation>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Operation>::Builder UhdmRoot::Builder::initFactoryOperation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryOperation(
    ::capnp::Orphan< ::capnp::List< ::Operation>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Operation>> UhdmRoot::Builder::disownFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPartselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPartselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Partselect>::Reader UhdmRoot::Reader::getFactoryPartselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Partselect>::Builder UhdmRoot::Builder::getFactoryPartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPartselect( ::capnp::List< ::Partselect>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Partselect>::Builder UhdmRoot::Builder::initFactoryPartselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPartselect(
    ::capnp::Orphan< ::capnp::List< ::Partselect>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Partselect>> UhdmRoot::Builder::disownFactoryPartselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Partselect>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRefobj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRefobj() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Refobj>::Reader UhdmRoot::Reader::getFactoryRefobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Refobj>::Builder UhdmRoot::Builder::getFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRefobj( ::capnp::List< ::Refobj>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Refobj>::Builder UhdmRoot::Builder::initFactoryRefobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRefobj(
    ::capnp::Orphan< ::capnp::List< ::Refobj>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Refobj>> UhdmRoot::Builder::disownFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVarselect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVarselect() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Varselect>::Reader UhdmRoot::Reader::getFactoryVarselect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Varselect>::Builder UhdmRoot::Builder::getFactoryVarselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVarselect( ::capnp::List< ::Varselect>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Varselect>::Builder UhdmRoot::Builder::initFactoryVarselect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVarselect(
    ::capnp::Orphan< ::capnp::List< ::Varselect>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Varselect>> UhdmRoot::Builder::disownFactoryVarselect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varselect>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortrealvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortrealvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortrealvar>::Reader UhdmRoot::Reader::getFactoryShortrealvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortrealvar>::Builder UhdmRoot::Builder::getFactoryShortrealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortrealvar( ::capnp::List< ::Shortrealvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortrealvar>::Builder UhdmRoot::Builder::initFactoryShortrealvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortrealvar(
    ::capnp::Orphan< ::capnp::List< ::Shortrealvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortrealvar>> UhdmRoot::Builder::disownFactoryShortrealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortrealvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRealvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRealvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Realvar>::Reader UhdmRoot::Reader::getFactoryRealvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Realvar>::Builder UhdmRoot::Builder::getFactoryRealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRealvar( ::capnp::List< ::Realvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Realvar>::Builder UhdmRoot::Builder::initFactoryRealvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRealvar(
    ::capnp::Orphan< ::capnp::List< ::Realvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Realvar>> UhdmRoot::Builder::disownFactoryRealvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Realvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBytevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBytevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bytevar>::Reader UhdmRoot::Reader::getFactoryBytevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bytevar>::Builder UhdmRoot::Builder::getFactoryBytevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBytevar( ::capnp::List< ::Bytevar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bytevar>::Builder UhdmRoot::Builder::initFactoryBytevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBytevar(
    ::capnp::Orphan< ::capnp::List< ::Bytevar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bytevar>> UhdmRoot::Builder::disownFactoryBytevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bytevar>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryShortintvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryShortintvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Shortintvar>::Reader UhdmRoot::Reader::getFactoryShortintvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Shortintvar>::Builder UhdmRoot::Builder::getFactoryShortintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryShortintvar( ::capnp::List< ::Shortintvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Shortintvar>::Builder UhdmRoot::Builder::initFactoryShortintvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryShortintvar(
    ::capnp::Orphan< ::capnp::List< ::Shortintvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Shortintvar>> UhdmRoot::Builder::disownFactoryShortintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Shortintvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Intvar>::Reader UhdmRoot::Reader::getFactoryIntvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Intvar>::Builder UhdmRoot::Builder::getFactoryIntvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntvar( ::capnp::List< ::Intvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Intvar>::Builder UhdmRoot::Builder::initFactoryIntvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntvar(
    ::capnp::Orphan< ::capnp::List< ::Intvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Intvar>> UhdmRoot::Builder::disownFactoryIntvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Intvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLongintvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLongintvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Longintvar>::Reader UhdmRoot::Reader::getFactoryLongintvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Longintvar>::Builder UhdmRoot::Builder::getFactoryLongintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLongintvar( ::capnp::List< ::Longintvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Longintvar>::Builder UhdmRoot::Builder::initFactoryLongintvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLongintvar(
    ::capnp::Orphan< ::capnp::List< ::Longintvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Longintvar>> UhdmRoot::Builder::disownFactoryLongintvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Longintvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntegervar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntegervar() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Integervar>::Reader UhdmRoot::Reader::getFactoryIntegervar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Integervar>::Builder UhdmRoot::Builder::getFactoryIntegervar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntegervar( ::capnp::List< ::Integervar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Integervar>::Builder UhdmRoot::Builder::initFactoryIntegervar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntegervar(
    ::capnp::Orphan< ::capnp::List< ::Integervar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Integervar>> UhdmRoot::Builder::disownFactoryIntegervar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integervar>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTimevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTimevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Timevar>::Reader UhdmRoot::Reader::getFactoryTimevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::get(_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Timevar>::Builder UhdmRoot::Builder::getFactoryTimevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::get(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTimevar( ::capnp::List< ::Timevar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Timevar>::Builder UhdmRoot::Builder::initFactoryTimevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::init(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTimevar(
    ::capnp::Orphan< ::capnp::List< ::Timevar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Timevar>> UhdmRoot::Builder::disownFactoryTimevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timevar>>::disown(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arrayvar>::Reader UhdmRoot::Reader::getFactoryArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::get(_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arrayvar>::Builder UhdmRoot::Builder::getFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::get(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArrayvar( ::capnp::List< ::Arrayvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arrayvar>::Builder UhdmRoot::Builder::initFactoryArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::init(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArrayvar(
    ::capnp::Orphan< ::capnp::List< ::Arrayvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arrayvar>> UhdmRoot::Builder::disownFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackedarrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackedarrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packedarrayvar>::Reader UhdmRoot::Reader::getFactoryPackedarrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::get(_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packedarrayvar>::Builder UhdmRoot::Builder::getFactoryPackedarrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::get(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackedarrayvar( ::capnp::List< ::Packedarrayvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packedarrayvar>::Builder UhdmRoot::Builder::initFactoryPackedarrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::init(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackedarrayvar(
    ::capnp::Orphan< ::capnp::List< ::Packedarrayvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packedarrayvar>> UhdmRoot::Builder::disownFactoryPackedarrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarrayvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBitvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBitvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Bitvar>::Reader UhdmRoot::Reader::getFactoryBitvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::get(_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Bitvar>::Builder UhdmRoot::Builder::getFactoryBitvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::get(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBitvar( ::capnp::List< ::Bitvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Bitvar>::Builder UhdmRoot::Builder::initFactoryBitvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::init(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBitvar(
    ::capnp::Orphan< ::capnp::List< ::Bitvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Bitvar>> UhdmRoot::Builder::disownFactoryBitvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Bitvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logicvar>::Reader UhdmRoot::Reader::getFactoryLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::get(_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logicvar>::Builder UhdmRoot::Builder::getFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::get(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogicvar( ::capnp::List< ::Logicvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logicvar>::Builder UhdmRoot::Builder::initFactoryLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::init(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogicvar(
    ::capnp::Orphan< ::capnp::List< ::Logicvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logicvar>> UhdmRoot::Builder::disownFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structvar>::Reader UhdmRoot::Reader::getFactoryStructvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::get(_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structvar>::Builder UhdmRoot::Builder::getFactoryStructvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::get(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructvar( ::capnp::List< ::Structvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structvar>::Builder UhdmRoot::Builder::initFactoryStructvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::init(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructvar(
    ::capnp::Orphan< ::capnp::List< ::Structvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structvar>> UhdmRoot::Builder::disownFactoryStructvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUnionvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUnionvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Unionvar>::Reader UhdmRoot::Reader::getFactoryUnionvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::get(_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Unionvar>::Builder UhdmRoot::Builder::getFactoryUnionvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::get(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUnionvar( ::capnp::List< ::Unionvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Unionvar>::Builder UhdmRoot::Builder::initFactoryUnionvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::init(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUnionvar(
    ::capnp::Orphan< ::capnp::List< ::Unionvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Unionvar>> UhdmRoot::Builder::disownFactoryUnionvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Unionvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumvar>::Reader UhdmRoot::Reader::getFactoryEnumvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::get(_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumvar>::Builder UhdmRoot::Builder::getFactoryEnumvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::get(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumvar( ::capnp::List< ::Enumvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumvar>::Builder UhdmRoot::Builder::initFactoryEnumvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::init(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumvar(
    ::capnp::Orphan< ::capnp::List< ::Enumvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumvar>> UhdmRoot::Builder::disownFactoryEnumvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStringvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStringvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Stringvar>::Reader UhdmRoot::Reader::getFactoryStringvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::get(_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Stringvar>::Builder UhdmRoot::Builder::getFactoryStringvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::get(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStringvar( ::capnp::List< ::Stringvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::set(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Stringvar>::Builder UhdmRoot::Builder::initFactoryStringvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::init(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStringvar(
    ::capnp::Orphan< ::capnp::List< ::Stringvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Stringvar>> UhdmRoot::Builder::disownFactoryStringvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Stringvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryChandlevar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryChandlevar() {
  return !_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Chandlevar>::Reader UhdmRoot::Reader::getFactoryChandlevar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::get(_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Chandlevar>::Builder UhdmRoot::Builder::getFactoryChandlevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::get(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryChandlevar( ::capnp::List< ::Chandlevar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::set(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Chandlevar>::Builder UhdmRoot::Builder::initFactoryChandlevar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::init(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryChandlevar(
    ::capnp::Orphan< ::capnp::List< ::Chandlevar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Chandlevar>> UhdmRoot::Builder::disownFactoryChandlevar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Chandlevar>>::disown(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classvar>::Reader UhdmRoot::Reader::getFactoryClassvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::get(_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classvar>::Builder UhdmRoot::Builder::getFactoryClassvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::get(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassvar( ::capnp::List< ::Classvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::set(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classvar>::Builder UhdmRoot::Builder::initFactoryClassvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::init(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassvar(
    ::capnp::Orphan< ::capnp::List< ::Classvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::adopt(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classvar>> UhdmRoot::Builder::disownFactoryClassvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classvar>>::disown(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryVarbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryVarbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Varbit>::Reader UhdmRoot::Reader::getFactoryVarbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::get(_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Varbit>::Builder UhdmRoot::Builder::getFactoryVarbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::get(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryVarbit( ::capnp::List< ::Varbit>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::set(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Varbit>::Builder UhdmRoot::Builder::initFactoryVarbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::init(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryVarbit(
    ::capnp::Orphan< ::capnp::List< ::Varbit>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::adopt(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Varbit>> UhdmRoot::Builder::disownFactoryVarbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Varbit>>::disown(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTask() const {
  return !_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTask() {
  return !_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Task>::Reader UhdmRoot::Reader::getFactoryTask() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::getFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTask( ::capnp::List< ::Task>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::set(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::initFactoryTask(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::init(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTask(
    ::capnp::Orphan< ::capnp::List< ::Task>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::adopt(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Task>> UhdmRoot::Builder::disownFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::disown(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFunction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFunction() {
  return !_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Function>::Reader UhdmRoot::Reader::getFactoryFunction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::getFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFunction( ::capnp::List< ::Function>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::set(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::initFactoryFunction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::init(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFunction(
    ::capnp::Orphan< ::capnp::List< ::Function>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::adopt(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Function>> UhdmRoot::Builder::disownFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::disown(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModport() const {
  return !_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModport() {
  return !_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modport>::Reader UhdmRoot::Reader::getFactoryModport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::getFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModport( ::capnp::List< ::Modport>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::set(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::initFactoryModport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::init(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModport(
    ::capnp::Orphan< ::capnp::List< ::Modport>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::adopt(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modport>> UhdmRoot::Builder::disownFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::disown(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacetfdecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacetfdecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacetfdecl>::Reader UhdmRoot::Reader::getFactoryInterfacetfdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::getFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::set(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::initFactoryInterfacetfdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::init(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacetfdecl(
    ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::adopt(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> UhdmRoot::Builder::disownFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::disown(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContassign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContassign() {
  return !_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Contassign>::Reader UhdmRoot::Reader::getFactoryContassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::getFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContassign( ::capnp::List< ::Contassign>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::set(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::initFactoryContassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::init(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContassign(
    ::capnp::Orphan< ::capnp::List< ::Contassign>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::adopt(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Contassign>> UhdmRoot::Builder::disownFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::disown(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Port>::Reader UhdmRoot::Reader::getFactoryPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(_reader.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::getFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPort( ::capnp::List< ::Port>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::set(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::initFactoryPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::init(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPort(
    ::capnp::Orphan< ::capnp::List< ::Port>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::adopt(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Port>> UhdmRoot::Builder::disownFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::disown(_builder.getPointerField(
      ::capnp::bounded<43>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPortbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPortbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Portbit>::Reader UhdmRoot::Reader::getFactoryPortbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::get(_reader.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Portbit>::Builder UhdmRoot::Builder::getFactoryPortbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::get(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPortbit( ::capnp::List< ::Portbit>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::set(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Portbit>::Builder UhdmRoot::Builder::initFactoryPortbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::init(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPortbit(
    ::capnp::Orphan< ::capnp::List< ::Portbit>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::adopt(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Portbit>> UhdmRoot::Builder::disownFactoryPortbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Portbit>>::disown(_builder.getPointerField(
      ::capnp::bounded<44>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimitive() const {
  return !_reader.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimitive() {
  return !_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primitive>::Reader UhdmRoot::Reader::getFactoryPrimitive() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(_reader.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::getFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::set(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::initFactoryPrimitive(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::init(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimitive(
    ::capnp::Orphan< ::capnp::List< ::Primitive>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::adopt(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primitive>> UhdmRoot::Builder::disownFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::disown(_builder.getPointerField(
      ::capnp::bounded<45>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModpath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModpath() {
  return !_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modpath>::Reader UhdmRoot::Reader::getFactoryModpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(_reader.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::getFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModpath( ::capnp::List< ::Modpath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::set(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::initFactoryModpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::init(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModpath(
    ::capnp::Orphan< ::capnp::List< ::Modpath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::adopt(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modpath>> UhdmRoot::Builder::disownFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::disown(_builder.getPointerField(
      ::capnp::bounded<46>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchk() {
  return !_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchk>::Reader UhdmRoot::Reader::getFactoryTchk() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(_reader.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::getFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchk( ::capnp::List< ::Tchk>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::set(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::initFactoryTchk(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::init(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchk(
    ::capnp::Orphan< ::capnp::List< ::Tchk>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::adopt(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchk>> UhdmRoot::Builder::disownFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::disown(_builder.getPointerField(
      ::capnp::bounded<47>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDefparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDefparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Defparam>::Reader UhdmRoot::Reader::getFactoryDefparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(_reader.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::getFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::set(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::initFactoryDefparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::init(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDefparam(
    ::capnp::Orphan< ::capnp::List< ::Defparam>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::adopt(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Defparam>> UhdmRoot::Builder::disownFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::disown(_builder.getPointerField(
      ::capnp::bounded<48>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Range>::Reader UhdmRoot::Reader::getFactoryRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::get(_reader.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Range>::Builder UhdmRoot::Builder::getFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::get(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRange( ::capnp::List< ::Range>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::set(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Range>::Builder UhdmRoot::Builder::initFactoryRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::init(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRange(
    ::capnp::Orphan< ::capnp::List< ::Range>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::adopt(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Range>> UhdmRoot::Builder::disownFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::disown(_builder.getPointerField(
      ::capnp::bounded<49>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdpdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdpdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udpdefn>::Reader UhdmRoot::Reader::getFactoryUdpdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::get(_reader.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udpdefn>::Builder UhdmRoot::Builder::getFactoryUdpdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::get(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdpdefn( ::capnp::List< ::Udpdefn>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::set(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udpdefn>::Builder UhdmRoot::Builder::initFactoryUdpdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::init(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdpdefn(
    ::capnp::Orphan< ::capnp::List< ::Udpdefn>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::adopt(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udpdefn>> UhdmRoot::Builder::disownFactoryUdpdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udpdefn>>::disown(_builder.getPointerField(
      ::capnp::bounded<50>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIodecl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIodecl() {
  return !_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Iodecl>::Reader UhdmRoot::Reader::getFactoryIodecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(_reader.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::getFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::set(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::initFactoryIodecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::init(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIodecl(
    ::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::adopt(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> UhdmRoot::Builder::disownFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::disown(_builder.getPointerField(
      ::capnp::bounded<51>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAliasstmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAliasstmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Aliasstmt>::Reader UhdmRoot::Reader::getFactoryAliasstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(_reader.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::getFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::set(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::initFactoryAliasstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::init(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAliasstmt(
    ::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> UhdmRoot::Builder::disownFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::disown(_builder.getPointerField(
      ::capnp::bounded<52>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockingblock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockingblock() {
  return !_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockingblock>::Reader UhdmRoot::Reader::getFactoryClockingblock() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(_reader.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::getFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::set(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::initFactoryClockingblock(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::init(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockingblock(
    ::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::adopt(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> UhdmRoot::Builder::disownFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::disown(_builder.getPointerField(
      ::capnp::bounded<53>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryParamassign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryParamassign() {
  return !_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Paramassign>::Reader UhdmRoot::Reader::getFactoryParamassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::get(_reader.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Paramassign>::Builder UhdmRoot::Builder::getFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::get(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryParamassign( ::capnp::List< ::Paramassign>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::set(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Paramassign>::Builder UhdmRoot::Builder::initFactoryParamassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::init(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryParamassign(
    ::capnp::Orphan< ::capnp::List< ::Paramassign>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::adopt(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Paramassign>> UhdmRoot::Builder::disownFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::disown(_builder.getPointerField(
      ::capnp::bounded<54>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacearray>::Reader UhdmRoot::Reader::getFactoryInterfacearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(_reader.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::getFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::set(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::initFactoryInterfacearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::init(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacearray(
    ::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> UhdmRoot::Builder::disownFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::disown(_builder.getPointerField(
      ::capnp::bounded<55>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgramarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgramarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Programarray>::Reader UhdmRoot::Reader::getFactoryProgramarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::get(_reader.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Programarray>::Builder UhdmRoot::Builder::getFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::get(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgramarray( ::capnp::List< ::Programarray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::set(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Programarray>::Builder UhdmRoot::Builder::initFactoryProgramarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::init(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgramarray(
    ::capnp::Orphan< ::capnp::List< ::Programarray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Programarray>> UhdmRoot::Builder::disownFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::disown(_builder.getPointerField(
      ::capnp::bounded<56>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModulearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModulearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modulearray>::Reader UhdmRoot::Reader::getFactoryModulearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(_reader.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::getFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::set(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::initFactoryModulearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::init(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModulearray(
    ::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> UhdmRoot::Builder::disownFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::disown(_builder.getPointerField(
      ::capnp::bounded<57>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGatearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGatearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Gatearray>::Reader UhdmRoot::Reader::getFactoryGatearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::get(_reader.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Gatearray>::Builder UhdmRoot::Builder::getFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::get(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGatearray( ::capnp::List< ::Gatearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::set(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Gatearray>::Builder UhdmRoot::Builder::initFactoryGatearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::init(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGatearray(
    ::capnp::Orphan< ::capnp::List< ::Gatearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Gatearray>> UhdmRoot::Builder::disownFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::disown(_builder.getPointerField(
      ::capnp::bounded<58>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySwitcharray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySwitcharray() {
  return !_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Switcharray>::Reader UhdmRoot::Reader::getFactorySwitcharray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::get(_reader.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Switcharray>::Builder UhdmRoot::Builder::getFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::get(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySwitcharray( ::capnp::List< ::Switcharray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::set(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Switcharray>::Builder UhdmRoot::Builder::initFactorySwitcharray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::init(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySwitcharray(
    ::capnp::Orphan< ::capnp::List< ::Switcharray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Switcharray>> UhdmRoot::Builder::disownFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::disown(_builder.getPointerField(
      ::capnp::bounded<59>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdparray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdparray() {
  return !_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udparray>::Reader UhdmRoot::Reader::getFactoryUdparray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::get(_reader.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udparray>::Builder UhdmRoot::Builder::getFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::get(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdparray( ::capnp::List< ::Udparray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::set(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udparray>::Builder UhdmRoot::Builder::initFactoryUdparray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::init(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdparray(
    ::capnp::Orphan< ::capnp::List< ::Udparray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udparray>> UhdmRoot::Builder::disownFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::disown(_builder.getPointerField(
      ::capnp::bounded<60>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primterm>::Reader UhdmRoot::Reader::getFactoryPrimterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::get(_reader.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primterm>::Builder UhdmRoot::Builder::getFactoryPrimterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::get(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimterm( ::capnp::List< ::Primterm>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::set(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primterm>::Builder UhdmRoot::Builder::initFactoryPrimterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::init(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimterm(
    ::capnp::Orphan< ::capnp::List< ::Primterm>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::adopt(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primterm>> UhdmRoot::Builder::disownFactoryPrimterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primterm>>::disown(_builder.getPointerField(
      ::capnp::bounded<61>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Pathterm>::Reader UhdmRoot::Reader::getFactoryPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::get(_reader.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Pathterm>::Builder UhdmRoot::Builder::getFactoryPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::get(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPathterm( ::capnp::List< ::Pathterm>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::set(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Pathterm>::Builder UhdmRoot::Builder::initFactoryPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::init(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPathterm(
    ::capnp::Orphan< ::capnp::List< ::Pathterm>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::adopt(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Pathterm>> UhdmRoot::Builder::disownFactoryPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Pathterm>>::disown(_builder.getPointerField(
      ::capnp::bounded<62>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchkterm>::Reader UhdmRoot::Reader::getFactoryTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::get(_reader.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchkterm>::Builder UhdmRoot::Builder::getFactoryTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::get(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchkterm( ::capnp::List< ::Tchkterm>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::set(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchkterm>::Builder UhdmRoot::Builder::initFactoryTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::init(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchkterm(
    ::capnp::Orphan< ::capnp::List< ::Tchkterm>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::adopt(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchkterm>> UhdmRoot::Builder::disownFactoryTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchkterm>>::disown(_builder.getPointerField(
      ::capnp::bounded<63>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNetbit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNetbit() {
  return !_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Netbit>::Reader UhdmRoot::Reader::getFactoryNetbit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::get(_reader.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Netbit>::Builder UhdmRoot::Builder::getFactoryNetbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::get(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNetbit( ::capnp::List< ::Netbit>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::set(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Netbit>::Builder UhdmRoot::Builder::initFactoryNetbit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::init(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNetbit(
    ::capnp::Orphan< ::capnp::List< ::Netbit>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::adopt(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Netbit>> UhdmRoot::Builder::disownFactoryNetbit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Netbit>>::disown(_builder.getPointerField(
      ::capnp::bounded<64>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryStructnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryStructnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Structnet>::Reader UhdmRoot::Reader::getFactoryStructnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::get(_reader.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Structnet>::Builder UhdmRoot::Builder::getFactoryStructnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::get(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryStructnet( ::capnp::List< ::Structnet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::set(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Structnet>::Builder UhdmRoot::Builder::initFactoryStructnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::init(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryStructnet(
    ::capnp::Orphan< ::capnp::List< ::Structnet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Structnet>> UhdmRoot::Builder::disownFactoryStructnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Structnet>>::disown(_builder.getPointerField(
      ::capnp::bounded<65>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryEnumnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryEnumnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Enumnet>::Reader UhdmRoot::Reader::getFactoryEnumnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::get(_reader.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Enumnet>::Builder UhdmRoot::Builder::getFactoryEnumnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::get(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryEnumnet( ::capnp::List< ::Enumnet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::set(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Enumnet>::Builder UhdmRoot::Builder::initFactoryEnumnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::init(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryEnumnet(
    ::capnp::Orphan< ::capnp::List< ::Enumnet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Enumnet>> UhdmRoot::Builder::disownFactoryEnumnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Enumnet>>::disown(_builder.getPointerField(
      ::capnp::bounded<66>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIntegernet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIntegernet() {
  return !_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Integernet>::Reader UhdmRoot::Reader::getFactoryIntegernet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::get(_reader.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Integernet>::Builder UhdmRoot::Builder::getFactoryIntegernet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::get(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIntegernet( ::capnp::List< ::Integernet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::set(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Integernet>::Builder UhdmRoot::Builder::initFactoryIntegernet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::init(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIntegernet(
    ::capnp::Orphan< ::capnp::List< ::Integernet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Integernet>> UhdmRoot::Builder::disownFactoryIntegernet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Integernet>>::disown(_builder.getPointerField(
      ::capnp::bounded<67>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTimenet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTimenet() {
  return !_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Timenet>::Reader UhdmRoot::Reader::getFactoryTimenet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::get(_reader.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Timenet>::Builder UhdmRoot::Builder::getFactoryTimenet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::get(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTimenet( ::capnp::List< ::Timenet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::set(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Timenet>::Builder UhdmRoot::Builder::initFactoryTimenet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::init(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTimenet(
    ::capnp::Orphan< ::capnp::List< ::Timenet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Timenet>> UhdmRoot::Builder::disownFactoryTimenet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Timenet>>::disown(_builder.getPointerField(
      ::capnp::bounded<68>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogicnet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogicnet() {
  return !_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logicnet>::Reader UhdmRoot::Reader::getFactoryLogicnet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::get(_reader.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logicnet>::Builder UhdmRoot::Builder::getFactoryLogicnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::get(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogicnet( ::capnp::List< ::Logicnet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::set(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logicnet>::Builder UhdmRoot::Builder::initFactoryLogicnet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::init(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogicnet(
    ::capnp::Orphan< ::capnp::List< ::Logicnet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logicnet>> UhdmRoot::Builder::disownFactoryLogicnet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicnet>>::disown(_builder.getPointerField(
      ::capnp::bounded<69>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arraynet>::Reader UhdmRoot::Reader::getFactoryArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::get(_reader.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arraynet>::Builder UhdmRoot::Builder::getFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::get(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArraynet( ::capnp::List< ::Arraynet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::set(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arraynet>::Builder UhdmRoot::Builder::initFactoryArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::init(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArraynet(
    ::capnp::Orphan< ::capnp::List< ::Arraynet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arraynet>> UhdmRoot::Builder::disownFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::disown(_builder.getPointerField(
      ::capnp::bounded<70>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackedarraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackedarraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packedarraynet>::Reader UhdmRoot::Reader::getFactoryPackedarraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::get(_reader.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packedarraynet>::Builder UhdmRoot::Builder::getFactoryPackedarraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::get(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackedarraynet( ::capnp::List< ::Packedarraynet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::set(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packedarraynet>::Builder UhdmRoot::Builder::initFactoryPackedarraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::init(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackedarraynet(
    ::capnp::Orphan< ::capnp::List< ::Packedarraynet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::adopt(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packedarraynet>> UhdmRoot::Builder::disownFactoryPackedarraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packedarraynet>>::disown(_builder.getPointerField(
      ::capnp::bounded<71>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedevent>::Reader UhdmRoot::Reader::getFactoryNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::get(_reader.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedevent>::Builder UhdmRoot::Builder::getFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::get(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedevent( ::capnp::List< ::Namedevent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::set(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedevent>::Builder UhdmRoot::Builder::initFactoryNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::init(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedevent(
    ::capnp::Orphan< ::capnp::List< ::Namedevent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedevent>> UhdmRoot::Builder::disownFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::disown(_builder.getPointerField(
      ::capnp::bounded<72>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedeventarray>::Reader UhdmRoot::Reader::getFactoryNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::get(_reader.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedeventarray>::Builder UhdmRoot::Builder::getFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::get(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::set(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedeventarray>::Builder UhdmRoot::Builder::initFactoryNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::init(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::Namedeventarray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::adopt(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray>> UhdmRoot::Builder::disownFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::disown(_builder.getPointerField(
      ::capnp::bounded<73>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Specparam>::Reader UhdmRoot::Reader::getFactorySpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::get(_reader.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Specparam>::Builder UhdmRoot::Builder::getFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::get(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySpecparam( ::capnp::List< ::Specparam>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::set(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Specparam>::Builder UhdmRoot::Builder::initFactorySpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::init(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySpecparam(
    ::capnp::Orphan< ::capnp::List< ::Specparam>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::adopt(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Specparam>> UhdmRoot::Builder::disownFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::disown(_builder.getPointerField(
      ::capnp::bounded<74>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classdefn>::Reader UhdmRoot::Reader::getFactoryClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::get(_reader.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classdefn>::Builder UhdmRoot::Builder::getFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::get(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassdefn( ::capnp::List< ::Classdefn>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::set(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classdefn>::Builder UhdmRoot::Builder::initFactoryClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::init(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassdefn(
    ::capnp::Orphan< ::capnp::List< ::Classdefn>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::adopt(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classdefn>> UhdmRoot::Builder::disownFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::disown(_builder.getPointerField(
      ::capnp::bounded<75>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClasstypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClasstypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classtypespec>::Reader UhdmRoot::Reader::getFactoryClasstypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::get(_reader.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classtypespec>::Builder UhdmRoot::Builder::getFactoryClasstypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::get(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClasstypespec( ::capnp::List< ::Classtypespec>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::set(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classtypespec>::Builder UhdmRoot::Builder::initFactoryClasstypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::init(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClasstypespec(
    ::capnp::Orphan< ::capnp::List< ::Classtypespec>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::adopt(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classtypespec>> UhdmRoot::Builder::disownFactoryClasstypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classtypespec>>::disown(_builder.getPointerField(
      ::capnp::bounded<76>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassobj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassobj() {
  return !_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classobj>::Reader UhdmRoot::Reader::getFactoryClassobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::get(_reader.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classobj>::Builder UhdmRoot::Builder::getFactoryClassobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::get(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassobj( ::capnp::List< ::Classobj>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::set(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classobj>::Builder UhdmRoot::Builder::initFactoryClassobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::init(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassobj(
    ::capnp::Orphan< ::capnp::List< ::Classobj>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::adopt(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classobj>> UhdmRoot::Builder::disownFactoryClassobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classobj>>::disown(_builder.getPointerField(
      ::capnp::bounded<77>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterface() const {
  return !_reader.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterface() {
  return !_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interface>::Reader UhdmRoot::Reader::getFactoryInterface() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(_reader.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::getFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterface( ::capnp::List< ::Interface>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::set(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::initFactoryInterface(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::init(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterface(
    ::capnp::Orphan< ::capnp::List< ::Interface>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::adopt(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interface>> UhdmRoot::Builder::disownFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::disown(_builder.getPointerField(
      ::capnp::bounded<78>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgram() const {
  return !_reader.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgram() {
  return !_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Program>::Reader UhdmRoot::Reader::getFactoryProgram() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(_reader.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::getFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgram( ::capnp::List< ::Program>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::set(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::initFactoryProgram(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::init(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgram(
    ::capnp::Orphan< ::capnp::List< ::Program>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::adopt(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Program>> UhdmRoot::Builder::disownFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::disown(_builder.getPointerField(
      ::capnp::bounded<79>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackage() {
  return !_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Package>::Reader UhdmRoot::Reader::getFactoryPackage() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::get(_reader.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Package>::Builder UhdmRoot::Builder::getFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::get(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackage( ::capnp::List< ::Package>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::set(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Package>::Builder UhdmRoot::Builder::initFactoryPackage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::init(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackage(
    ::capnp::Orphan< ::capnp::List< ::Package>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::adopt(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Package>> UhdmRoot::Builder::disownFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::disown(_builder.getPointerField(
      ::capnp::bounded<80>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModule() const {
  return !_reader.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModule() {
  return !_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Module>::Reader UhdmRoot::Reader::getFactoryModule() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(_reader.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::getFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModule( ::capnp::List< ::Module>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::set(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::initFactoryModule(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::init(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModule(
    ::capnp::Orphan< ::capnp::List< ::Module>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::adopt(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Module>> UhdmRoot::Builder::disownFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::disown(_builder.getPointerField(
      ::capnp::bounded<81>() * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDesign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDesign() {
  return !_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getFactoryDesign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(_reader.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDesign( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initFactoryDesign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDesign(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(_builder.getPointerField(
      ::capnp::bounded<82>() * ::capnp::POINTERS));
}

inline  ::uint64_t Process::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Process::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Process::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Process::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertydecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertydecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Propertydecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Propertydecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Propertydecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Propertydecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Propertydecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sequencedecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequencedecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sequencedecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequencedecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Sequencedecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Sequencedecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Sequencedecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Sequencedecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Sequencedecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Virtualinterfacevar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Virtualinterfacevar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Virtualinterfacevar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Virtualinterfacevar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Virtualinterfacevar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Virtualinterfacevar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Virtualinterfacevar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Virtualinterfacevar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Virtualinterfacevar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Virtualinterfacevar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Virtualinterfacevar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Virtualinterfacevar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Letdecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Letdecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Letdecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Letdecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Letdecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Letdecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Letdecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Letdecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Letdecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Letdecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Letdecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Letdecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Begin::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Begin::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Begin::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setStmts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Begin::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Begin::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Begin::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Begin::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Begin::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Begin::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Begin::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Begin::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Begin::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Begin::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Begin::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Begin::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Begin::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedbegin::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedbegin::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedbegin::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Namedbegin::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setStmts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedbegin::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Namedbegin::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedbegin::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Namedbegin::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedbegin::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedbegin::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Namedbegin::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Namedbegin::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedbegin::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Namedbegin::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedbegin::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Namedbegin::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedbegin::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedfork::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedfork::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedfork::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedfork::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedfork::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Namedfork::Reader::getVpiJoinType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Namedfork::Builder::getVpiJoinType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiJoinType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Namedfork::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setStmts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Namedfork::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedfork::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedfork::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Namedfork::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Namedfork::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Namedfork::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Namedfork::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Namedfork::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Namedfork::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Namedfork::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Namedfork::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Namedfork::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Namedfork::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Namedfork::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Namedfork::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Namedfork::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint64_t Forkstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forkstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forkstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forkstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forkstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forkstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Forkstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Forkstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Forkstmt::Reader::getVpiJoinType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Forkstmt::Builder::getVpiJoinType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiJoinType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Forkstmt::Reader::hasStmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasStmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getStmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setStmts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initStmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptStmts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownStmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Forkstmt::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forkstmt::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forkstmt::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forkstmt::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Forkstmt::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Forkstmt::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forkstmt::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Forkstmt::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forkstmt::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forkstmt::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Forkstmt::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Forkstmt::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forkstmt::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Forkstmt::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forkstmt::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Forkstmt::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forkstmt::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint64_t Forstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Forstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Forstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forstmt::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forstmt::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Forstmt::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Forstmt::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Forstmt::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Forstmt::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Forstmt::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Forstmt::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Forstmt::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Forstmt::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Forstmt::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Forstmt::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Forstmt::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Forstmt::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Forstmt::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Forstmt::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Forstmt::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Foreachstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Foreachstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Foreachstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Foreachstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Foreachstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Foreachstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Foreachstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Foreachstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Foreachstmt::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Foreachstmt::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Foreachstmt::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Foreachstmt::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Foreachstmt::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Foreachstmt::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Foreachstmt::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Foreachstmt::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Foreachstmt::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Foreachstmt::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Foreachstmt::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Foreachstmt::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Foreachstmt::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Foreachstmt::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Foreachstmt::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Foreachstmt::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Foreachstmt::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Genscope::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscope::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscope::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscope::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscope::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscope::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Genscope::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Genscope::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscope::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscope::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Genscope::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Genscope::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Genscope::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Genscope::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Genscope::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Genscope::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Genscope::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Genscope::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Genscope::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Genscope::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Genscope::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Genscope::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Genscope::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Genscope::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Genscope::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Distribution::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Distribution::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Distribution::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Distribution::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Distribution::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Operation::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Operation::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Operation::Reader::getVpiOpType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Operation::Builder::getVpiOpType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiOpType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::hasOperands() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Operation::Builder::hasOperands() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Operation::Reader::getOperands() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Operation::Builder::getOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Operation::Builder::setOperands( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Operation::Builder::initOperands(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Operation::Builder::adoptOperands(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Operation::Builder::disownOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Operation::Reader::getVpiDecompile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiDecompile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiDecompile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Operation::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Operation::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Partselect::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Partselect::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Partselect::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Partselect::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Partselect::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Partselect::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Partselect::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Partselect::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Partselect::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Partselect::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Partselect::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Partselect::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Refobj::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Refobj::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Refobj::Reader::getVpiGeneric() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Refobj::Builder::getVpiGeneric() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiGeneric(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Refobj::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Refobj::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Refobj::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Refobj::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Refobj::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Refobj::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refobj::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refobj::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refobj::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refobj::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refobj::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refobj::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refobj::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refobj::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refobj::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refobj::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refobj::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refobj::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refobj::Pipeline::getTaskfunc() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setTaskfunc( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refobj::Builder::initTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refobj::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Refobj::Reader::hasActualgroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Refobj::Builder::hasActualgroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Refobj::Reader::getActualgroup() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Refobj::Builder::getActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Refobj::Pipeline::getActualgroup() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Refobj::Builder::setActualgroup( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Refobj::Builder::initActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Refobj::Builder::adoptActualgroup(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Refobj::Builder::disownActualgroup() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Varselect::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varselect::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Varselect::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varselect::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varselect::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Varselect::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varselect::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varselect::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Varselect::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Varselect::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Varselect::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Varselect::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Shortrealvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Shortrealvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortrealvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortrealvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortrealvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortrealvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortrealvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortrealvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortrealvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortrealvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Shortrealvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Shortrealvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortrealvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortrealvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortrealvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortrealvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortrealvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortrealvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortrealvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortrealvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Shortrealvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortrealvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortrealvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortrealvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Shortrealvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortrealvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortrealvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortrealvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Shortrealvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortrealvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortrealvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortrealvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Shortrealvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortrealvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortrealvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortrealvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortrealvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortrealvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Shortrealvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Shortrealvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Shortrealvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Shortrealvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Shortrealvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Shortrealvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Shortrealvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Shortrealvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Shortrealvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Shortrealvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Shortrealvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Shortrealvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Shortrealvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Shortrealvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Shortrealvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortrealvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortrealvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Shortrealvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Realvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Realvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Realvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Realvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Realvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Realvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Realvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Realvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Realvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Realvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Realvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Realvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Realvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Realvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Realvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Realvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Realvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Realvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Realvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Realvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Realvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Realvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Realvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Realvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Realvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Realvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Realvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Realvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Realvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Realvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Realvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Realvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Realvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Realvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Realvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Realvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Realvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Realvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Realvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Realvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Realvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Realvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Realvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Realvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Realvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Realvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Realvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Realvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Realvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Realvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Realvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Realvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Realvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Realvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Realvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Realvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Realvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Realvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Realvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Realvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Realvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Realvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Realvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Bytevar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Bytevar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bytevar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bytevar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bytevar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bytevar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bytevar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bytevar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bytevar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bytevar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Bytevar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Bytevar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bytevar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bytevar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bytevar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bytevar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bytevar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bytevar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bytevar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bytevar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bytevar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Bytevar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bytevar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bytevar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bytevar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bytevar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bytevar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Bytevar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bytevar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bytevar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bytevar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bytevar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bytevar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Bytevar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bytevar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bytevar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bytevar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bytevar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bytevar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Bytevar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bytevar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bytevar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bytevar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bytevar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bytevar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bytevar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bytevar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Bytevar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bytevar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bytevar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Bytevar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Bytevar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bytevar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bytevar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Bytevar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Bytevar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bytevar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Bytevar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bytevar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Bytevar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bytevar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bytevar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Bytevar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Shortintvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Shortintvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortintvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortintvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortintvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortintvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortintvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortintvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Shortintvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Shortintvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Shortintvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Shortintvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortintvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortintvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortintvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortintvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortintvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortintvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortintvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortintvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Shortintvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortintvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortintvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortintvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Shortintvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortintvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortintvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortintvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Shortintvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortintvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Shortintvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Shortintvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Shortintvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Shortintvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Shortintvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Shortintvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Shortintvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Shortintvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Shortintvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Shortintvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Shortintvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Shortintvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Shortintvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Shortintvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Shortintvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Shortintvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Shortintvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Shortintvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Shortintvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Shortintvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Shortintvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Shortintvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Shortintvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Shortintvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Shortintvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Shortintvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Intvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Intvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Intvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Intvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Intvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Intvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Intvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Intvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Intvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Intvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Intvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Intvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Intvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Intvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Intvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Intvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Intvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Intvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Intvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Intvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Intvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Intvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Intvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Intvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Intvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Intvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Intvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Intvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Intvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Intvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Intvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Intvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Intvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Intvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Intvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Intvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Intvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Intvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Intvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Intvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Intvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Intvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Intvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Intvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Intvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Intvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Intvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Intvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Intvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Intvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Intvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Intvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Intvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Intvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Intvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Intvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Intvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Intvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Intvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Intvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Intvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Intvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Intvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Longintvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Longintvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Longintvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Longintvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Longintvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Longintvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Longintvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Longintvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Longintvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Longintvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Longintvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Longintvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Longintvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Longintvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Longintvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Longintvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Longintvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Longintvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Longintvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Longintvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Longintvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Longintvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Longintvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Longintvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Longintvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Longintvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Longintvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Longintvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Longintvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Longintvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Longintvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Longintvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Longintvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Longintvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Longintvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Longintvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Longintvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Longintvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Longintvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Longintvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Longintvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Longintvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Longintvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Longintvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Longintvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Longintvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Longintvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Longintvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Longintvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Longintvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Longintvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Longintvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Longintvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Longintvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Longintvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Longintvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Longintvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Longintvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Longintvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Longintvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Longintvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Longintvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Longintvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Integervar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Integervar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integervar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integervar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integervar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integervar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integervar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integervar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integervar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integervar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Integervar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Integervar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integervar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integervar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integervar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integervar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integervar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integervar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integervar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integervar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integervar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Integervar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integervar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integervar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integervar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integervar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integervar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Integervar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integervar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integervar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integervar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integervar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integervar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Integervar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integervar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integervar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integervar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integervar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integervar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Integervar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integervar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integervar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integervar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integervar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integervar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integervar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integervar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Integervar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integervar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integervar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Integervar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Integervar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integervar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integervar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Integervar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Integervar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integervar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Integervar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integervar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Integervar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integervar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integervar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Integervar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Timevar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Timevar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timevar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timevar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timevar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timevar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timevar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timevar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timevar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timevar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Timevar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Timevar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timevar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timevar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timevar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timevar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timevar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timevar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timevar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timevar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timevar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Timevar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timevar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timevar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timevar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timevar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timevar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Timevar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timevar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timevar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timevar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timevar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timevar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Timevar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timevar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timevar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timevar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timevar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timevar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Timevar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timevar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timevar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timevar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timevar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timevar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timevar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timevar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Timevar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timevar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timevar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Timevar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Timevar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timevar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timevar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Timevar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Timevar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timevar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Timevar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timevar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Timevar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timevar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timevar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Timevar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Arrayvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Arrayvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arrayvar::Reader::getVpiArrayType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiArrayType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiArrayType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arrayvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arrayvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Arrayvar::Reader::getVarselects() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVarselects() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVarselects( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arrayvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Arrayvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arrayvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arrayvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arrayvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arrayvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arrayvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arrayvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Arrayvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Arrayvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arrayvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arrayvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arrayvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arrayvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arrayvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arrayvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arrayvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arrayvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Arrayvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arrayvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arrayvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arrayvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arrayvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arrayvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arrayvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Arrayvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arrayvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Arrayvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Arrayvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arrayvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Arrayvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Arrayvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arrayvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Arrayvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arrayvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint64_t Arrayvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Packedarrayvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Packedarrayvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiPacked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiPacked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiPacked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarrayvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarrayvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarrayvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setVarbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarrayvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarrayvar::Reader::getElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::getElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setElements( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::initElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptElements(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarrayvar::Builder::disownElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarrayvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarrayvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarrayvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarrayvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarrayvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarrayvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarrayvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarrayvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Packedarrayvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarrayvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarrayvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarrayvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarrayvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarrayvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarrayvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarrayvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarrayvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarrayvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Packedarrayvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarrayvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarrayvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarrayvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarrayvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarrayvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarrayvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarrayvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Packedarrayvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarrayvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarrayvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Packedarrayvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Packedarrayvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarrayvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Packedarrayvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarrayvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint64_t Packedarrayvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarrayvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarrayvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Packedarrayvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Bitvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Bitvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bitvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bitvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bitvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setVarbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bitvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bitvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bitvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bitvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bitvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bitvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bitvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Bitvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Bitvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Bitvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Bitvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bitvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bitvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bitvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bitvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bitvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bitvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Bitvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Bitvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Bitvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Bitvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Bitvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Bitvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Bitvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Bitvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Bitvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bitvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bitvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Bitvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Bitvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Bitvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Bitvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Bitvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Bitvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Bitvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Bitvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint64_t Bitvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bitvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bitvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Bitvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Logicvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Logicvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicvar::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicvar::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setVarbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Logicvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Logicvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Logicvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Logicvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Logicvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Logicvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Logicvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Logicvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint64_t Logicvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Structvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Structvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVarbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Structvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Structvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Structvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Structvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Structvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Structvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Structvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Structvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Structvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Structvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint64_t Structvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Structvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Unionvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Unionvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Unionvar::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Unionvar::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasVarbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVarbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Unionvar::Reader::getVarbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::getVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVarbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Unionvar::Builder::setVarbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::initVarbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVarbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Unionvar::Builder::disownVarbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Unionvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Unionvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Unionvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Unionvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Unionvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Unionvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Unionvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Unionvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Unionvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Unionvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Unionvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Unionvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Unionvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Unionvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Unionvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Unionvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Unionvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Unionvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Unionvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Unionvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Unionvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Unionvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Unionvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Unionvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Unionvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Unionvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Unionvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Unionvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Unionvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Unionvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Unionvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Unionvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Unionvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Unionvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Unionvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Unionvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint64_t Unionvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Unionvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Unionvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Unionvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Enumvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Enumvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Enumvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Enumvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Enumvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Enumvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Enumvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Enumvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Enumvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Enumvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Enumvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::uint64_t Enumvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Enumvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Stringvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Stringvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Stringvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Stringvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Stringvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Stringvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Stringvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Stringvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Stringvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Stringvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Stringvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Stringvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Stringvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Stringvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Stringvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Stringvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Stringvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Stringvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Stringvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Stringvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Stringvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Stringvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Stringvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Stringvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Stringvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Stringvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Stringvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Stringvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Stringvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Stringvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Stringvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Stringvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Stringvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Stringvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Stringvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Stringvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Stringvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Stringvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Stringvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Stringvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Stringvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Stringvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Stringvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Stringvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Stringvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Stringvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Stringvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Stringvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Stringvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Stringvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Stringvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Stringvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Stringvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Stringvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Stringvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Stringvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Stringvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Stringvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Stringvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Stringvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Stringvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Stringvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Stringvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Chandlevar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Chandlevar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Chandlevar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Chandlevar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Chandlevar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Chandlevar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Chandlevar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Chandlevar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Chandlevar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Chandlevar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Chandlevar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Chandlevar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Chandlevar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Chandlevar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Chandlevar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Chandlevar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Chandlevar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Chandlevar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Chandlevar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Chandlevar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Chandlevar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Chandlevar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Chandlevar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Chandlevar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Chandlevar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Chandlevar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Chandlevar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Chandlevar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Chandlevar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Chandlevar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Chandlevar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Chandlevar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Chandlevar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Chandlevar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Chandlevar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Chandlevar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Chandlevar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Chandlevar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Chandlevar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Chandlevar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Chandlevar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Chandlevar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Chandlevar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Chandlevar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Chandlevar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Chandlevar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Chandlevar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Chandlevar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Chandlevar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Chandlevar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Chandlevar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Chandlevar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Chandlevar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Classvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Classvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Classvar::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classvar::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Classvar::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classvar::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Classvar::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classvar::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Classvar::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Classvar::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Classvar::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Classvar::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classvar::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classvar::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classvar::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classvar::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classvar::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classvar::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Classvar::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Classvar::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Classvar::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Classvar::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Classvar::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Classvar::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Classvar::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Classvar::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Classvar::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Classvar::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Classvar::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Classvar::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Classvar::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Classvar::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Classvar::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Classvar::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Classvar::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Classvar::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Classvar::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Classvar::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Classvar::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Classvar::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Classvar::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Classvar::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classvar::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classvar::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classvar::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classvar::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classvar::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Classvar::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classvar::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classvar::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Classvar::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Classvar::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classvar::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classvar::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Classvar::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Classvar::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classvar::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Classvar::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classvar::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Classvar::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classvar::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classvar::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Classvar::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Varbit::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Varbit::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::hasExprindex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasExprindex() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getExprindex() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getExprindex() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setExprindex( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptExprindex(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownExprindex() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasExprindexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasExprindexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Varbit::Reader::getExprindexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::getExprindexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setExprindexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::initExprindexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptExprindexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Varbit::Builder::disownExprindexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Varbit::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Varbit::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Varbit::Reader::getVpiAllocScheme() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Varbit::Builder::getVpiAllocScheme() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiAllocScheme( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiConstantVariable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiConstantVariable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiConstantVariable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiIsRandomized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiIsRandomized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiIsRandomized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Varbit::Reader::getVpiRandType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Varbit::Builder::getVpiRandType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiRandType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Varbit::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Varbit::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Varbit::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Varbit::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Varbit::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Varbit::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasVariabledrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasVariabledrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Varbit::Reader::getVariabledrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::getVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setVariabledrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::initVariabledrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptVariabledrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Varbit::Builder::disownVariabledrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasVariableloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasVariableloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Varbit::Reader::getVariableloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::getVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setVariableloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::initVariableloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptVariableloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Varbit::Builder::disownVariableloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getScope() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setScope( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptScope(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Varbit::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Varbit::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Varbit::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Varbit::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Varbit::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Varbit::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasIndexes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasIndexes() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Varbit::Reader::getIndexes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::getIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setIndexes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Varbit::Builder::initIndexes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptIndexes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Varbit::Builder::disownIndexes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Varbit::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Varbit::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Varbit::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Varbit::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Varbit::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Varbit::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Varbit::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Varbit::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Varbit::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Varbit::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Varbit::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Varbit::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Varbit::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Varbit::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t Varbit::Reader::getPathterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getPathterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setPathterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getTchkterm() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getTchkterm() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setTchkterm( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Varbit::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Varbit::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Varbit::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Task::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Task::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiMethod() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiMethod() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiMethod(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiDPIContext() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiDPIContext() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPIContext(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiDPICStr() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiDPICStr() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPICStr( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiDPICIdentifier() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiDPICIdentifier() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPICIdentifier( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Task::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getRefobj() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getRefobj() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setRefobj( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getIodecl() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getIodecl() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setIodecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Task::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Task::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Task::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Task::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Task::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Task::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Task::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Task::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Task::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Task::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Task::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Task::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Task::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Task::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Task::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Task::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Task::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Task::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Task::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Task::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Task::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline  ::uint64_t Function::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Function::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Function::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiFuncType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiFuncType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFuncType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiMethod() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiMethod() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiMethod(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiDPIContext() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiDPIContext() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPIContext(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiDPICStr() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiDPICStr() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPICStr( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiDPICIdentifier() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiDPICIdentifier() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPICIdentifier( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Function::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Function::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasStmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasStmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getStmt() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getStmt() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setStmt( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Function::Builder::adoptStmt(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownStmt() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Function::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getRefobj() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getRefobj() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setRefobj( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getIodecl() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getIodecl() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setIodecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Function::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Function::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Function::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Function::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Function::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Function::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Function::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Function::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Function::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Function::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Function::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Function::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Function::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Function::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Function::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Function::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Function::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Function::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Function::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Function::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Function::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Function::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Function::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Function::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modport::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modport::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Modport::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Modport::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modport::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Modport::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Modport::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Modport::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modport::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getInterface() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getInterface() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setInterface( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacetfdecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacetfdecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiAccessType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiAccessType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacetfdecl::Reader::hasTasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasTasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setTasks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Interfacetfdecl::Reader::hasFunctions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasFunctions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getFunctions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setFunctions( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setFunctions(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initFunctions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptFunctions(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Contassign::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Contassign::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Contassign::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Port::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Port::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::hasBits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasBits() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Port::Reader::getBits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Port::Builder::getBits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Port::Builder::setBits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Port::Builder::setBits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Port::Builder::initBits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Port::Builder::adoptBits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Port::Builder::disownBits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Port::Reader::getVpiPortIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiPortIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiPortIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiPortType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiPortType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiPortType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Port::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Port::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::getVpiConnByName() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Port::Builder::getVpiConnByName() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiConnByName(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiDirection() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiDirection() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiDirection( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiExplicitName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiExplicitName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiExplicitName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Port::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Port::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Port::Pipeline::getTypespecs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Port::Builder::setTypespecs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Port::Builder::initTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Port::Builder::adoptTypespecs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Port::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Port::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Port::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Port::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Port::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Port::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Port::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Port::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Port::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Port::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Port::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Port::Reader::hasHighconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasHighconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Port::Reader::getHighconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Port::Builder::getHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Port::Pipeline::getHighconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Port::Builder::setHighconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Port::Builder::initHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Port::Builder::adoptHighconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Port::Builder::disownHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Port::Reader::hasLowconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Port::Builder::hasLowconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Port::Reader::getLowconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Port::Builder::getLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Port::Pipeline::getLowconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Port::Builder::setLowconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Port::Builder::initLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Port::Builder::adoptLowconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Port::Builder::disownLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Portbit::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Portbit::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Portbit::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiPortIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiPortIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiPortIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiPortType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiPortType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiPortType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Portbit::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Portbit::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Portbit::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Portbit::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Portbit::Reader::getVpiConnByName() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Portbit::Builder::getVpiConnByName() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiConnByName(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiDirection() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiDirection() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiDirection( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Portbit::Reader::getVpiExplicitName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getVpiExplicitName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setVpiExplicitName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Portbit::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Portbit::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Portbit::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Portbit::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Portbit::Pipeline::getTypespecs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Portbit::Builder::setTypespecs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Portbit::Builder::initTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Portbit::Builder::adoptTypespecs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Portbit::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Portbit::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Portbit::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Portbit::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Portbit::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Portbit::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Portbit::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Portbit::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Portbit::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Portbit::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Portbit::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Portbit::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Portbit::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Portbit::Reader::hasHighconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Portbit::Builder::hasHighconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Portbit::Reader::getHighconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Portbit::Builder::getHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Portbit::Pipeline::getHighconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Portbit::Builder::setHighconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Portbit::Builder::initHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Portbit::Builder::adoptHighconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Portbit::Builder::disownHighconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Portbit::Reader::hasLowconn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Portbit::Builder::hasLowconn() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Portbit::Reader::getLowconn() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Portbit::Builder::getLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Portbit::Pipeline::getLowconn() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Portbit::Builder::setLowconn( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Portbit::Builder::initLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Portbit::Builder::adoptLowconn(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Portbit::Builder::disownLowconn() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Primitive::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Primitive::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Primitive::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modpath::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modpath::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Tchk::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Tchk::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Defparam::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Defparam::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Range::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Range::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udpdefn::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udpdefn::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udpdefn::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udpdefn::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udpdefn::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udpdefn::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Udpdefn::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Udpdefn::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Udpdefn::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Iodecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Iodecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Iodecl::Reader::getVpiDirection() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Iodecl::Builder::getVpiDirection() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiDirection( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Iodecl::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Iodecl::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Iodecl::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getTypespecs() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setTypespecs( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptTypespecs(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getTaskfunc() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setTaskfunc( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Iodecl::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Iodecl::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Iodecl::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Iodecl::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Iodecl::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Iodecl::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Iodecl::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t Iodecl::Reader::getUdpdefn() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getUdpdefn() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setUdpdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Iodecl::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Iodecl::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Iodecl::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Iodecl::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Iodecl::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Iodecl::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Iodecl::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Iodecl::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Iodecl::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t Aliasstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Aliasstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Aliasstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Clockingblock::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Clockingblock::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Clockingblock::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Clockingblock::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Clockingblock::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Clockingblock::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Clockingblock::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Clockingblock::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Clockingblock::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Clockingblock::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Clockingblock::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Clockingblock::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Clockingblock::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Clockingblock::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Paramassign::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Paramassign::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Paramassign::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Paramassign::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Paramassign::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setParamassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interfacearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interfacearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Interfacearray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interfacearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interfacearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interfacearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interfacearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacearray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacearray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t Programarray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Programarray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Programarray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Programarray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Programarray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Programarray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Programarray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Programarray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Programarray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Programarray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Programarray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Programarray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Programarray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Programarray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Programarray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Programarray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Programarray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Programarray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Programarray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Programarray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modulearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modulearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modulearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Modulearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modulearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setParamassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modulearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Modulearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Modulearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Modulearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Modulearray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Modulearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Modulearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Modulearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Modulearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modulearray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modulearray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modulearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modulearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t Gatearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Gatearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Gatearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Gatearray::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Gatearray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Gatearray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Gatearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Gatearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Gatearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Gatearray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Gatearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Gatearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Gatearray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Gatearray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Gatearray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Gatearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Gatearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Gatearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t Switcharray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Switcharray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Switcharray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Switcharray::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Switcharray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Switcharray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Switcharray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Switcharray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Switcharray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Switcharray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Switcharray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Switcharray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Switcharray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Switcharray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Switcharray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Switcharray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Switcharray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Switcharray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t Udparray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Udparray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Udparray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Udparray::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Udparray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Udparray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Udparray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Udparray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Udparray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Udparray::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasInstances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasInstances() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Udparray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Udparray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Udparray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Udparray::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Udparray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Udparray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Udparray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Udparray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Udparray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t Primterm::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primterm::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primterm::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primterm::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primterm::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primterm::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Primterm::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Primterm::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Primterm::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Pathterm::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Pathterm::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Pathterm::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Pathterm::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Pathterm::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Pathterm::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Pathterm::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Pathterm::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Pathterm::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Pathterm::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Pathterm::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Pathterm::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchkterm::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchkterm::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tchkterm::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchkterm::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchkterm::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tchkterm::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchkterm::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchkterm::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Tchkterm::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Tchkterm::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Tchkterm::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Tchkterm::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Netbit::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Netbit::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setExpr( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initExpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptExpr(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Netbit::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Netbit::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Netbit::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Netbit::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Netbit::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Netbit::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Netbit::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Netbit::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Netbit::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Netbit::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Netbit::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Netbit::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Netbit::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Netbit::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Netbit::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Netbit::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Netbit::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Netbit::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Netbit::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Netbit::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Netbit::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Netbit::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Netbit::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Netbit::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Netbit::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Netbit::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Netbit::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Netbit::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Netbit::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Netbit::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Netbit::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Netbit::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Netbit::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Netbit::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Netbit::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Netbit::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Netbit::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Netbit::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Netbit::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Netbit::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Netbit::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Netbit::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Netbit::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t Netbit::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Netbit::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Netbit::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Structnet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Structnet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setNets( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setExpr( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initExpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptExpr(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structnet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Structnet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structnet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Structnet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structnet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structnet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structnet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structnet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structnet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structnet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Structnet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Structnet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}

inline bool Structnet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS, value);
}

inline bool Structnet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Structnet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Structnet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Structnet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structnet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structnet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structnet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Structnet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structnet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structnet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Structnet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Structnet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Structnet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Structnet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Structnet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Structnet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structnet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Structnet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structnet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structnet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Structnet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structnet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structnet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Structnet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structnet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Structnet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Structnet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Structnet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Structnet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Structnet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Structnet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Structnet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Structnet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::uint64_t Structnet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Structnet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Structnet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Enumnet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Enumnet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setExpr( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initExpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptExpr(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumnet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Enumnet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumnet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Enumnet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumnet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumnet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumnet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumnet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumnet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumnet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Enumnet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Enumnet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}

inline bool Enumnet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS, value);
}

inline bool Enumnet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Enumnet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Enumnet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Enumnet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumnet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumnet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumnet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Enumnet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumnet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumnet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Enumnet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Enumnet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Enumnet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Enumnet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Enumnet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Enumnet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumnet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Enumnet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumnet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumnet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Enumnet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumnet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumnet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Enumnet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumnet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Enumnet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Enumnet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Enumnet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Enumnet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Enumnet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Enumnet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Enumnet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Enumnet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint64_t Enumnet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Enumnet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Enumnet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Integernet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Integernet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integernet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Integernet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integernet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Integernet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integernet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integernet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integernet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integernet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integernet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integernet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Integernet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Integernet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Integernet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Integernet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integernet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integernet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integernet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integernet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integernet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integernet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integernet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integernet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Integernet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Integernet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Integernet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integernet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integernet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integernet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Integernet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integernet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integernet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Integernet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Integernet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Integernet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Integernet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Integernet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Integernet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integernet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Integernet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integernet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integernet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Integernet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integernet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integernet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Integernet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integernet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Integernet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Integernet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Integernet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Integernet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Integernet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Integernet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Integernet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Integernet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t Integernet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Integernet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Integernet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Timenet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Timenet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timenet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Timenet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timenet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Timenet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timenet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timenet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timenet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timenet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timenet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timenet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Timenet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Timenet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Timenet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Timenet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timenet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timenet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timenet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timenet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timenet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timenet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timenet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timenet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Timenet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Timenet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Timenet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timenet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timenet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timenet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Timenet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timenet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timenet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Timenet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Timenet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Timenet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Timenet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Timenet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Timenet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timenet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Timenet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timenet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timenet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Timenet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timenet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timenet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Timenet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timenet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Timenet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Timenet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Timenet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Timenet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Timenet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Timenet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Timenet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Timenet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t Timenet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Timenet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Timenet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Logicnet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Logicnet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicnet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicnet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicnet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicnet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicnet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicnet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicnet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Logicnet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Logicnet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Logicnet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Logicnet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicnet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicnet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicnet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicnet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicnet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicnet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicnet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicnet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Logicnet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Logicnet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Logicnet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Logicnet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Logicnet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Logicnet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Logicnet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Logicnet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Logicnet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Logicnet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Logicnet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Logicnet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Logicnet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Logicnet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Logicnet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Logicnet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Logicnet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Logicnet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicnet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Logicnet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Arraynet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Arraynet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::hasNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setNets( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptNets(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arraynet::Reader::getRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::getRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setRange( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setRange(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::initRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptRange(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arraynet::Builder::disownRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arraynet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arraynet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arraynet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arraynet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arraynet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arraynet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Arraynet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Arraynet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Arraynet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Arraynet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Arraynet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Arraynet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Arraynet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraynet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraynet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraynet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Arraynet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraynet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraynet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Arraynet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Arraynet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Arraynet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Arraynet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Arraynet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Arraynet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arraynet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arraynet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arraynet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arraynet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arraynet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arraynet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Arraynet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Arraynet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Arraynet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Arraynet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Arraynet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Arraynet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Arraynet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Arraynet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint64_t Arraynet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Packedarraynet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Packedarraynet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiPackedArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiPackedArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiPackedArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasLeftexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasRightexpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasRightexpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasExpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasExpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setExpr( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initExpr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptExpr(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setRanges( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setRanges(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setElements( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptElements(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasNetbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasNetbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getNetbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setNetbits( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setNetbits(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initNetbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptNetbits(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownNetbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiConstantSelect() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiConstantSelect() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiConstantSelect(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiExpanded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiExpanded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiExpanded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiImplicitDecl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiImplicitDecl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiImplicitDecl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiNetDeclAssign() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiNetDeclAssign() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiNetDeclAssign(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Packedarraynet::Reader::getVpiResolvedNetType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getVpiResolvedNetType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiResolvedNetType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiScalar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiScalar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiScalar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<230>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiExplicitScalared() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiExplicitScalared() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiExplicitScalared(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<231>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<232>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarraynet::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarraynet::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarraynet::Reader::getVpiStrength0() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarraynet::Builder::getVpiStrength0() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiStrength0( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarraynet::Reader::getVpiStrength1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarraynet::Builder::getVpiStrength1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiStrength1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Packedarraynet::Reader::getVpiChargeStrength() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Packedarraynet::Builder::getVpiChargeStrength() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiChargeStrength( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiVector() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiVector() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiVector(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<233>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiExplicitVectored() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiExplicitVectored() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiExplicitVectored(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<234>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::getVpiStructUnionMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}

inline bool Packedarraynet::Builder::getVpiStructUnionMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setVpiStructUnionMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<235>() * ::capnp::ELEMENTS, value);
}

inline bool Packedarraynet::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setPorts( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasDrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasDrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getDrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setDrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initDrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptDrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownDrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasLoads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasLoads() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getLoads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setLoads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initLoads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptLoads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownLoads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasLocaldrivers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasLocaldrivers() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getLocaldrivers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setLocaldrivers( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initLocaldrivers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptLocaldrivers(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownLocaldrivers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasLocalloads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasLocalloads() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Packedarraynet::Reader::getLocalloads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::getLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setLocalloads( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Packedarraynet::Builder::initLocalloads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptLocalloads(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Packedarraynet::Builder::disownLocalloads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasSimnets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasSimnets() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getSimnets() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getSimnets() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setSimnets( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptSimnets(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownSimnets() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasTypespec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasTypespec() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Packedarraynet::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Packedarraynet::Pipeline::getTypespec() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Packedarraynet::Builder::setTypespec( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Packedarraynet::Builder::initTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::adoptTypespec(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Packedarraynet::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasPrimterms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasPrimterms() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getPrimterms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setPrimterms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setPrimterms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initPrimterms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptPrimterms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownPrimterms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasPathterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasPathterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getPathterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setPathterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setPathterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initPathterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptPathterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownPathterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Packedarraynet::Reader::hasTchkterm() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Packedarraynet::Builder::hasTchkterm() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Packedarraynet::Reader::getTchkterm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::getTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Packedarraynet::Builder::setTchkterm( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Packedarraynet::Builder::setTchkterm(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Packedarraynet::Builder::initTchkterm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Packedarraynet::Builder::adoptTchkterm(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Packedarraynet::Builder::disownTchkterm() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline  ::uint64_t Packedarraynet::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Packedarraynet::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Packedarraynet::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedevent::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedevent::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedeventarray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedeventarray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Specparam::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Specparam::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Classdefn::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Classdefn::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Classdefn::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classdefn::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Classdefn::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classdefn::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classdefn::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Classdefn::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Classdefn::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classdefn::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Classdefn::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classdefn::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Classdefn::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classdefn::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Classtypespec::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classtypespec::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classtypespec::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Classtypespec::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Classtypespec::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classtypespec::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classtypespec::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classtypespec::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Classtypespec::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Classtypespec::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classtypespec::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Classtypespec::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classtypespec::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classtypespec::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Classtypespec::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Classtypespec::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classtypespec::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Classtypespec::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classtypespec::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Classtypespec::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classtypespec::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Classobj::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classobj::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classobj::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Classobj::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Classobj::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classobj::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classobj::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classobj::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Classobj::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Classobj::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Classobj::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Classobj::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Classobj::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Classobj::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Classobj::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Classobj::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Classobj::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Classobj::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Classobj::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Classobj::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Classobj::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interface::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interface::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacetfdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacetfdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacetfdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacetfdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacetfdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasModports() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModports() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModports() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setModports( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModports(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModports(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModports(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasModpaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModpaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNet() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasAssertion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasAssertion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasSpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasSpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline void Interface::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Program::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Program::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Program::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Program::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Program::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Program::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNet() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Program::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Program::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasAssertion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasAssertion() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Program::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Program::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Program::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Program::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Program::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasSpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasSpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Program::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Program::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Program::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Program::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Program::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void Program::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void Program::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void Program::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline void Program::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline void Program::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline void Program::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline void Program::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline void Program::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline void Program::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline void Program::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}

inline  ::uint64_t Package::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Package::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Package::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiUnit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiUnit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiUnit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Package::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNet() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Package::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Package::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasAssertion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasAssertion() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Package::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Package::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Package::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Package::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Package::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Package::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Package::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Package::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Package::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Package::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Package::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasSpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasSpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Package::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::uint64_t Package::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Package::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Package::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Package::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Package::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Package::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Package::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Package::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Package::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Package::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void Package::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void Package::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void Package::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline void Package::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool Package::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void Package::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Module::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Module::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiTopModule() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiTopModule() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTopModule(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefDecayTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefDecayTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefDecayTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasExprdist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasExprdist() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Module::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInstancearray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInstancearray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Module::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasProcess() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasProcess() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Module::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitives() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitives() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitivearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitivearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getPrimitivearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitivearrays( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initPrimitivearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitivearrays(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getModulearray() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getModulearray() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setModulearray( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasPorts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPorts() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Module::Builder::setPorts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasContassigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasContassigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Module::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Module::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModulearrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModulearrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModulearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Module::Builder::setModulearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModulearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModulearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModpaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModpaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Module::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasTchks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTchks() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getTchks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Module::Builder::setTchks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setTchks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initTchks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTchks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasDefparams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasDefparams() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getDefparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Module::Builder::setDefparams( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setDefparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initDefparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptDefparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasIodecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasIodecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Module::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasAliasstmts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasAliasstmts() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getAliasstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Module::Builder::setAliasstmts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initAliasstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptAliasstmts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasClockingblocks() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Module::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<225>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<226>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<227>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<228>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<229>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTaskfunc() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Module::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNet() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Module::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArraynet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArraynet() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Module::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasAssertion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasAssertion() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Module::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasClassdefn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasClassdefn() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Module::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInstance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInstance() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(22));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void Module::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void Module::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasProgramarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void Module::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedevent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedevent() {
  return !_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<25>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<26>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasSpecparam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasSpecparam() {
  return !_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}
inline void Module::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<27>() * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasConcurrentassertions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasConcurrentassertions() {
  return !_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getConcurrentassertions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}
inline void Module::Builder::setConcurrentassertions( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initConcurrentassertions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptConcurrentassertions(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownConcurrentassertions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<28>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasVariables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasVariables() {
  return !_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}
inline void Module::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<29>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}
inline void Module::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<30>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasScopes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasScopes() {
  return !_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getScopes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}
inline void Module::Builder::setScopes( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initScopes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptScopes(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownScopes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<31>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasTypespecs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTypespecs() {
  return !_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getTypespecs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}
inline void Module::Builder::setTypespecs( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initTypespecs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTypespecs(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownTypespecs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<32>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPropertydecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPropertydecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPropertydecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}
inline void Module::Builder::setPropertydecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPropertydecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPropertydecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPropertydecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPropertydecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<33>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasSequencedecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasSequencedecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getSequencedecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}
inline void Module::Builder::setSequencedecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setSequencedecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initSequencedecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptSequencedecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownSequencedecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<34>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedevents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedevents() {
  return !_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedevents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedevents( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedevents(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedevents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedevents(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedevents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<35>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedeventarrays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedeventarrays() {
  return !_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedeventarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedeventarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedeventarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedeventarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedeventarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedeventarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<36>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasVirtualinterfacevars() const {
  return !_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasVirtualinterfacevars() {
  return !_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getVirtualinterfacevars() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}
inline void Module::Builder::setVirtualinterfacevars( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setVirtualinterfacevars(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initVirtualinterfacevars(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptVirtualinterfacevars(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownVirtualinterfacevars() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<37>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasLogicvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasLogicvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}
inline void Module::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<38>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArrayvar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArrayvar() {
  return !_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}
inline void Module::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<39>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}
inline void Module::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<40>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasLetdecls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasLetdecls() {
  return !_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getLetdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}
inline void Module::Builder::setLetdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), value);
}
inline void Module::Builder::setLetdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initLetdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptLetdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownLetdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<41>() * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInstanceitems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInstanceitems() {
  return !_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getInstanceitems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_reader.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}
inline void Module::Builder::setInstanceitems( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initInstanceitems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInstanceitems(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownInstanceitems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(_builder.getPointerField(
      ::capnp::bounded<42>() * ::capnp::POINTERS));
}

inline  ::uint64_t Design::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Design::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Design::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Design::Reader::hasAllModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTopModules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTopModules() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getTopModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Design::Builder::setTopModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setTopModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initTopModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTopModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPrograms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPrograms() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPackages() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPackages() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllPackages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPackages( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllPackages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPackages(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_fff7299129556877_
