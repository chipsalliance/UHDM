/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_visitor.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_VPI_VISITOR_H
#define UHDM_VPI_VISITOR_H

#include <uhdm/BaseClass.h>
#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_forward_decl.h>

#include <ostream>
#include <set>
#include <string>
#include <vector>

namespace UHDM {
class VpiVisitor;

// Visit an object, dump to given stream.
void visit_object(vpiHandle obj_h, VpiVisitor* visitor);
void visit_object(vpiHandle obj_h, std::ostream& out,
                  bool shallowVisit = false);

// Visit designs, dump to given stream.
void visit_designs(const std::vector<vpiHandle>& designs, VpiVisitor* visitor);
void visit_designs(const std::vector<vpiHandle>& designs, std::ostream& out);

// For debug use in GDB
std::string decompile(const UHDM::any* handle);

class VpiVisitor final {
 private:
  std::ostream& stream_indent(int32_t indent) const;

  void visit_baseclass(vpiHandle obj_h, int32_t indent, const char* relation, bool shallowVisit);
<VISITOR_PRIVATE_DECLARATIONS>

 public:
  void visit_object(vpiHandle obj_h, int32_t indent,
                    const char* relation, bool shallowVisit);
  void visit_weakly_referenced();

  bool getVisitWeaklyReferenced() const { return m_visitWeaklyReferenced; }
  void setVisitWeaklyReferenced(bool enable) {
    m_visitWeaklyReferenced = enable;
  }

  const VisitedContainer& getVisited() const { return m_visited; }
  const AnySet& getWeaklyReferenced() const { return m_weaklyReferenced2; }

  explicit VpiVisitor(std::ostream& out) : m_out(out) {}

 private:
  std::ostream& m_out;
  AnySet m_weaklyReferenced1;
  AnySet m_weaklyReferenced2;
  VisitedContainer m_visited;
  bool m_visitWeaklyReferenced = true;
};

}  // namespace UHDM

#endif  // UHDM_VPI_VISITOR_H
